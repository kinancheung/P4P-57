WebAssembly deployments
0.03332022464926413
C++
0.03276819286256646
_
0.023116653420332284
memory leaks
0.018097771426794636
class ObjectTable
0.01495871034040208
JavaScript
0.013752335772208224
C++/CLI
0.011611650435610832
externref
0.010745819225558418
JS
0.010354981072235044
finalizer
0.010301319922736618
side table
0.009683985265030502
weak reference
0.009122783957197962
i
0.008374799223109356
problem
0.00826671082490778
finalizers
0.008202651042344515
complete working example
0.007491074378590768
Foo^ h
0.007437258837599753
d
0.007388240577043556
cycle
0.007380167586516503
new value type
0.007327414075734127
classes
0.007203966339669102
JavaScript
objects
0.006782797896565224
case
0.006507806003482998
object
0.006251258733551964
data provider
0.006101382137237769
C++ language
extensions
0.006075566999765163
offset
0.005817824538566933
instances
0.0056718768717272
uint32_t idx
0.005602490321567306
WebAssembly references
0.005513670991533149
GC-managed memory
0.005487052296959851
obj
0.005410772064729787
garbage
collector
0.0053594320273021145
instance
0.005254032951406689
reference-counted objects
0.005175579474729408
run-time
0.005112872676375839
automatic storage duration
0.005045940425720685
cycles
0.004980401538388459
minimal implementation
0.004760369733922383
language extension
0.004736934286112163
new Foo
0.004723797015006074
imports
0.00468211242253545
GC
0.004523818873333965
void
0.004516643124410919
result
0.0042867496315361865
return this.objects[handle
0.004059911119866199
destructor
0.003967282069293502
return handle
0.003957821075450006
val
0.003836596702128955
LLVM support
0.0037334644382851345
C++
types
0.003693303755902929
C library
0.0036690534035954837
handles
0.0036501237904141286
Milestone
0.0036353012023369624
design and implementation plan
0.00363070488796935
weak refs
0.0035525221570074125
values
0.0035091610180323163
i32 values
0.003503318273203055
first conventional solution
0.003429207751965001
externref ref
0.0034054359781565883
wasm_table_set_externref(externrefTableId
0.0033855828641736686
resource
0.0033792276711776268
table_id
0.003195300125695369
system
0.0031741945294410856
CLI
0.003166612056816956
delete b
0.0031543558482055164
proposal
0.0031041300776853075
web
0.0031003672077161266
core
0.0030962782183008696
Emscripten
0.0030678210934156633
local
variables
0.0030502931950695815
garbage-collection
0.0030451030642390216
new DataView(bytes
0.0030285188519679155
C++ pointers
0.0030108813168772237
global state
0.002989288828878236
tableSize
0.0029860440020122976
LLVM
0.002919611064099212
context
0.002915821003187757
garbage-collected objects
0.002861581779127518
different parts
0.002852687027104303
object graph
0.0028508023729592845
*
0.002804286432157984
WASM_IMPORT(register_finalizer)(externref registry
0.0027886786487218134
ongoing work
0.0027828158957507606
lower level
0.002782616663619069
members
0.0027512973350462848
destructors
0.0027510299481085347
programs
0.0027016325099971186
raw
byte array
0.0026615453130058976
this.objects.length - this.freelist.length
0.0026491321167557147
heap
0.002626265980073205
only data types
0.0026010796890746967
interface
0.0025954925931136017
template<typename T
0.0025782808496664956
side
table
0.0025695176642902507
int
0.002543549822770282
type Foo%
0.002518149256927009
PtrList^ tail
0.0025055658850101363
User application
0.00248275209226071
malloc
0.0024685741414307663
arguments
0.0024149634590506478
results
0.00241423052972814
time
0.0024135588305308395
struct Buf
0.002406364506295936
goal
0.002390602879424314
stack pointer
0.0023626112779429596
wasm_null_externref
0.0023419393972653486
struct Bar
0.002333748418759441
proof
0.002329579200306942
concept
0.002326811178560832
weird restrictions
0.002321802624092253
C++
application
0.0023151035620756102
prototype phase
0.002241453614648662
FIXME
0.0022253353016205846
new Q
0.002214376111732831
large standard library
0.002213885135121112
compiler
0.0021833559676706655
different
teams
0.0021638411124613476
scope
0.002159449180092421
C#
0.0021066397860834327
Reference typing extensions
0.002048718461571128
program references
0.002038097862380524
way
0.0020287213147507795
approach
0.002020126305270869
item
0.0020040898776875603
address
0.0019421585728823727
earlier version
0.0018532126637309835
wasm_table_store(uint32_t idx
0.0018158162316782398
fact
0.0017997487593491043
standard libraries
0.0017860500841809668
tables
0.0017847508125291031
development milestones page
0.0017813700631223377
release
0.0017791506049079973
this.refs[idx
0.0017660471446549354
items
0.0017579653092821333
similar languages
0.0017572773398075005
uint8_t val
0.0017561248834392965
Rationale
0.0017547584161860794
Captured^ c
0.0017524604920492845
fields
0.0017259944914872795
RAII idiom
0.0017220623593934806
notion
0.0016957269911568372
Handles
0.0016886751688607502
JS
code referencing WebAssembly
0.00168322200340308
discussion
0.0016608849256685356
document
0.00165898555720597
reason
0.001654240492599268
cost relative
0.0016527241354892038
bit
offsets
0.001649410904601363
need
0.0016479899190920877
bare-bones compilation
0.0016476435955203909
Windows platform
0.0016430116024158704
effort
0.0016363497223225566
basic idea
0.001628969800916603
external storage
0.001619693652346486
similar proposals
0.0016155690334656483
.wasm file
0.0016080177239660848
global coordination
0.0016056286190058765
resources
0.0016051066574209792
free list
0.0015948154400761171
programmer
0.00158851100823404
higher performance
0.0015881552092924893
WebAssembly places
0.0015827935569751796
gc_load_f{32,64
0.0015726586967571522
access
0.001569635628015915
good usability
0.0015581221259447647
s}{16,32,64
0.0015580784036487933
pattern
0.001547887060000632
other source languages
0.001544392818926587
wasm allocations
0.001539121192872584
web browser
0.0015355048836645133
.NET environment
0.0015353767025099358
wasm_table_size(uint32_t
0.0015345801836037108
practice
0.0015338009488563053
conversion semantics
0.0015112080708703166
argument
0.001509283144293288
=
0.0015080867177342811
point
0.0015052836738787543
externref WASM_IMPORT(gc_alloc)(uint32_t nbytes
0.0015051969442208808
PtrList(T
0.0014885681161206912
gc_store_f{32,64
0.0014797142560279463
\
0.0014772554826839126
Win32 API
0.001477046060555916
annotations
0.0014636510328432106
high-performance system
0.0014633212191229525
Node^
0.0014529221768046423
Handle mechanism
0.0014424399833991178
General
references
0.0014363729528739902
release(uint32_t
0.0014344639692080454
co
0.0014191402776466174
separate data type
0.0014134669299796997
facility
0.0014070936103279927
count
0.0014021328438195589
PtrList
0.00140014138672979
offset, val) => obj.storeU8(offset
0.001393187148799857
chart
0.0013721239933390831
FinalizationRegistry
  // instance
0.0013711753257344905
easy thing
0.0013651554837818202
implicit conversions
0.0013637473493224666
PtrList::!PtrList
0.0013198820798497489
test(Foo^ arg
0.0013043336917096474
WinRT
0.0013033943261186642
terms
0.0012891230390739109
ref(uint32_t
0.0012816488914672594
OpenGL
0.0012736886354637682
this.view.getUint8(offset
0.0012559838552566897
native deployments
0.0012439733434111663
binding
0.0012322250052114738
S}{16,32,64
0.0012241916184831884
storeU8(offset
0.0012025176000500081
WebGL
0.0011935964316367909
int32_t
0.001186171360967047
points
0.0011859039874407716
loadF{32,64
0.0011757269765096875
this.view.setUint8(offset
0.0011741007933967584
load{U
0.0011699275969517253
captures
0.0011676027075585417
C++17
0.0011617540726473244
multiple inheritance
0.0011604826711075248
story
0.0011515850297039694
c
0.0011459451779650895
Bar::~Bar
0.0011422247132435934
mind
0.001140765683617601
b{42
0.001139149780505172
Systems
0.0011389081174222927
seamless interoperability
0.0011354647368148404
wasm_table_size(externrefTableId
0.001133073115237585
C++/CX
0.0011307980627830994
C++20
0.0011260110746283776
unregisterToken
0.0011243498602374676
virtual methods
0.0011223940506948737
initial investigations
0.0011067963294455285
robustness problems
0.0011044574322442238
unregister_finalizer(registry
0.001104223153296777
ML
0.0011004544642608958
i32.add
0.0010936451469960608
graphs
0.0010925955872949009
--target
0.001091056480710319
i64.load
0.0010905240790871074
i64
0.001090302031617866
project
0.0010899842988946334
tableSize++
0.001088526692466034
scopes
0.0010868038239734705
feasibility
0.0010861633160401942
progress
0.0010848024191914285
designers
0.0010826244522910721
this.view
0.0010789024029439435
big ball
0.001077471279892383
loadU8(offset
0.0010773314136847587
divergence
0.0010745254814959987
uniform type
0.0010704558410904092
gap
0.0010697954998033705
scripts
0.0010659662638579396
wasm32
0.0010650430662782668
full details
0.0010625472379673462
risk
0.001061508475546384
pictie
0.0010604404720763211
Tables
0.0010604233148414565
attempt
0.001049613624571597
nice article
0.001049340383409407
users
0.0010485822269982095
Idea
0.0010465411191373617
overhead
0.001046524656592685
specification
0.0010451210899895373
general
0.0010431263110890676
subset
0.0010424634314048704
Destructors
0.0010362741548891497
basic treatment
0.0010360013619625144
survival
0.001035451406200525
loadRef(idx
0.0010353308908894975
situation
0.0010352246009694196
interfaces
0.0010348852554315775
visibility
0.001032987314820516
arrays
0.001032198641261517
Herb Sutter
0.001028541152460515
leaks
0.0010282642182293923
construction
0.0010267890025016792
only realistic option
0.0010258279869173753
choice
0.0010245464613433156
WebAssembly/JS boundary
0.0010228316475535586
explicit Handle(int32_t
0.0010218653745511566
Better
interoperability
0.0010161565272678484
control
0.0010160072035104001
extent
0.0010153748180769353
first-class citizen
0.001015310457462118
static method
0.0010147689569754235
codebase
0.001011414265530099
soft spot
0.0010081079531984183
lots
0.0010075769246112865
this.refs
0.0010062769283313295
sense
0.0010058866125741356
exceptions
0.0010052360130522466
Functions
0.001005097412224353
public:
  Handle(Foo^ obj) id_(intern(obj
0.0010042076737035112
syntactic sugar
0.0010031905323904247
embeddings
0.0010021058089318255
rest
0.0010015079716452718
medium-term
0.001000981606918601
%
0.0010004083061918646
tweaked
versions
0.0010003297039816055
Object files
0.0009993652237104418
identity
0.0009993600843264613
prospect
0.0009991288524671131
C++-to-WebAssembly pipeline
0.0009977421714753008
patterns
0.0009940984296349935
gc_load_u8
0.0009937910271695433
current toolchain
0.0009935936415757872
Handle
class
0.000993272127675496
function parameter
0.0009918253013422704
different kinds
0.0009894130124080201
response
0.000988076929584059
route
0.0009875692411729397
kind
0.0009874062938901374
host
0.0009872711459722875
Allocating cycle-participating objects
0.0009871844763116617
Node
0.0009861233320052902
integration
0.0009855982610331435
process
0.0009851779872601897
periodic global reasoning
0.0009833797752855044
inspiration
0.000982286333003338
C++/WinRT
0.0009822713571732405
platforms
0.0009819668563354773
allocated region
0.0009816053592925857
cleanup
0.000980739693002517
gc_alloc
0.0009793289241588397
year
0.000978747943922231
loathe
0.0009766299406124307
WebAsembly
0.0009754192325718393
useful reading
0.0009745061883273027
user action
0.0009743885532828127
f64
0.0009737887154062002
large API surface area
0.0009736361904048706
bytes
0.0009735148121891041
limitations
0.0009722372949904411
order
0.000972183295149782
Members
0.0009700953261128362
obj.loadU8(offset
0.0009690009330699755
constructor(nbytes
0.0009688720740531501
speculation
0.0009687955847395018
gc_load_s8
0.0009671864475472708
predecessor
0.0009664546198430444
target architecture
0.0009660996281564628
ability
0.0009659214287901163
nrefs
0.0009653468665493893
milestone
0.0009652086461865046
limitation
0.0009650618436173586
pure" modules
0.0009613352095086632
instructions
0.0009612017319393219
next section
0.0009603898009692819
small integer
identifiers
0.0009590586053397914
addition
0.0009586293720937153
copy
constructors
0.0009585313698698482
standard object-oriented type system
0.0009552426826478784
reader
0.0009531585841350244
needed facilities
0.0009505931912793986
compilation
0.0009491195494475463
beginning
0.0009483074128355412
uses
0.00094784089608329
ref struct List { T head
0.0009472808384225916
FinalizerSet::invokeFinalizer
0.000945879026207895
constructor
0.0009455852204480998
libc
0.0009448774511104092
simple change
0.0009442549179393997
attractiveness
0.0009431992171339519
tools
0.0009431438738043139
hooks
0.0009420845047450159
form
0.0009414034137005425
special cases
0.0009398376932530385
usual -> operator
0.0009374142213068196
Web platform
0.0009370422234186342
first baby-step
0.000935930044586618
subclasses
0.0009353875546205799
handle => table.release(handle
0.0009309789527311941
possibility
0.0009308455007192584
table.grow
0.0009299973789884319
List<T>^ tail
0.0009297752660001309
newer
WinRT API
0.000929235068909816
speed
0.0009273605167907392
environments
0.0009236225559292374
Foo^ and gcnew
extensions
0.0009235728004522842
refcount
0.0009235160119433772
this.objects
0.0009229781441974538
A::i
0.0009217373730178308
native" applications
0.0009215936380906516
calls
0.0009203557674930462
managed vision
0.0009192392527284576
first->next
0.0009170060171851764
sigil
0.0009139107520668218
store
0.0009125008573937917
release(handle
0.0009099557859384238
global
guaranteed system
0.0009082582118994295
emscripten
0.0009062577801355451
contexts
0.0009060075393061565
ways
0.0009053454753299604
Limitations
0.0009046410480243764
important and active platform
0.0009041189088552363
normal" classes linear classes
0.0009023321754518573
anyref
0.0009016104558392175
standard C++

A Ref C++ program
0.0009009789976884279
Inspiration
0.0009005853813564987
existing VM
0.0008980279466543877
c->finalize
0.0008966380844136152
Foo() syntax
0.0008965066252904304
Conventional solutions
0.0008955251599401162
this.objects[handle
0.0008903171418998934
strategy
0.0008891841566014871
components
0.0008867255259218327
callback
0.0008865210067449353
distinction
0.0008863503348865067
cross-cutting solution
0.0008858383402863866
inter-object
edges
0.0008856013805552268
this.freelist
0.0008855949447994455
trace(TraceVisitor&) method
0.0008847330285364895
std::pair template
0.0008830370103782331
DOM node
0.000880784432801837
Instructions
0.000880662827899902
Poor mans freelist
0.0008799894461697317
T pop
0.0008777043279823127
more detail
0.0008742071818423848
prints
0.0008730436200802092
static uint32_t intern(Foo^ obj
0.0008723473325814991
alternatives
0.0008721518378115129
implemented feature
0.0008715178503577983
finalizers_->register(this
0.0008715004987405999
ref(handle
0.0008714559334591972
linear
struct
0.0008696210840792749
closure
0.0008689488510554208
post-mortem" interface
0.0008682420692370713
special acquire/release book-keeping code
0.0008677047037154006
use
0.0008675210892841695
functions
0.0008666431797547604
LLVM+externref
0.0008663036511703608
PtrList::tail
0.0008658112535440291
definition
0.0008639181868929733
expand
0.0008583661295234321
bytes_(new uint8_t[nbytes
0.0008570205954012333
Stack
0.0008568418649183046
WASM_IMPORT(release)(uint32_t handle_id
0.0008566385658941222
gc_store_u8
0.0008564135000092054
nullptr
0.0008555815332352786
end
0.0008531880007404851
central part
0.0008510954271437343
Underneath
0.0008504728496603298
Buf::!Buf
0.0008494931224119712
this.freelist.pop
0.0008463086927237447
little wrapper
0.0008433601133310722
tail(tail
0.0008426434841490196
PtrList::head
0.0008394274150873968
I.e.
0.0008337096852281374
this.expand
0.0008329350114811218
finalizer->finalize
0.0008313693916477906
intern(obj
0.0008310950747440263
similar timing issues
0.0008289312655709489
std::function
0.0008266856563417669
location
0.0008262317691649598
Premature
0.0008224783947609084
tagging strategies
0.000822405212168041
len
0.0008204991224159235
this.freelist.push(--end
0.0008076263440396762
g(&a->i
0.0008032423466862253
workspace
0.0008021452725756881
omniscient programmers
0.0007998040897913476
hood
0.0007976435663935607
void g(int* i
0.0007938304137754521
mod
0.0007838883150895013
