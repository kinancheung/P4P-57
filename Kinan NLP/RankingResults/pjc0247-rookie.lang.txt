program p
0.04580600781670517
WebAssembly
0.03833092438084731
RK_STRICT_CHECKPerforms
0.03044552356938928
additional safe checks
0.030418649931634827
err
0.02890143271184219
out.errors
0.02786309110450543
C++17
0.0256763756752738
auto
0.025362873102133796
printf("%s\r\n
0.025198462977299014
rookie
0.02435752210734239
MSVC
0.022381945475164696
err.message.c_str
0.022334771966160006
Supports OOP
0.02115339595052387
execution
0.020869272809529646
modern languages
0.020668468044644145
kinds
0.02064726759114704
Ruby
0.020553824168136482
Garbage Gollector
0.020436359550267146
Automated memory management
0.020245563957333654
RookieVM
0.020229153905783923
C
0.020055161947524033
Built-in JSON library
0.019875383463308163
runner().execute(p
0.019472579889914927
error(s).\r\n
0.019360116573795418
option
0.01910852784404758
WebAssembly(emcc
0.018997826459533376
p2wast().convert(p
0.01898792411876574
file
0.01892145944931993
confusing syntax
0.018911508251322744
Compilation Flags

RK_HALT_ON_LONG_EXECUTIONPrevents long execution
0.01867617184581735
compile_output
0.018554531605736783
annotation
0.01854809676861759
built-in runner

Default implementaion
0.018447871768181395
overall performance
0.018394492805657796
VS
0.01834026366883219
= compiler::default_compiler
0.01832130378307556
Usage

compile_option opts
0.018307236498398646
most cases
0.018135518246073398
more works
0.017852664433036555
WAST expressions
0.017843257544094444
printf("Your code
0.017649398097408817
purpose
0.01712260018832975
RK_NO_IOExclude Input/Output codes
0.016732056947593298
.compile("a
0.01634222726933381
dynamic programming language
0.01618552611103969
simple and readable syntax
0.015489673911793175
Status
0.01348573371378425
