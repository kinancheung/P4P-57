default main export
0.020708442507610083
memory
    Encoder
0.020417652735350116
optional SIMD support
0.017795015466961554
YUV data
0.01778279884679721
H264 encoder
0.016575654765740376
const encoder
0.01570950332027477
MP4 file
0.01446823642089505
Encode RGB
0.013191797040548977
loadEncoder
0.012748104193873433
H264 video
0.01180556834326157
const Encoder
0.011656001127098622
=
0.011598494169192309
write
0.011150755496109296
WASM-based MP4 muxer
0.011146465525321735
encoding
0.010723456190872935
WASM and media handling
0.010496373734499992
same stride
0.010410127455288418
WebCodecs
0.010351005016492562
HEAPU8 - note
0.009138601126266011
Chrome
0.00913834666601013
pointer + size
0.008945023366042405
module
0.008830715402624135
RGB(A
0.008782141982009007
frame
0.008662888664178263
size
0.00854228071832573
bytes
0.008490470726297392
kbps
0.008484784183197406
Tips
0.008484314262701293
best quality
0.008045592315603865
ptr = encoder.getRGBPointer
0.0073479633356255914
H264 encoding
0.007153493837649741
writing
0.006869885152649663
mp4-wasm
0.00669740323024632
= encoder.memory
0.006584466753579919
async
0.006577860893181054
Node.js
0.006502522290317291
working example
0.00633874077534945
project
0.005858973987877938
import { simd
0.0058343437891201335
flat RGBA data
0.005565815836213248
uint8 MP4 data
0.005487872493818567
interface
0.005070190864333007
functions
0.004968589454321114
settings
0.0049667422764614775
offset
0.004657582700143473
width, height
0.004644989048489462
options
0.004586311220119522
folder
0.0044850204421347266
same API
0.004474016514169225
constant value
0.004373437683883222
NAL units
0.00429208159344399
stride, yuv_ptr
0.004284069440133216
File Size
0.004126719090081933
constant quantizationParameter
0.004082329514579739
time
0.0040039170169039635
new WASM module
0.0038315221576941207
storage
0.003720714399172054
examples
0.003683974832082329
internal struct
0.0036799644323929626
JavaScript
0.003678917881658067
Browser
0.0036704381744443472
crashes
0.0036582954173589683
allocates
0.003631998405219255
rendering
0.0036292716413366117
Emscripten
0.003623524913839107
environment
0.003566162955952776
flag
0.0035651517785867913
WebGL2s readPixels
0.0035292598723405373
build directory
0.0035104327267189927
getWasmPath
0.003503066553732893
existing buffer
0.0034901344178495295
video/mp4
0.0034822022940171797
chunk
0.0034179406548705427
renderer thread
0.003409235439898712
Uint8Array
0.003391246499007059
browser
0.00339086173340423
width
0.0033651283914695332
Encoder.create
0.003325126414324378
binary files
0.003309099467871658
height
0.0033012955610832785
MB
0.003299883816524271
desired bitrate
0.0032953346983284225
details
0.003286625654113471
most modern browsers
0.0032461980657321754
WASM lookup path
0.003243077651862664
future versions
0.0032101596600507027
different place
0.003205029504284885
minimp4
0.0031973274959043933
APIs
0.003183109226845199
pixels
0.003182139028421057
RGBA bytes
0.0031782111498675617
possible solution
0.0031619113597286977
MPEG LA
0.0031262891338828098
web
0.0031138381554812024
easy access
0.003086825304707629
different C libraries
0.0030866578069518665
./test/node-mux.js
0.0030781239909866247
pointer, size, offset
0.0030653161518847966
duration
0.0030559085280990514
fps
0.003046439664452533
qpMax
0.003028109651366373
huge royalties
0.0029850296550512716
binary and source code
0.0029822630393900517
lower quantization boundary
0.0029808693192932088
Allocates
0.0028948875933620475
RGB(A) pointer location
0.002891706395185771
acceptable output size
0.0027570215348336168
Parcel
0.0026500470330816815
esbuild
0.002636199204849657
rgba_ptr
0.0026274021918404563
Encoder.encode_rgb(enc
0.002618011664044438
Speed
0.0025294596421571646
mp4-encoder.js
0.0024829025204417842
]
0.002474068522004749
Encodes
0.002455697001918964
URL.createObjectURL(new Blob([mp4
0.0024553549892850036
Webpack
0.002437580709989994
mp4-encoder.wasm
0.0024102479546805606
Rollup
0.002390478879142663
image
0.002367919996028337
encoder.encodeYUV(yuv
0.0023555491807114985
Encoder.encode_yuv(enc
0.002354012669663777
Encoder.finalize_encoder(enc
0.0023507248374918474
performance
0.0023404986416278575
finishes
0.0023242094339624548
type
0.002292225040519267
minih264
0.002286459320167189
Encoder.mux_nal(mux
0.0022357744839206785
gl.readPixels
0.002229275241661108
following
0.002225089300587982
pointers
0.002212537179932734
Emscripten
Better support
0.0022053871493529177
order
0.0022029341149351614
nal_data
0.002187202704027799
Encoder.finalize_encoder(encoder_ptr
0.0021816175594228456
user
0.002175967585417986
gl.readPixelsIf
0.0021706737084034285
Alias
0.0021517842771470114
errors
0.0021494065066214726
vbv buffer
groupOfPictures
0.002148425617846228
Better error
0.00214500726569209
finish
0.002144982139385131
TODOs
0.0021421978175052334
@lieff
0.002137467791126656
Quality
0.0021286484253284794
Encoder.free_buffer(rgb_ptr
0.0021276993570839473
live demo
0.0021228382680090886
signature
0.0021227587024082602
subarray
0.002122142959928152
download
0.002113887374187155
WebGL1
0.0021120878654544368
moment
0.0021080742168779185
Contents

Examples
0.002103678764940383
CodePen
0.002088657285763359
hevc
0.002081791166457577
worker
0.00206680482575401
~144 - 160KB
0.0020667406241815975
need
0.002065730670154513
sequential outputs
0.0020644545170653197
number
0.002061601430497222
Encoder.free_buffer(yuv_ptr
0.0020594210190067433
mp4-encoder.simd.wasm
0.002054227478469239
URL
0.0020536094122246677
threads
Use pointers
0.0020508486658464835
WebGL
0.0020491101611286944
temporalDenoise
0.002048380172274319
Simple APIA simple wrapper
0.0020461238774843126
qpMin
0.0020456006185314217
small footprint
0.002037738843655754
Options
0.0020371879508183934
rgb_ptr
0.002030357389619525
optional function
0.002029694879481387
documentation
0.002028357638838399
environments
0.002021305240778188
keyframe
0.002019639741998277
HEAPU8.set(pixels
0.0020097646325914495
fragmentation
0.002008676484765813
output FPS
0.0020022516371317007
VBV
0.0020008373089589796
fs.createWriteStream(file.mp4
0.001995036114611383
case
0.0019905551021028693
encoder.end
0.001988885825229648
response stream
0.0019883553680712777
attention
0.001985369653684921
readChunksOfH264FromSomewhere
0.00198116591534072
Live Demo
0.0019805746466660507
kilobits
0.0019801524132337725
seconds
0.001979800600439364
simple.html
0.0019793935023630716
encoder.getRGBPointer
0.0019786670808771404
development
0.0019779206033123157
paths
0.001973431393385077
Encoder.free_buffer(ptr
0.0019730931102808465
gzip
0.0019700314950222234
encoder structure
mux = Encoder.create_muxer(settings
0.001961481641625833
simpler file write
0.00195747531218245
vendor
0.0019567261295814443
Video Buffering Verifier
0.0019536594103248873
Only


WebCodecs


API Docs

Simple API


Direct API
0.0019492467333380018
warning
0.0019474434648626303
HLS streaming playback
0.0019363039554639873
common usage
0.0019361973154615009
C/C++ pointers
0.0019343638095466109
Encoder.create_buffer(byteLength
0.0019326127880363655
view
0.0019232607606953418
fast client-side media creation
0.001920414616340107
flags
0.0019199339422979996
ES Module
0.0019176083684202864
GOP)
desiredNaluBytes
0.0019160635009980473
Direct APIDirect control
0.0019136069859387603
const mux = Encoder.create_muxer
0.0019116084161099186
end
0.0019061435298817768
./test/util/RGBAtoYUV.js
0.0019048467093484788
repository
0.0019043930730931555
script type="module
0.001903115121199192
distributed software
0.0019008195507872958
part
0.0018983258031452519
fastest speed
0.001895849539321716
Possible Future Features
0.0018946120368598675
.simd.wasm
0.001893691517956229
wasm-feature-detect
0.0018890955126095832
further notice
0.0018829159227160175
Use OffscreenCanvas
0.0018794049380830864
open muxer
Encoder.finalize_muxer(mux
0.001862121218921897
Project
0.0018621123973647218
enable-webassembly-simd
0.0018590649383058671
encodeRGB() function
fps
0.0018573881116974353
client-side MP4/H264 encoding
0.001856001654281399
chrome://flags/#enable-experimental-web-platform-features
0.001855377775811508
free / OSS / commercial
0.0018542273890663212
variable
0.0018529579452073518
defaults
0.0018514961666434415
default 2 second buffer
0.0018510915638539779
user-friendly and pointer-safe API
0.001848798764055332
WIP
0.0018486053639110173
LICENSE.md
0.0018461676737964697
H.265
0.0018420932261090173
previous version
0.0018383585341811776
better compression
0.00183478703973299
https://unpkg.com/wasm-feature-detect?module
0.0018298377592892061
unnecessary data copies
0.0018279344568129059
License

MIT
0.0018246341631071505
H264 WASM/C/C++ source code
0.0018212635614896391
stream.write(buf
0.0018184029765464572
temporal noise supression
sequential (default
0.0018161522040519725
TODOs


Contributing


Building
0.0018148254424668543
Update
0.0018147813384862487
HTML
0.0018032980678876574
scriptDir
0.001800544191956837
valuable information
0.001799130809504241
upper bound
0.0017922507321836939
return
0.0017881278020666488
seeking
0.001770137034321132
Mux
0.001768846321185619
C++
0.0017677528801320563
vbvSize
0.0017614890497750792
Example
0.0017534362170768007
Node.js
Memory efficient
0.0017511544969988865
pass --enable-blink-features
0.0017490534849232704
filesize
0.0017474212205464438
own H265 data

encoder.encodeRGB(pixels
0.0017421094191704492
skull
0.0017306693719815924
speed } option
0.001716422034813596
outputs.push(buf
0.0017057845632463026
malloc
0.0016971728021505737
legal landscape
0.0016769649661070706
sequential }
  const buf = Encoder
0.0016730056664415694
second animation
0.001665263401915773
Import latest
import loadEncoder
0.0016508072188313652
NOTE
0.0016460494859559158
encode
0.0016459186691692137
Encode
0.0016431573336306332
issue
0.0016272866872256622
Credits
0.001622590328445151
error
}

const encoder_ptr = Encoder.create_encoder(settings
0.0016176230165755772
lower-level Direct API
0.0016022179435155868
Encoder.free_buffer(p
0.0015967948854971646
faster YUV image transfer
0.001582868815301541
p
0.0015765635366363118
Trevor Sundberg
0.0015512319073127017
