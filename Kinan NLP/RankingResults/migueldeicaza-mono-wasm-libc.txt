.wasm module
0.03519618860413178
libc functions
0.030113501646019544
JavaScript
0.025961793820096227
V8 implementation
0.025534458615529367
heap
0.022238351743418743
musl libc
0.02105796977622994
musl
0.018115592924966062
musls code
0.018066042729762862
exported function
0.016311349116594334
wasm.js
0.01608980956944225
FFI
0.015946774187154865
convenience API
0.015195947406781712
limited dynamic linking

A musl experiment
0.014939328581569758
modules
0.013411826095253076
dlsym / dlclose
0.011933320040783242
WebAssembly experiment
0.011901707102352464
memory segments
0.011599237399579479
toolchain
0.010507470440812568
first .wasm file
0.01033745712250029
developers
0.010164500856883715
APIs
0.009972997406919565
basic memory manager
0.009926272020065682
experimental WebAssembly C library
0.009848207638139676
bugs
0.009812164844932738
musl.wasm
0.009701634324391542
.wasm files
0.009617706463080343
WebAssemblys
design
0.009303294436179221
dlcall
0.008582169814241985
goal
0.008532855300600469
waterfall
0.008483977577982705
functionality
0.008346771681752595
dlerror
0.008237912867052253
Emscriptens musl port
0.007677605078725334
Loads
0.007600119442862452
typedef void
0.007518299986616449
user
stacks
0.007265816864923329
MVP
0.007241412561239117
different parts
0.007145408161158048
Interesting applications
0.006864353120723978
good thing
0.006568537558849952
time
0.006522296724805992
world_type world
0.006467624350793804
example
0.006076994297365405
program
0.006051945329374383
repository
0.006033091825202678
clang
0.005828633513376228
symbol
0.005341667632340598
ABI
0.005266313982629736
NaCl
0.005237512099179338
experience
0.004990076069816279
overflow
0.004970817564709434
subset
0.00490432334619815
Exports
0.0048397124669123815
Developers
0.004828566638238596
equivalent
0.00477669796443023
convention
0.004749225730811043
handles
0.004712236407085931
handle = dlopen("dlworld.wasm
0.004690372722759328
other
security issues
0.004685605166313221
-ffunction-sections
and -fdata-sections
0.004660272675901189
control
0.004617289603798109
loop
0.004601657732665802
stub
0.004585307850602833
modifications
0.004561501530923476
success
0.004549408107158325
caching
0.004537334493834911
hacked-up
libc.py script
0.004491058606801464
compilers part
0.004452478022683555
particular
0.004432657206333826
gymnastics
0.00442502293416013
private closure
0.0044156246066800135
good isolation properties
0.004394941751102082
experiment
0.004378902111889737
trampoline
0.004372247776418045
Compile
0.004367113369876861
Things
0.004345734705786241
same table
0.004318074477114509
programs
0.00428501135617485
call_import
0.004263546180720251
ArrayBuffer
0.004229773040629787
Indirect calls
0.004200497101825809
signature
0.00416177600104046
current one
0.0041520391243306
world_type
0.0041519557069380954
stack positioning
0.004150627919638711
sync
0.004144615861477867
dlclose(handle
0.004140240086466849
puts(err
0.004127257601215601
abort
0.004126863430357695
changes
0.0041257596129908045
sharing heaps
0.0041061058826456056
developer
0.004051382122760088
puts("dlsym
0.004047903359315236
section
0.004031193548251429
load failures
0.0040240568706764795
default pattern
0.003993335566486345
thread-local storage allocation
0.003970498290170179
return
0.003928894261882064
un-met imports
0.003920095758232554
err
0.003915686031385245
imports
0.0038975877053286294
failure
0.0038831554603317147
arch/wasm32 directory
0.0038807768887814988
basic experiments
0.0038801338347490438
RTLD_NOW
0.0038683565987264845
dynamic loading mechanism
0.0038660165349909204
embedder
0.0038454403494090276
compilation / execution
0.0038429613624188647
limited" nature
0.0038371925872748456
future
0.0038323323728583613
same memory location
0.0037869974089352818
runtime memory management
0.0037846400964123435
approach
0.0037840239272659316
.s assembly file
0.0037722358626616254
foo.c
0.0037471413142361495
AST references
0.0037235600920177826
command-line
0.0037229886476109015
ground
0.003698748329628389
same address space
0.0036693897707937516
puts("World
0.0036629517729107265
archived binaries
0.0036593901687045666
non-relocatable segments
0.0036367593775451807
binary format
0.003622926060756433
int main
0.0035976733594463186
builds
0.0035801531912601006
fancy
lazy-loading
0.0035733287517463828
Miscellaneous

Dynamic linking
0.0035680754583075867
unexpected usage
0.0035677995855439982
green build
0.003563220761044594
shortcomings
0.0035588121984510184
lazy-load and lazy-compile each function
0.0035447227791191244
stdio.h>
  void world
0.0035250766756484576
dlfcn.h
0.0034913280464619425
last known good revision
0.0034887285233389255
s2wasm
0.003481806491256164
syscalls
0.00346520158020625
const char
0.003453296701529646
copy
0.0034436779456076066
dlhello.c
0.0034262917717601607
dynamic linker / loader
0.003401361276274184
Linux copy_from_user / copy_to_user functions
0.0033988683810731637
start
0.0033549527280874766
_WASMEXP_ instance
0.0033492622384257414
prototype
0.003346542672852011
exports
0.0033325863429295023
WebAssembly s-expression
0.003317239886679349
puts("dlopen
0.003315103651182818
foo.wasm
0.003307774689708936
static linking
0.0032520688310614344
WebAssembly
objects capabilities
0.003251219054684275
dlhello.wast
  s2wasm dlworld.s
0.003236194794353246
dlworld.wast
  sexpr-wasm dlhello.wast -o dlhello.wasm
  sexpr-wasm dlworld.wast
0.0031879620943134476
Pre
0.0031562344344462346
hack
0.0030709046237624884
patches
0.0030693674948695094
cross-module function pointers
0.003005821638392178
tracking dlclose
0.0028120337798411364
