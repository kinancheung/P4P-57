WebAssembly module files
0.03243936336218586
PWASM documentation
0.02258476876325675
interpreter
0.021579502422184167
following features
0.01745673317627317
exports
0.015412793508030879
./example-00-pythag
0.015396460230210844
pwasm tool
0.014504600721484462
command-line tool
0.013974454105241
WASM file
0.013881935594248898
pwasm_stack_t * const stack
0.013458757870062569
source directory
0.012284057552859572
library
0.011598930800355262
0x20
0.01153834795927396
more WASM files
0.011467982717524406
Software
0.01013481867220382
functions
0.009942907947930735
name
0.00930391451002393
PWASM Git repository
0.008826989224447766
v0 i32
0.008748514803058514
standard output
0.00868298592843023
0x03
0.0086811962071362
right triangle
0.00851287862476344
0x7c
0.008011498540145564
0x02
0.007841882568447017
own JIT
0.007557278287875417
param
0.00747079159397331
Show parameters
0.007382305368651362
result
0.007350668843951937
WebAssembly modules
0.0073197602586065795
example
0.007029601523394201
help
0.006846889171783754
imports
0.006826034275210154
pwasm.h
0.006776476518285356
memory
0.006661619544219917
# compile examples/00
0.006580103937588893
pwasm_call
0.006546902543843358
errx(EXIT_FAILURE
0.006384535913900841
exported function
0.006309046341415552
pythag.f32() module function
0.006267931457587476
f64
0.0062597107844919765
0x01
0.006171833129055324
0x0b
0.005748139928665907
0x7d
0.005674116733887461
SOFTWARE
0.005610844142014244
0x00
0.005601093992722821
application
0.00556780875417079
minify
0.005474943119218488
pwasm.c
0.0053651116663798485
mkdocs
0.005332008101933877
Prints
0.005232759968006406
static const
0.005228728295787893
uint8_t
0.005207471661533997
results
0.0051889631048106215
set
0.005121972428835595
Module Commands
0.005086741735751588
pwasm_stack_t
0.004968126548050691
custom section
0.0049612754900945615
List custom sections
0.0049434826957245786
wat
0.004919688169418099
Switch
0.004889458864896506
copies
0.004874804623559277
pwasm_env_add_mod
0.004867750286635205
type
0.004864933015638157
export "mem
0.004789735954307214
contents
0.004786759789042543
data
0.004742532040375887
env->stack
0.004720745402635639
0x0d
0.004690596383226288
pwasm virtual environment
0.0046829888983049624
hypotenuse
0.004652155248824819
Usage
0.0046411718038609625
sides
0.004630626446111446
pwasm_env_init
0.004540969992069796
WebAssembly Text (WAT) files
0.004522866477397702
lengths
0.004509666957642208
pwasm_mod_init
0.004483224485993795
parser
0.004377668638293891
f32 -> f32
0.004364303253338477
AUTHORS
0.004266511522246281
length
0.0042626785412026085
pwasm_call(env
0.004258032750615925
m0
0.00425000357298925
OR COPYRIGHT HOLDERS
0.004230842002541719
=
0.004229992472858025
User Documentation
0.004156032210982966
pythag.c
0.004122472762974531
above copyright notice
0.004056458302370719
python3
0.004018202044154114
f\n
0.004008566765785422
high-level
overview
0.0038979605747955174
DAMAGES
0.0038158866869515895
0x0e
0.003675949165064003
CLAIM
0.0036395540173864006
0x91
0.0035946085962873697
PYTHAG_WASM
0.003535332269847748
OTHER LIABILITY
0.003503759474277497
v1
0.003500979889894371
plugin
0.0034098848709996667
03-mem.wasm
0.0034062039825201564
EVENT
0.003397784639727733
LIABLE
0.003378342550750931
-Werror -pedantic -std=c11 -I. -O3 examples/00
0.0033754953631164935
CONTRACT
0.0033675484041897933
KIND
0.0033615458059703383
ACTION
0.003317955046767012
0x60
0.0032925780196356616
func
0.0032698406141291256
0x92
0.0032492100339865768
NONINFRINGEMENT
0.0032359515352273463
Parse
0.003227065136407075
EXPRESS
OR IMPLIED
0.0031961437644889615
PARTICULAR PURPOSE
0.0031889389783766094
customs
0.0031568731281897354
examples
0.0031477679252788823
couple
0.003143723373502151
test
0.0031362657183927937
software
0.003134762557541417
substantial portions
0.003111589718380301
MERCHANTABILITY
0.0030957185446248902
WARRANTY
0.0030877402226180974
docs
0.003078890752358723
Finalizes
0.0030644196753339594
Clone
0.0030570298998567553
Easy
0.0030309455912860394
tests
0.0030086558968390447
copy
0.003000125421291746
Parser
0.0029982556287090146
limitation
0.002996766567879593
cat
0.0029950480538972085
WARRANTIES
0.0029735900333840936
restriction
0.0029729025192608673
mkdocs mkdocs
0.0029716922902835482
available commands
0.0029625475360477885
amortized O(1) memory allocation
0.002954343690698195
build
0.0029494315208738048
instructions
0.0029482457557553554
TORT OR OTHERWISE
0.002922566702490239
list
0.0029173118042494623
Examples
0.002895062730007563
rights
0.0028925715100034375
information
0.002875529708658059
isolated execution environments
0.002866323343044903
./site/
> mkdocs
0.0028554035983410207
person
0.0028424347523316237
0x66
0.002837803129837868
Link
0.002832653094712024
more details
0.0028200477708011863
pip
0.0028174223040826132
pythag.f32
0.0028125667342398042
f1
0.0028059382037686664
f0
0.002788881905229824
Descriptions
0.002788208974773075
venv
0.002754743284627352
CONNECTION
0.0027470165397360117
const env
0.0027382867913794753
C standard library
0.002734640049716013
MkDocs
0.0027175603711954276
0xa0
0.002712951394816527
minimal standalone PWASM example
0.0026951066746892243
SIMD
0.002684517730104354
dependencies
0.002673283904962158
sets
0.0026663445100098744
return
0.0026620003356898738
success
0.002641992245684369
extended opcode support
0.002629083862259016
parameter count
0.0026250128359016803
charge
0.002623531550963428
pwasm_val_t stack_vals[10
0.0026166021766711256
doxygen
0.002594603330056959
mod
0.00258904045696714
pwasm}.o
0.0025874448010346617
Doxygen
0.0025822078851945327
DynASM
0.0025631474098464836
Multi-value block
0.0025568496038376777
pwasm_env_add_mod(&env
0.0025554632979971547
0x34
0.002554600447239274
Built-in interpreter
0.0025537168789863136
distribution
0.0025465329084831136
permit persons
0.0025385044049537385
pwasm_mem_ctx_t mem_ctx
0.0025325412936953234
stdio.h
0.0025216072658299214
Native" module support
0.0025183100099427725
stack->ptr[0].f64
0.0025132303452394403
annotations
0.0024836768797445903
stack->ptr[0].f32
0.002469705385484125
printf
0.0024648410704793864
0x6d
0.0024585907856188322
modern C11
0.002453598043731715
Modular architecture
0.002439852333900129
stack->ptr[1].f64
0.002418433216730945
built-in test suite
0.0023975212325510315
# clone pwasm git
0.0023947017399376354
NULL
0.0023435013928712117
const pwasm_env_cbs_t * const interp_cbs = pwasm_new_interpreter_get_cbs
0.0023425103706417342
Blob
0.002328580424124846
Copyright
0.002306877202219738
error
  pwasm_env_t env
0.0022960720593146466
pwasm
> git clone https://github.com/pablotron/pwasm ~/git/pwasm
> cd
0.002284054985287231
stack_vals
0.002259665233120597
buffer
    pwasm_buf_t buf
0.002257012496863489
EXIT_FAILURE
0.0022466460442982865
!
0.002246433635618726
virtual environment
> source ~/venv/pwasm-docs/bin/activate

# install packages
0.002201192468284599
Output
0.0021941748971671376
i32.store
0.002181675207886584
int main(void
0.0021814714754624463
errx
0.00211944697939122
buf
0.0020314427939726125
PWASM Command-Line Tool
0.0018474759864345093
