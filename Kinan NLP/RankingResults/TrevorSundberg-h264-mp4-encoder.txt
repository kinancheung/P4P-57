number
0.038860185116633084
@default
0.034736894869467516
h264-mp4-encoder
0.02088246330357292
uint8Array = encoder
0.02080030520354046
single gray frame
0.020407844640707558
Emscripten
0.020357635651038826
output video
0.019518762864341163
string
0.015360363356351128
size
0.015153114539825869
node
0.013976275456838376
multiple
0.013971414875644617
H264MP4Encoder {
    /**
     * Name
0.013193845934932922
file
0.013024571461668508
kbps
0.012645158638879902
YUV format
0.012405034607212227
WebAssembly
0.012340904963337658
input frames
0.011738839046898751
web
0.01151671765961079
width
0.011193069066099069
MP4
0.010704329330328896
HTML5 Canvas
0.010652771088706213
fastest speed
0.010530294184251525
Uint8Array
0.010454908052640651
wasm
0.010426321296501225
library
0.010328730125677362
HME
0.01022619122787146
best quality
0.010219279620200987
JavaScript
0.010110105928704063
Docker image
0.009871554476931107
outputFilename
0.009792273978731137
encoder.width
0.00976400129780569
object
0.00958189325171154
Overwrites
0.009264726163265347
quantization_parameter
0.008792555929686701
cmake
0.008686529049068293
NAL unit
0.008549920335090498
changes
0.008169067004491912
submodules
0.007929604208479976
libraries
0.007851187721916078
frame_rate
0.00783402460968145
repo
0.007648078428578155
forks
0.007430716244335549
mp4
0.007424070252850497
Works
0.007409699378190929
const
0.0072047407033003046
Waits
0.007169571519888868
bitrate
0.007019042105156852
WASM
0.00688126469374784
TypeScript
0.006865879239438722
Int8Array
0.0067145081519723385
H264MP4Encoder
0.006597741766581983
frameRate
0.006582453697872619
better compression
0.006551820643690523
Higher
0.006541039394931706
type
0.006457162375725427
Webpack
0.006453489046352779
importable modules
0.00643142209341761
loading
0.006361283145616214
base64
0.006320735802882395
Height
0.0061886044450770086
groupOfPictures
0.0061864404673164595
compiler
0.006171173112020159
quantizationParameter
0.0061477696312631485
Width
0.006076692744142876
FS.readFile(encoder.outputFilename
0.006019328377800531
Example
0.005991957413032559
Speed
0.005921248492630956
H264
0.005886929384590088
HME.createH264MP4Encoder().then(encoder
0.005881003916725278
encoder.addFrameRgba(ctx.getImageData(0
0.005854629038816256
height
0.005815630056457936
keyframe
0.005788862850515922
addFrameYuv(buffer
0.005741173684805425
reference
0.005735752235914436
GOP
0.005708028220575111
async function createH264MP4Encoder
0.0057047358009321425
MPL 1.1 license
0.0057038155640786944
* Frame rate
0.00567815689276556
await
0.00567380194403835
git submodule update
0.005659212395887035
packaging
0.005641938837036058
docker
0.005629831931484485
Simple Demo
0.00561680666903496
browser environment
0.005605154619968546
import
0.005558330657004064
canvas
0.0055532359987723375
other depdendencies
0.005548394764287392
locateFile
0.005545417493027291
Promise
0.005537319674773973
HME.createH264MP4Encoder
0.0055261099807471965
* Alpha
0.00551172700197044
Encode
0.005501331164275177
Ubuntu
0.005488609610882914
H264MP4Encoders
0.005474549735192263
convenience
0.0054487321662122935
alpha
0.005448154694690181
option
0.005446311283399131
addFrameRgba(buffer
0.005422407302255346
animation site
0.0053893022347025945
encoder.addFrameRgba(new
0.005306953732456621
Gifygram
0.005292794794171612
encoder.finalize
0.005254780200701376
temporal noise supression
0.005239147905977133
encoder.height = 100;
    encoder.initialize
0.005192155667683015
Dynamic Import / Webpack
0.005156934624089797
error
0.0051084162698506325
public domain minih264 H264 encoder
0.005039420318922538
temporalDenoise
0.00501969551519915
resources
0.005016604937112218
Status

npm
0.005013759805132404
webpack.config.js
0.005008548393397172
FS
0.005003490344856122
initialize
0.004987763132240907
parameters
0.004955582824641404
C++ code
0.0049147539887997626
encoder.delete
0.004857916796762743
build
cd
0.004721381142283525
Prints extra debug information
0.004656017355706199
delete
0.004649537884146682
debug
0.004646524122818869
output files
0.004640818931072859
