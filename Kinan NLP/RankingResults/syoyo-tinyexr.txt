EXR saving
0.027666844645164206
C++11

  int ret
0.026278880139933545
err
0.02140089363767622
const char
0.015875833041572564
int height
0.015503282945557242
Tile format
0.015370293819896652
tinyexr
0.013562696089482853
FLOAT
0.012491672356342715
load
0.012417610874794448
LoD
0.012163420012611677
-part deep image
0.011884124542141484
ret = LoadEXRImageFromFile(&exr_image
0.010006511624334502
save
0.009140292345786763
error message
0.009042271554767223
i++
0.008907635932061944
fprintf(stderr
0.008757736448967724
err = NULL
0.008403380304304504
uchar).0 = fixed rate compression
0.008258935658864947
ret
0.008182503054155563
float
0.008083175988489876
input
0.008053770549635936
miniz
0.00781644472034385
Enable ZFP compression supoort
0.0076812862673904785
miniz.h(for zlib
0.007396832243331889
channel
0.006916630468762841
RGB(A) EXR file
0.00668317208394183
FLOAT pixel type
0.006463692041675379
Thanks
0.006454447707251319
s\n
0.006445786662376944
memory
0.006380198068087824
tinyexr.h
0.0063292836145778944
API
0.006261507790836398
Examples

examples
0.006227104499088916
EXR loading
0.00607100938986653
threading
0.006066817495264877
C++11 thread
0.005944858747660175
num_exr_headers
0.0057831710351191196
New TinyEXR
0.005504411331031456
EXRVersion exr_version
0.005502836930049418
Support
0.005164434804428899
source code
0.005049406346225955
default
0.005012720650649937
EXRHeader pointers
0.0049901142508930576
outfilename
0.004965163824807542
EXR converter
examples/exr2rgbe/ EXR
0.004951859621885756
argv[1
0.004900777758303911
project
0.004885432096044116
layer info
0.0048403032209659086
big endian machine
0.004823001248906391
return -1
0.004778205706967417
Deep image
0.004743737147039654
width
0.004722650188150487
B
0.004674848567597001
header
0.004669262173481351
header.num_channels
0.004623195255283776
EXRImage exr_image
0.004577350930138478
G
0.004442117889069159
Linux
0.004256480001172741
flag
0.004171243348204611
.cc file
0.004137066525252996
frees buffer
0.004112831077535522
https://github.com/nothings/stb
0.004080848380051921
HALF
0.004016038298611696
Loading scanline image
Saving scanline image
Loading multi-part channel EXR
0.0039921683650777536
Python
0.003837157919469889
ZIPS
0.003778050479217407
Write
0.0036689394940137192
OpenEXR v2 imageMultipart
0.003649903473230567
name
0.0035751028990720427
int s_start =
0.0035545551676271275
OpenEXR spec
0.0035192310962563747
details
0.003517376425980618
stb_image[_write].h
0.003478622987695864
public domain
0.003467022250096821
ZFP
0.0034594601085600907
zfpCompressionType value
0.0034422327032637744
clause BSD
0.003390935697968705
R
0.0033834697415651193
OpenEXR (.exr) images
0.0033763671728282204
Matt Ebb
0.00332947722372465
C++11 compiler
0.003322154972101611
UINT
0.0032947163042849337
int sampleNum
0.003282558082669849
s_end < sampleNum
0.003264481582670468
deep pixel
0.0032468404868109787
FreeEXRErrorMessage(err
0.0031585757973378115
following attribute
0.0031341640266379246
library dependency
0.003106146599664659
EXRHeader exr_header
0.0030833487974143642
B44A
0.002963589954457036
floating point TIFF
0.0029570160870165205
Line order
0.0028991696384475848
v0.9.5
0.002871999622036126
Scanline and tiled format
0.002826698924139525
+
0.002819262534168549
Free images
0.002784134873527742
WebAssembly(JavaScript)Loader
0.0027810127296540397
Load images
0.002778437796330471
only(See js
0.002767709024785677
XBOX
0.0027567299510915435
exr_image.images
0.00269262233464121
submodule
0.0026796606626744296
ERR
0.0026476652143153107
Random
0.002646715180961443
PS4
0.002643664238764441
&
0.002627910440113769
Android
0.0026145785031786127
Ray Tracing
0.0024977876404648006
https://github.com/aras-p/miniexr
0.0024876648127077306
image.images
0.0024487915912610146
macOS / iOS
0.002438653877016105
deep imageLoading scanline
0.0024004542958201824
psdr-cuda
0.0023922572380126817
bits
0.002378232057015059
PowerPC
0.002373845410805973
case
0.0023628016539497037
OpenEXR(IlmImf
0.0023447048395003212
stb_image_resize.h
0.0023428599611724148
miniexr
0.002322520465243002
branch
0.002320746866663155
https://github.com/richardeakin
0.002304989569866648
PyEXR
0.002304955902392514
number
0.002290929806926585
images[2].at(0
0.0022755498582829117
https://github.com/andrewfb
0.0022706156266066647
work)SPARC
0.0022682180305405378
MacOSX
0.0022653968777573896
Richard Eakin
0.00226522593240885
Andrew Bell
0.0022634997770794698
https://github.com/ialhashim/PyEXR
The-Forge
0.002257766984390835
unsigned char**)image_ptr
0.002245315021862115
defined)Use TINYEXR_USE_OPENMP=0
0.0022387989590201473
rgbe2exr/
0.0022330211897835933
rgb
0.0022288976677448708
http://pharr.org/matt/
0.0022173672409063682
rgb[3*i+1
0.0022144962501213384
images[1][i
0.002214102355811856
OPENMP
0.0022129868042429957
miniz.c
0.0021962470128528326
Piccante
0.002193939550348069
PBR
0.002193859778643373
experimemtal support
0.0021913506697909283
rgb[3*i+0
0.002190533214994825
images[2][i
0.002185595145344091
const_cast
0.002184920587645099
images[3
0.002180831176703945
Path-space differentiable renderer
0.002166938199244425
https://github.com/mwkm
0.002164657407524309
LoadEXRMultipartImageFromFile(&images.at(0
0.0021615265884772305
converter tool
0.0021613944686328483
zfpCompressionRate
0.00216053712195456
images[0][i
0.002151675188092504
std::vector
0.0021455020330764817
EXRChannelInfo
0.0021313975174815083
Multi-platform 2D and 3D game engine
0.0021283612211546684
HDR image resizing
0.0021220807047133564
TINYEXR_USE_THREAD Enable
0.002118204097189072
https://godotengine.org/
Filament
0.0021177190582268536
Mike Wong
0.002117248019630807
extension
0.0021157985551794297
x++
0.0021157284336391913
rgb[3*i+2
0.002108822973397751
Python bindingLoader only https://pypi.org/project/pytinyexr/

Requirements

C++ compiler(C++11
0.0020997226373227623
License
0.002093070175408961
deepImage.width-1
0.0020814577402922135
list
0.0020777993777847717
header.channels
0.0020752054681148985
Multi
0.002071533149374802
Memory
0.002071254957930203
zfpCompressionPrecision
0.0020633207030336127
InitEXRHeader(&header
0.0020573797467680487
pytinyexr
0.0020518792538507346
deepimage.exr
0.0020475896689584644
Forge Cross-Platform Rendering Framework PC
0.002040598709864655
delimiter
0.0020374622222524095
header.pixel_types[i
0.002031425048716753
stb
0.0020248524840347348
strncpy(header.channels[0].name
0.002018247804468876
disable OpenMP code path
0.0020179513456399104
Cinder
0.0020106465912278926
asakusa.exr
0.002010535010334884
Rich Geldreich
0.002002296225655931
malloc(sizeof(EXRChannelInfo
0.0019999220400368583
C++03
0.0019997011138305236
ldr2exr/ LDR
0.001989000850789715
ParseEXRMultipartHeaderFromFile
0.0019882155185351
OpenGL
0.00198663468804458
header.requested_pixel_types
0.001984191664055734
x72;&#105;&#x63;&#104;&#x67;&#101;&#108;&#x39;&#57;&#x40;&#x67;&#109;&#97;&#105;&#108;&#x2e;&#99;&#x6f;&#x6d
0.001982534970555094
actual usage
0.001981373187187288
DeepViewExample
0.001977064461161023
Similar or related projects
0.0019682653649730915
zstd
0.001967469813568632
TINYEXR_USE_STB_ZLIB Use zlib
0.001963811371286913
multiple
0.001957239688560407
image.width
0.0019564261376449907
InitEXRImage(&image
0.001955905716820876
s++
0.0019520808286279552
change
0.0019512100239355498
https://github.com/uci-rendering/psdr-cuda
Studying Microfacets BSDFs https://virtualgonio.pages.xlim.fr/
Your project
0.0019480148119952088
zfpCompressionTolerance
0.0019449605309026059
https://pypi.org/project/pytinyexr/
0.001942454137432299
Current status
0.001941437392957262
deepImage.offset_table[y][deepImage.width-1
0.0019394444946010188
free(header.channels
0.001930781359076353
OpenEXR v1 imageScanline format
0.0019290980051355833
language bindings
0.0019265443840836632
header.requested_pixel_types[i
0.0019207680987347092
e.g. golang
0.0019143841012683716
free(rgb
0.0019133600575020468
advance
0.0019120756563891293
Tiled formatTile format
0.0019063756204378488
strncpy(header.channels[1].name
0.0019047432536302875
strncpy(header.channels[2].name
0.0019042942918460445
header.pixel_types
0.0018903414551324851
example/deepview
0.0018894075351221949
TINYEXR_USE_OPENMP Enable OpenMP threading support
0.001888206873331771
OpenMP
0.0018875008843554186
diffuse
0.0018816964652066822
EXRLayers
0.001881169057886983
array
0.00188072781946163
Unit tests
0.0018659820700689521
exr_header.num_channels
0.0018644285674317214
DeepImage deepImage
0.00186344193328982
channels
0.001861520530804688
LoadDeepEXR(&deepImage, input, &err);

  // access
0.0018590626698815347
Setup

Checkout zfp
0.0018547018571960468
https://github.com/syoyo/tinydngloader/tree/master/examples/fptiff2exr


examples/cube2longlat/ Cubemap
0.0018524044998378232
FreeEXRHeader(exr_headers[i
0.0018522464099271735
test/unit directory
0.001849363836370879
Deep image save/load


Tile format
0.0018467998608731545
free(exr_headers
0.0018459415750273298
free(header.pixel_types
0.0018363535758692672
STL
0.0018323278065954882
free(exr_headers[i
0.0018318139828689237
header.channels[0].name[strlen("B
0.0018279495313383862
EXRHeader **exr_headers; // list
0.001825692593100304
C interface
0.0018240751656523654
y++
0.0018231569623499682
Custom
0.001822980715133212
exr_header.requested_pixel_types[i
0.0018211027034006795
Usage

NOTE
0.001815423647705786
TINYEXR_USE_MINIZ and TINYEXR_USE_STB_ZLIB compile flags
0.0018154048092016437
sample
0.00181236236269726
Big endian
0.001811928832322113
TINYEXR_USE_PIZ Enable PIZ compression support
0.0018103160602977392
InitEXRImage(&images[i
0.0018091266015745472
header.channels[1].name[strlen("G
0.001806971452965307
header.channels[2].name[strlen("R
0.0018059285317233134
val
0.0018056798531046001
app
0.0018052906388136953
width * height * RGBA
  int width
0.0018001220717053716
portable C++
0.0017936298420436017
TINYEXR_PIXELTYPE_FLOAT
0.001791854274170193
//Or
0.0017879938998896351
deps
0.0017864243483281066
application
0.0017664512532879412
//zlib implementation
0.0017652848139959485
B44
0.0017481808248950383
TINYEXR_USE_STB_ZLIB 1
#define TINYEXR_IMPLEMENTATION
#
0.0017475378074464567
CompressionNONE
RLE
ZIP
ZIPS
PIZ
ZFP (tinyexr extension
0.0017411675952145487
OptimizationISPC
0.001739987072051827
Compile flags
0.001734644299527855
longlat
0.0017341645334472714
TODO

Contribution
0.0017304296538071596
deepImage.offset_table[y][x+1
0.0017244297389891281
printf("Loaded %d part images\n
0.0017091674041702061
Example

AppVeyor
0.0017064557732618028
FreeEXRImage(&images.at(i
0.0017044586748219829
x86
0.001701977790135894
TINYEXR_USE_MINIZ
0.0016878206235654755
own zlib-compatible API header
0.0016824992749107594
Total alerts
0.0016804079508385345
TINYEXR_PIXELTYPE_HALF
0.0016785046834739636
%s ] \n
0.0016772768699191672
Syoyo Fujita
0.0016729213953435363
printf("num parts
0.0016650730815920673
DWA
0.0016501155361306093
ISPC
0.0016378318738951112
TINYEXT_USE_ZFP
0.0016215363823453236
Raspberry Pi)
Android
iOS
macOS


RISC-V(Should work
0.0016196734879813355
small, single header-only library
0.0016114583641855804
thread loading
C++11 thread
0.0016029610545864404
!
0.001596990113348415
exr_version.multipart
0.0015697612969457657
FreeEXRHeader(&exr_header
0.0015660253739841763
Travis
0.001550511135350742
Free image data
  FreeEXRImage(&exr_image
0.0015484332450240875
tested)
Loading deep image
Saving deep image
0.0015359645282304036
Create `lib` directory
0.0015155009690520614
Tiny OpenEXR image library
0.0014012225738140403
