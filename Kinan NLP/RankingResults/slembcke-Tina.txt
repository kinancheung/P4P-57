coroutines
0.03717636493987459
single thread
0.030027577178220327
OS threads
0.028093145973498462
Tina
0.023972123812317992
Multiple queues
0.017663628967604043
fibers
0.017605559788156026
code
0.016468556421967602
ex: CPU registers
0.016126945365189473
embedded machine code
Minimal assembly footprint
0.013683119820328294
top
0.013017785214105636
generators
0.012696415662008702
own memory
0.012257084265172698
implementations
0.012087849787318968
millions
0.011913868467444627
own stack
0.011669424632309815
time
0.010570611112926124
dozen instructions
0.010391610953604406
runtime
0.010129511515771622
CPU core
0.009939981817149056
single queue
0.009855177938989835
confusing terminology
0.009796522511496947
work stealing
0.009764131321901159
dynamic allocations
0.009557279766055577
Coroutines
0.009477625720802142
yield
0.009267434662007263
POSIX contexts
0.008902023677459226
simple header only implementation
0.008731873343122112
data
0.008657563000429466
sloc

Limitations
0.00859055981230221
maximum job/fiber counts
0.008009984088088506
new ABI
0.00791470584602344
Tina

Tina
0.007833754136022558
coroutine
0.007547181924284915
Linux
0.007538189722067982
Mac
0.007471073745318217
Win64
0.0071763229974790965
aarch64
0.0071147797992419425
Windows
0.0070961736403512355
BSD
0.0069397115516952
ARM aarch32
0.006875687384868305
Unixes
0.006837465664179747
amd64
0.006736367327189642
Xbox
0.00673008829053054
example
0.006684991551543179
thousands
0.006605300770002282
hyperthreading
0.006601346025248618
queuesEx
0.006519428471028836
PS4
0.006505823046240163
continuations
0.0064846517829305955
features
0.006459593633475386
job
0.006448302363404863
long algorithm
0.006269530942161504
flow
0.006260075306973398
execution
0.006195478712336663
multiple hardware threads
0.006040814018729598
caller
0.006034664975301613
texture
0.0060171792266496445
cost
0.005952190352387436
Functions
0.00590720614495909
Queue switching
0.005899350687576471
mess
0.005844037325924226
libs
0.005836350028669629
Single lock
0.005824373044465749
simplifications
0.005816314487210291
assembler files
0.005813591337439881
difference
0.005800230385293699
simple and useful concept
0.005784147828145857
security
0.005747558066785063
Mac / iOS / Android / Switch
0.005744449191775848
scheduler
0.005728915416224645
video game
0.005682102187475459
script
0.005643252236266371
armv7
0.00563699039772792
iterators
0.00559847120117897
lot
0.005596047833468521
Raspberry Pi
0.005560569585716008
occasional changes
0.005539914150722315
cutscene
0.005522888364491459
problem
0.005514154669038565
other jobs
0.005513116865824797
Reasonable throughput
0.005467378021685721
threading
0.005456398651133048
extreme concurrency
0.00542072961889123
primary goal
0.005396999250369353
serial graphics
0.005386934184065039
RAM
0.005385495992349895
Fiber
0.005376195308814896
own guard pages
0.005366379521530995
WASM
0.005340191659252174
hardware pipeline
0.005313313396566943
inline assembly
0.005306833713039242
GCC / Clang
0.00530488257298244
common modern ABIsSystem V
0.005299962563946116
protection
0.0052923126181872926
local variables
0.005288375932938273
somewhere


Simple priority model
0.005282805352815797
structured programming
0.005247676355003125
abort
0.005245727534914468
RISCV support
0.005204151118388591
Minimal built-in stack
0.005158436534228505
Hardware Thread
0.005151054187108565
Jobs
0.005117649721803168
pthreads
0.0051146364557322745
mobile
0.005106254785467145
simple fiber based job system
0.0050815967941650955
language level
0.005062729181114578
people
0.005047479391926242
huge fan
0.0050400372791752504
Super simple API
0.005014161619221299
init time
API stability
0.004961409996521874
ideas
0.004910089052624706
Limitations
0.004907416838190758
state machines
0.004897480105066083
ex: Windows threads
0.004885329288664191
best attempt
0.004875818825585931
init
0.0048680253010176195
current desktop
0.004827992920006343
matter
0.004808603959594763
fiber
0.004775613250903801
cross platform project
0.004758119780329974
Obsolete or uncommon ABIs
0.004741248810265298
Pull requests
0.004734542934611534
lightweight uses
0.004715604987525639
console platforms
0.004568815320137899
common ABIs
0.004499477703911801
Fast assembly language implementations
0.004425329627495339
course
0.004425295188462724
fast assembly implementation
0.004412509269686232
little lightweight userspace threading primitives
0.004270196485328611
more than one bit
0.004175072977556132
https://github.com/edubart/minicoro
0.004000870074892646
ABI specific assembly code
0.003943554691108625
symmetric or asymmetric fashion
0.0038462757531913592
multiple CPUs
0.00354236675149073
teeny tiny, header
0.0033999146073423626
