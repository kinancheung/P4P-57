pio
0.0611540593856329
WebAssembly
0.04812191084822173
APP
0.03682952932997109
TinyGo
0.0335517895032411
Rust
0.02757347209033946
AssemblyScript
0.026225767398395366
# AssemblyScript
0.02436906268609157
platform
0.024171284589384702
gas
0.022954908503774626
C/C++
0.02232184120134631
Zig
0.021729592037435585
metering
0.021464518740153007
Electron
0.02124906020048152
Argon
0.02100802666435048
Photon
0.019773553004295258
attacks
0.019524987962061185
run
0.01912802001137306
Boron
0.01896015899693479
instrumentation
0.018259343215580426
C
0.017909697645295007
Resilience
0.017610306919153128
RCE, Control-flow hijacking
0.01752836794870792
Spark Core
0.017339751857004874
wasm2c
Compile produced C
0.01684057342706244
Examples
0.015930799489556766
Translate wasm
0.01570573750656698
runtime)Small performance
0.015274804495530533
Particle devices
0.014884394363381582
particle flash MyDevice ./src/

# Open serial monitor
particle serial monitor
0.014736160360705264
% slowdown
0.014651500397226144
source language
0.01456045555818148
MIT License
0.014424558311657055
Enables wasm transformations
0.01431707996255477
> npm run asbuild
0.013971438454091453
Moderate binary size
0.013726495076961848
Benefits

Language/toolchain
0.013560422320810636
thin runtime implementation
0.013500789161287764
Sandboxing / SFI (Software Fault Isolation
0.013400881220693118
Compile source code
0.013213001742905134
PATH
0.013134664228274598
approach
0.013095381793865633
ESP32
0.012951941391908436
optimized] target(s
0.012884003503774598
optimized
$ pio run
0.012853585833469643
Wasm3 engine
0.012757628421114501
APP=rust
    Finished release
0.012405975659098541
Building WASM apps
0.01216460419622894
Node.js
0.01203200995977147
wasienv
0.011408249487578327
pio run -e rpi-pico
0.01097192724932045
Raspberry Pi Pico
0.0109521966147496
particle-cli
0.010821583381150787
project
0.010535034177077528
ESP8266
0.009972810168666479
native, statically-compiled apps
0.009600301345552419
