QuickJS
0.03407713945444213
const QuickJS
0.02309477984469959
forward code
0.018193613261780973
promise
0.016546340998118175
runtime
0.015778039522677475
async function main
0.013794544008362967
context
0.013654437529793515
WebAssembly
0.0130725402958867
host functions
0.011957655413059072
test
0.01169578133445603
const result = vm.evalCode(`"Hello
0.011522127716633995
modern Javascript interpreter
0.010407861596555495
C
0.009879192328255081
library
0.009582527228642944
asynchronous functions
0.00940408182815672
vm = QuickJS.newContext
0.009138477508929694
const numberHandle = vm.newNumber(42
0.008597443845828057
example
0.008399653202053712
execution
0.008111210138306544
CPU and memory limits
0.007946827682473548
module name
0.0075577463662277605
handle
0.0071839629466721976
top-level API
0.0071727271439731375
variant
0.006989625779546312
VM
0.006838518802430981
API
0.006786977385150194
scripting environment
0.006695789938483278
QuickJS.evalCode

import
0.005926083790274657
NAME
0.005833621013337731
yarn
0.005727201578056269
npm
0.005707565206401541
runtime.executePendingJobs
0.005670982124897833
other contexts
0.005658705800672821
time
0.00564087839664479
Figmas
blogposts
0.005601665324735711
data
0.005593239943882725
EcmaScript
module loading
0.005553055189588801
project
0.0055347982386230975
Emscriptens documentation
0.005512163346729507
state
0.005498446604951983
Scope
0.005482349292849836
async action
0.005367409739096579
debug sync
0.005254111091876254
handles
0.0051816462597665

0.005163657779970769
synchronous code
0.005118514602964232
Asyncify
0.0050730854629504225
return vm.newNumber(++state
0.004860461165059346
yarn update-quickjs
0.00473641755935594
nextId
0.004547224205840094
quickjs-emscripten

Javascript/Typescript bindings
0.004450337091494991
new Map([["example.txt
0.004436297947021703
objects
0.004427965983088684
Typescript
0.004420184367882494
alternate build
0.004411098704530204
tests
0.004339594571433127
typescript source
0.0043040056693391445
imports
0.004183203281944614
runtimes
0.004118480630358142
method
0.004094945826373424
browser
0.004054349951171788
QuickJSContext instance
0.004003591349091102
vm.dispose
0.004001610831993731
NPM
0.003999087334394193
messages
0.003918420966496082
simplest way
0.003893689334163263
readFile
0.0038552959750962025
sync
0.0037830467036769106
moduleName
0.0036996256837070474
object
0.0034865625640725434
APIs
0.0033970233823196467
default
0.003342854478284224
getQuickJS
0.0033343602938038846
./c directory
0.003313320365830461
care
0.003238793483103754
fs } =
0.003212915903952958
pathHandle
0.003201796576671613
sugar
0.003200355557885035
QuickJSDeferredPromise
0.00317527993240122
import("fs
0.0031403891889554814
LowLevelJavascriptVm interface
0.0031178455768037993
modifying globals
0.0031166120218906355
DEBUG
0.003067666997089556
import("path
0.0030648592003217298
deadlocks
0.0030620607098652388
Lifetime.consume
0.0030499773566721802
bounds
0.0030360326883648735
const runtime = module.newRuntime()
const path
0.0030178025475078286
RuntimeError
0.002988667135643457
things
0.00298426015241002
underlying
QuickJS C library
0.002979391616382817
types
0.002973454226391825
disposables
0.002964978903574225
importsPath
0.002960302982106393
hosts
event loop
0.002952075525547198
set
0.002932132192567148
evalCodeAsync
0.002910469731119718
generated FFI class
0.0028724005399573486
asynchronous [host] JavaScript
0.002866382100285861
e(strong
0.002841638322821773
esm.sh/react-dom@17/server
0.0027628155613582863
context.dispose
0.002753407943148374
Toy module system
0.002750813260242489
vm.unwrapResult(vm.evalCode(`nextId
0.002742734770777565
Examples
0.0027028011723267582
release mode
0.0026955085225875332
scope.dispose
0.0026697604557635868
QuickJS WASM module
0.002636980956121871
scope
0.002598000740401164
world!</strong></div
0.0025726014572238862
null
0.002519453489168612
Hello
0.002490487457730151
_
0.0023949001271939894
e(div
0.0023668156716890407
QTS
0.0023617553647238146
Async
0.002361235739382933
ReactDOMServer
0.002315125974492919
React.createElement
0.0023075371962989416
ReactDOMServer.renderToStaticMarkup
0.0022990564510153326
null, Hello world
0.0022971579462686925
QTS_DEBUG
0.002195151622460841
plugin security
0.0021919827427635255
Set process.env
0.0021687829280110163
dependencies
0.002159718842604085
update
0.0021258892725602684
properties
0.002107271927649916
callers
0.002075630056024933
React
0.002048407671889613
further
optimization
0.0020412341654079845
node
0.0020314335950453845
changes
0.0020309615347978796
room
0.0020305097296523566
pending listeners
0.002022989075194888
ok = context.evalCode
0.0020068342630280857
vm.newObject
0.001981798949936678
await context.evalCodeAsync
0.0019787810780705507
callback
0.0019768090195663524
./dist
0.0019666133951790968
More Documentation
0.001966386162429639
modules
0.0019660881744082604
console
0.001961350281351198
context.getString(pathHandle
0.0019519413738368489
progress
0.0019496543683534598
quickjs.c,1963,JS_FreeRuntime
0.0019486364601019979
reproducibility
0.0019473989402127721
filesystem
0.0019432306441948847
quickjs
0.0019410843540644484
languages
0.0019385884887301113
vm.newFunction("readFile
0.0019378267694267664
vm.setProp(consoleHandle
0.0019345072043154157
path.join(importsPath
0.001934024249796346
Runtime
0.0019291460537890315
QuickJSWASMModule
0.0019233431794760994
future
0.0019199705798580047
guest
0.0019158680032878607
major limitations
0.0019084918840399567
Status & Roadmap

Stability
0.0019077167564395103
Promise
0.0019064981737059482
shape
0.0019055488245962723
abort(Assertion
0.0019047801631543342
promise.settled.then(vm.runtime.executePendingJobs
0.0019008146504858026
built-in
classes
0.0018996673593147458
concurrent loading
0.0018963075907675487
couple
0.001893456624952764
matrix
0.0018898193600611964
type
0.0018746669249539625
leak
0.001872521297297931
fetch
0.001870660561979685
executePendingJobs
0.001870372873843446
K
0.0018681931864947675
aggregate
0.0018666320763672697
./ts directory
0.0018661418386513454
context.unwrapResult(result).dispose
0.0018618046815015398
fakeFileSystem.get(path
0.001857901083517861
detailed traces
0.0018560830505497277
Wasm
0.001851673461852507
Related

Duktape
0.001846495976522339
C++
0.0018445278962480765
./quickjs
0.0018335832741958778
clang
0.0018332000615261153
log", logHandle)
vm.setProp(vm.global, "console
0.0018234339387740387
context.newPromise
0.0018225848747190864
promises
0.0018222467555543442
Build outputs
0.0018211323668316875
QuickJSHandle
0.0018204258441167356
production settings
0.001819848956993902
asyncify features
0.0018195450217678218
TestQuickJSWASMModule
  beforeEach(async
0.001818418407390641
Function
0.0018134169159512018
SQLite integration
0.0018118881604111319
Many methods
0.0018051137182427976
technique
0.0018025827828885672
QuickJS.newContext
0.0017996548507560781
map fuction
0.001799109959042754
async
behavior
0.0017962654902564715
lot
0.0017921381267431554
deadlock
0.0017883837576780435
Quickjs-emscripten library
0.0017862557087437371
modulePath
0.0017829515530949505
github
0.0017801857855257429
version number
0.001778291957284307
QuickJS.assertNoMemoryAllocated
0.0017764572027348785
Hacker News
0.0017746903888460187
Further work
0.0017711666815494339
Execution
0.0017694152078876616
./foo.js
0.0017684452889120323
reentrancy
0.0017681602440366834
M
0.0017644602390155578
Example file content
0.001761236707922291
common pattern
0.0017604458745520998
./build
0.0017590052655415483
context.unwrapResult(context.evalCode("1
0.0017584723656822925
actions
0.0017555692214536085
promise.resolve(vm.newString(content
0.0017545089638679747
Module loaders
0.0017486138653338339
asynchronous operation
0.0017470971348321352
Memory Management
0.0017450685257767834
newQuickJSAsyncWASMModule
0.001743779750466365
fun
0.001743417795434121
strategies
0.0017409040136685996
moduleLoader
0.001731209741925282
!
0.0017311457381547334
class TestQuickJSWASMModule
0.0017209542035880416
end
0.001719299464240667
folder
0.0017189853138060778
runtime.setMemoryLimit(1024
0.0017182436589601932
repo
0.0017176797082215827
vm = QuickJS.newContext()

  const world = vm.newString("world
0.0017144090102097238
effort
0.001709238291135723
Docker
0.0017041772798131443
./build/wrapper
yarn make-release
0.0017033973132010915
script
0.0017029791316345805
lifetime
0.0017020944231027
TODO
0.0016992075019660418
Sync
0.0016983613133395963
memory leak detection API
0.0016905139775732405
globalThis.result
0.0016899903909307218
perspective
0.001689450091596708
B. Gates
0.0016887479151103985
console.log("Result
0.0016871694302088467
lower priority
0.001685673589627627
generated header
0.0016753705740897241
promiseHandle.dispose
0.0016716555589181112
QuickJSRuntime
0.0016660195155026843
substantial overhead
0.0016632729802047736
working docker
install
0.0016630074917799301
look
0.0016621198768945417
QuickJS.newRuntime
0.001661494176768365
form
0.001661107847848159
exception
0.001660073040576336
setTimeout
0.0016566206209625185
toil
0.001653514491656397
getQuickJSSync
0.0016491855917021808
occasional breaking API changes
0.0016480804675685573
context.setProp(context.global
0.0016449572789233446
context.isArray(handle
0.001639741000278142
thinking
0.0016376993907625743
fs.readFile(pathString
0.0016374681699097603
Emscripten/Binaryens ASYNCIFY
compiler transform
0.0016362933196841353
obvious use-case
0.001634903424861627
vm.getString(resolvedHandle
0.0016339771903904883
args.map(vm.dump
0.0016323147304247024
turn
0.0016297323967269057
.dispose() methods
0.0016287772732940299
vm.getNumber(nextId
0.0016270847964449085
handy superpower
0.0016269243789290625
Lifetime.consume(fn)

Lifetime.consume
0.0016253756375657702
good practice
0.0016209072349275735
reverse order
0.0016180523215919822
QuickJS!")`)).dispose
0.001616318788008521
automatic translation
0.0016157548932718147
vm.evalCode(`(async
0.0016153033447534049
single
asynchronous call
0.001600313416150703
Note
0.0015912023321879676
runtime.newContext
0.001588387854425394
interruptCycles
0.0015882526347440768
class-based or interface-type-based marshalling
0.001586543214459738
fnHandle.dispose
0.0015846193934893292
emcc
0.0015839622904948532
sources
0.0015831539076487002
singleton engine
0.0015781523297110527
consoleHandle.dispose
0.0015765672315550955
interrupt handler
0.0015744514506275105
underlying resources
0.001566849736708874
Assert
0.001565802770689808
more testing examples
0.0015559035397461618
Limit stack size
runtime.setMaxStackSize(1024 * 320)
// Interrupt computation
0.0015486111376486187
console.log`
const logHandle = vm.newFunction("log
0.0015467176207247296
root entrypoint
0.001541608365253619
bad idea
0.0015377613679024783
context.getIterable(handle
0.001514143499498208
fnHandle
0.0015127994774004165
.consume
0.0015091124833902713
console.log(context.getProp(context.global
0.0015040420856572666
Usage

Install
0.001502568392939778
withScope block
0.0015022701890894568
+
0.0014933726084136111
EcmaScript Modules / WebAssembly files / Deno support
0.00149012963659055
QuickJS.evalCode("1
0.0014886379262715173
QuickJSContext.dispose
0.001488517637998839
release"
build variant
0.0014693408202655653
JSON.parse(readFile(data.json
0.0014606214034858906
console.log("Execution
0.0014593340213372961
runtime.setModuleLoader((moduleName
0.0014521213869501523
implementation
0.0014513178313729541
Yarn release
0.0014417065142400033
ES2020
0.001429114567401849
result.error
0.0014232448415991568
Create and manipulate values
0.001415894365355816
console.log("Success
0.0013985181133731649
result.error.dispose
0.0013936274592167433
result.value.dispose
0.0013648518964851286
shouldInterruptAfterDeadline(Date.now
0.0013282709572506593
