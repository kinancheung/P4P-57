-
0.07571924955481413
WASM
0.04731797026006023
file
0.031485436857996665
WASI apps
0.029481556369660718
full targets list
0.029111921180154765
CFLAGS
0.029110529218360312
overriding optimization flags
0.02729593392386886
zigAllow
0.02638835590100608
CI
0.026180609363250555
C translator
0.026060061064794127
compile
0.02525495405820326
Github Actions
0.02506164514487063
%
0.02327820689092173
MIT License
0.022976934090909867
platform C compiler
0.022823087039536824
libuvwasi
0.022781976311336688
native)

TODO

Big-endian target support
0.02239396398736473
libuv
0.021965260112498733
build script
0.021940314956250928
2.90GHz
0.02162563400618445
# Cross
0.02110880220804851
wasm2c
0.02107342475671821
libuv  native executable

Prerequisites

CMake
Native toolchain
0.02104215382840901
other architectures
0.020982875181552875
Native
0.02091183035177543
mandatory CMake dependency
0.020688479984932
Convert main script
0.020490270849324334
major platforms
0.01937709594702183
export CC="clang-12
0.019174407537045062
Single step
0.019031242819756863
generated wasm+js output
0.018165457801067212
x86_64-linux-gnu
0.01775070051763745
Coremark 1.0 results
0.01747595062658695
tool
0.017458619855998246
export LDFLAGS="-fuse-ld=lld"
./build.sh ./examples/coremark.wasm

# Cross
0.017407883619700068
project
0.017348247235138836
Usage examples
0.016923078031377308
-target
0.016598272619762863
WebAssembly
0.016288488206918687
./build.sh ./examples/hello.wasm
qemu-aarch64-static
0.01576969539479719
x86_64
0.015750923861329823
native executables
0.015670938831389116
approach
0.015257559641668018
