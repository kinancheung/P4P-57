number
0.03752917434061488
input
0.023405898019123253
image
0.022382268779604687
RGB
0.022223822526048393
stride
0.0218085528680592
stuff
0.020972541630398876
JPEG XR images
0.018517505913484587
//
0.018333272673304687
bytes
0.018210085254949958
Rust and JavaScript wrappers
0.018181095374131533
invalid data
0.017630878569490513
channels
0.017366592125596634
height
0.017250695084282158
Linux
0.017216906236502405
API wrapper object
0.01680024346155111
pixelInfo
0.016761954395465878
colorFormat
0.016699670311585216
HDR images
0.016050192494745784
string
0.016047229828301087
width
0.015951128203457593
jpegxr module
0.015320406373831195
bit floating point RGBA elements
0.015202788329196146
bitsPerPixel
0.014312905987772217
encoder interface
0.014173512101331472
buffer
0.014061664937177046
Microsoft
0.013386448368978027
code
0.01303490118267358
average red, green, and blue intensities
0.012266071405475294
Uint8Array
0.010621979451048966
unused macroblocks
0.010389573376685422
macOS
0.010302059560225311
time
0.0100564690607573
Windows
0.010004717557576415
following structure
0.009905232699625965
memory
0.00989384449762645
more testing
0.00970879440025607
decode method
0.009514908096629832
cropped view
0.00941864130799961
ability
0.009334632198400916
WSL
0.009183579633444024
case
0.00904383161128353
image.bytes
0.009020667618828564
Promise
0.009013793672438746
%
0.009011619521021788
encoding
0.008878034671987167
Features
0.008849041402467698
single copy
0.008836703784222046
subset
0.008797083253807837
source files
0.008656900330905276
width/height/pixel format
0.008631950257823614
factory function
0.008573955444919786
test
node wasm/test.js
{ decode
0.00857164704703902
WebAssembly modules
0.008558510452246617
progressive display
0.008513061356964296
headers
0.008512080916817136
Future plans
0.008420905549230135
blue channel
0.00837245642382264
JS
0.008343066167737338
cost
0.008333237539796045
pieces
0.008295332802193321
Vec::<u8>::with_capacity(size
0.008181546993849882
verification script
0.008112100380495379
size
0.008103767482685865
emscripten SDK
0.007982338389243233
codec
0.007685040319665802
exceptions
0.00766758349038418
npm test
0.007595997573745111
PATH
0.007572147056544341
NVIDIA game screen capture tool
0.007419630272831304
File::open(filename
0.007413037185833447
Authors
0.007375828482399277
C libjpegxr / jxrlib
0.007321053614326273
bitDepth
0.007222326365339097
Uint8Array
}

Exceptions
0.0071947455501799006
npm run-script build
0.0071884610323811075
many fine folks
0.007095063629787584
boolean,
        premultipliedAlpha
0.007092331389552767
jpegxr().then((codec) =
0.0069213454624816725
tree
0.006838333640336323
Brion Vibber <brion
0.006793144795438601
Results
0.006719761266946611
use jpegxr::{ImageDecode
0.006557368966877078
License

BSD-style license
0.006524048745930321
Uint8Array(79257600
0.006368005822713606
hasAlpha
0.006074521084586925
Quick
0.0059842116300951285
Codeplex source downloads
0.005855780672201158
info = PixelInfo::from_format(get_pixel_format
0.005708941458028899
jpegxr - Rust and JavaScript wrapper library
0.0049271827660395656
more items
0.0038376360361171316
