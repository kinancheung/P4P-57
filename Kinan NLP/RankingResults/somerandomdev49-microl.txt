_
0.05528496710283344
parser functions
0.04544221889253461
modules
0.04128413598319327
defines obj_t
0.03409593958664963
lexer.h - defines lex
0.033746756228924986
linked list
0.03367640180523406
value
0.03321421624180698
microl run example.microl
0.03204560346279685
output
0.028094682194796897
change
0.027243712057718358
write(tostring(v
0.023517159816290798
memory
0.020762085541122993
tokens
0.020289473070806214
lot
0.02020819320413738
interpreter
0.01976409057999198
nil
0.019759690742760707
kind
0.019514883011591634
FILE
0.01912306650058248
strings
0.018814027156367756
nodes
0.018569259397071512
#
0.01852432666843607
parser.h
0.018493657702524445
Source

token.h - tokens
0.01837029727592096
token_list_t
0.018261984508097802
unify object allocation functions
0.018251748624529378
add functions
0.018024538166901485
progress
0.017594200451970073
object values
0.017562152193529326
simple number
0.017273610548774677
Long-Term goals
0.017204083122751977
./stdlib/
0.015628611815030304
whole context
0.015162551097963354
output = output
0.01512188766871958
intr.h
0.01493999079476299
C
0.014706026822572212
error
0.014504317944479499
export
0.013892904071212638
Other VMs
0.013615886193499077
Compile
0.013550728215654244
del
0.01332587036346622
main file
0.013265131534580367
io.write(1
0.012930460456391275
bytecode
optimise
parse operators
0.012341639907031009
@(x
0.011852116865074194
sum
0.011670225048144757
same thing
0.011371202633040417
end

functions
0.010503577135945344
Examples
0.010387176703203084
j
0.009442469166525871
microl

A pure, minimalistic programming language
0.007776063722054822
