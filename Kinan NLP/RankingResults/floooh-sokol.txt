colors
         0.0f
0.020645187308527504
sokol_gfx.h
0.016800846349710456
#
0.016026660633853444
sokol-gfx
0.013336617364612327
uint64_t
0.01245912366465123
asynchronous data streaming
0.011598605795807237
0.5f
0.011020303684589469
vertex buffer
0.010783098222032357
Sokol headers
0.010331047390002231
-0.5f
0.010254159231825972
int num_channels
0.009600551836980619
source
0.00868403288389635
Dear ImGui starterkit
0.008591654351440471
.data = SG_RANGE(vertices
0.008537916958681504
C
0.007877923394289228
sg_pass_action pass_action
0.0077872962660524405
void frame(void
0.0075556894275155195
input
supported platforms
0.0074270965397564654
3D API context initialization
0.007289571678138479
top
0.007222310506303027
sokol_gfx.h rendering backend
0.007117549458214452
bit float samples
0.006753343957061186
Linux
0.006703776896561419
window
0.006584166313346501
STB-style
0.006575123289994346
D3D11
0.006403962164830638
Metal
0.006374488671956538
WASM
0.0063608261765742856
shader compiler
0.006264692687199642
GL3.3
0.006144566923442228
time units
0.005924942756921489
draw loop
0.005924452267842286
callback function
0.005811546099041322
3D-API wrapper
0.005734899121267589
1.0f
0.005582068388862272
GLES2/WebGL
0.005495974599660035
emscripten
0.005422265786766554
sg_begin_default_pass(&pass_action
0.005337545423811461
g > 1.0f
0.005321085042530295
start
0.005291235146350192
default params
    saudio_setup(&(saudio_desc
0.005283548980074124
double seconds
0.0052402631757899176
char* argv
0.005196077721729893
frame
0.005131167517189622
triangle
0.0050658060661578725
C99
0.005019822521164291
sokol_gfx.h"
#
0.004941805340847384
g = pass_action.colors[0].value.g
0.004938279546928301
useful details
0.004919700701082953
HTTP
0.004880193986497429
pipeline-state-objects
0.004852221874252812
GLFW
0.004807776543514847
minimal footprint
0.004726449225354049
.init_cb = init
0.004620726750512361
cur_height
0.004612338493403268
sample
0.004566077039269878
local filesystem
0.004473833107397935
sg_end_pass
0.004468439813413882
platform-specific backends
0.004462714112688197
sg_commit
0.004432659995661462
web platform
0.0044079285742371676
audio thread
0.004383780454940273
D3D11_CREATE_DEVICE_DEBUG flag
0.00438303373808356
cool stuff
0.004368937181251927
easier integration
0.004367173371357735
GLFW/glfw3.h"

int main
0.004263256364405904
shutdown
0.004158156966826559
cross-platform APIs
0.004149483453605861
sapp_desc sokol_main(int argc
0.004075782624249891
touch
0.004003526933956832
file
0.00397511464993556
return
0.003946321475983491
simple mono square-wave generator
0.0038848169998561186
web and native apps

Utility libraries
0.003859125118494109
i++
0.0038461959671989773
Android
0.003825796989657813
MacOS
0.0037717029144236215
argc/argv
0.0037701778384868125
UWP
0.003735167628600346
buffers
0.0037302545205281437
same code
0.0037246697441520684
iOS
0.003716504897164717
X11
0.003708925543970328
images
0.003706202556575229
static uint32_t count
0.003694652709551936
shaders
0.003593411456664018
sfetch_dowork
0.003577422801678556
Win32
0.003531995810596602
.value={1.0f
0.0034582447399943705
pip
0.0034263190097305355
mouse
0.003412781925544934
ALSA
0.003410557767505477
SG_ACTION_CLEAR
0.0034060408856793237
!
0.0034011403533455455
sokol_gfx
0.0033228048221883777
translation
0.003320705176848518
setup
0.003298052335494879
sokol_gl.h
0.0032920435344606105
sg_pipeline
0.003287175128002702
Tour
0.003236255106128904
GLX/WGL
0.0032167969262941252
Nuklear
0.003161057650586251
sargs_equals("type
0.0031237922873946556
CoreAudio
0.003109040821227761
sapp_width
0.0031027319666890275
.action
0.0030978995295390228
timestamp
0.0030950792528541345
blog post
0.003093163917905992
sokol_nuklear.h
0.0030848661002688942
simple, modern wrapper
0.0030689453835950186
SOKOL_IMPL
0.0030661290777219494
library
0.00306447179770338
GLES3/WebGL2
0.003060698150602425
more background info
0.0030377596973281567
Windows
0.0030344621532896166
OpenGL 1.x style immediate-mode rendering API
0.003023781245063744
WebAudio
0.0030045464822043796
WASAPI
macOS/iOS
0.0029959407662415822
canvas
0.0029885330718088018
event-based keyboard
0.0029865623018938154
executables
0.002985903444147924
GLFW_INCLUDE_NONE
0.002930459885427778
sokol_gfx.h


LearnOpenGL examples
0.0029190601618323984
WebAssembly
0.002903893110504852
0.01f
0.0028915738753933916
IDEs
0.002891552772858755
Notes
0.002868052310502444
device creation
0.0028323747939999555
sokol_debugtext.h
0.0028313983729546604
@geertarien
0.0028286494995354047
sokol_app.h
0.002828128207638849
fontstash
sokol_gfx_imgui.h
0.002826872183701323
simple text renderer
0.0028130290722066433
2D shape
0.0027824550248121112
collection
0.0027696674892668913
sg_make_pipeline(&(sg_pipeline_desc
0.0027569999650705916
retry
0.0027487355107933533
sapp_height
0.0027442486523636994
Samples
0.002725716426539649
render-passes
0.00272519707432477
debug-inspection UI
0.002723375879290409
Doom Shareware
0.0026980953648746064
glfwWindowHint(GLFW_OPENGL_PROFILE
0.002690572741516111
sg_apply_pipeline(pip
0.0026853755964171516
sg_apply_bindings(&bind
0.0026648671332596815
other projects
0.0026562748462932327
small packets
0.0026432454386493536
GLFW_OPENGL_CORE_PROFILE
0.002641963773021063
convert
0.002638023429826218
Core
0.002631533562555245
init(void
0.0026112217616931508
entry
0.0026034282744109563
vintage home computer fonts
0.002602996593023291
sg_setup(&(sg_desc
0.0026016382105477315
provided OpenAL
0.0025974363073133578
SDL Audio wrappers
0.0025953680840142923
success
0.0025906334054487177
simple clear-loop sample
0.00258977042676236
Command line tools
0.002588806764687137
count++
0.0025870567220444415
own project
0.0025837834733043875
memory allocations
0.0025727405371643378
sg_setup(&(sg_desc){0
0.0025539158279037385
failure
0.0025492798969804537
cur_width
0.002543600567727745
functions
0.002536587601452414
sg_draw(0
0.0025349098913968835
favourite C/C++
0.0025292477930348653
glfwSwapInterval(1
0.002528400737479593
Example URL
0.0025275808210130676
sapp_sgcontext
0.0025026687014449555
1<<3
0.002498145119818279
saudio_push(buf
0.002497885641459169
buffer[i
0.0024960154344697795
cleanup(void
0.0024937228389197855
important motivation
0.0024914957949608175
application entry
single window
0.0024891822400852264
glfwSwapBuffers(w
0.002488483636436264
sg_shutdown
0.002487408418516344
stm_since(start
0.002469173098484513
separate sokol.c/.m implementation file
0.002459312060871344
ways
0.002459110969004216
GL + Metal + D3D11
0.0024561599872359695
lower graphics quality
0.0024532821994161015
BUF_SIZE
0.0024467767227844906
X11 style color constants
0.002442571456041792
simple shapes
0.0024361350309844865
response->error_code
0.002435061967518899
official shader-cross-compiler solution
0.0024325768906397582
unified cmdline/URL arg parser
0.0024201624330626205
glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT
0.0024199323816203613
self-contained starterkit
0.002417859555356336
SFETCH_ERROR_FILE_NOT_FOUND
0.0024170956797649433
response->fetched_size
0.0024158202188290312
build system
0.002412526785169185
glfwMakeContextCurrent(w
0.0024120360857789423
Dealers Dungeon
0.002407179489425798
glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR
0.002392482170532057
sokol_app.h: app framework wrapper
0.0023807244170259943
glfwPollEvents
0.0023803222365309283
arg
0.002379715369255796
Build Bindings
0.002365839665404404
difference
0.0023624579357925325
Clear Sample
0.002356642640906019
.window_title
0.002347012111283756
new QOI image file format
0.002336703543572244
stream_cb(float* buffer
0.0023361581223863984
glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR
0.002334863197090196
GLFW */
    glfwInit
0.002330576698332136
basic viewer
0.0023259604822211447
const float vertices
0.0023245226202616336
URL query string
0.0023222932142513437
sokol_app.h

A minimal cross-platform application-wrapper library
0.00231815854213553
sfetch_send(&(sfetch_request_t
0.002317596719786718
debug
mode
0.002294725465333612
wrong
        switch
0.0022919302704955172
glfwTerminate
0.0022909748547573073
assert(1 == num_channels
0.002277363191674529
Zig


A Minigolf game
0.0022700476373390768
command line
0.0022507604639457465
compute
0.0022447336967906925
int cur_width, cur_height;
        glfwGetFramebufferSize(w
0.002243258350198012
SFETCH_ERROR_BUFFER_TOO_SMALL
0.002232915665473183
gears
0.002227719814020572
entire files
0.002225212761609143
grey
0.0022228495197636213
default render states
0.0022121969315977656
sfetch_setup(&(sfetch_desc_t){0
0.0021963582113417833
stm_ns(elapsed
0.0021947426775349305
sg_buffer
0.0021871237672184476
.path
0.0021687102303769024
stm_diff(end
0.002168284968021004
0].format
0.0021670123446704426
Tiny 8-bit emulators
0.0021626521882816127
stm_ms(stm_laptime(&last_time
0.0021472824048990357
kc85
0.0021403704213390157
time measurement
sokol_audio.h
0.002137337491784955
mono- or stereo-stream
0.0021358553155797324
C++
0.0021248751678821197
buf_pos
0.0021216411395651204
default pass action
0.0021206733849142055
push-model

#define
0.002111872517320932
sokol_audio.h

A minimal audio-streaming API
0.002111864965878499
stm_us(elapsed
0.0021061838213854746
cleanup
0.002098219796867669
response_callback(const sfetch_response
0.0020978123651187236
fps
0.0020973871015823606
sg_bindings
0.0020943187985409694
MAX_FILE_SIZE
0.0020903536211827048
resource bindings
0.002078427044375839
static uint8_t buffer[MAX_FILE_SIZE
0.0020484500168597205
sg_shader shd
0.0020471771828203538
sargs_setup(&(sargs_desc
0.002019992742794896
inefficient
    float buf[BUF_SIZE
0.001988444011658698
BUF_SIZE (32)
int main
0.0019845632794922912
response_callback(const sfetch_response_t* response
0.0019810986405459415
sokol_time */
stm_setup
0.001965842860753135
new (29-Jun-2022 sokol_app.h D3D11
0.001952573619042017
complete documentation
0.001937914653944653
Tiny
Emulators
0.0019113819572870088
sfetch_shutdown
0.0018855824516445189
kc85_4
0.0018767963905555836
small intermediate buffer
0.0018046553329183837
version 330\n"
            "layout(location=0
0.0018041842647804856
kc85_3
0.0017932238735716738
sokol_args.h header
0.0017827628933100614
interesting usage examples
0.0016959854962873833
frag_color;\n"
            "void main
0.00167701976116762
color = color0;\n"
            "}\n
0.0016396673152069578
KC85/2
        }
    }
    sargs_shutdown
0.0015371192394452598
