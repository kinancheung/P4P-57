Glue
0.034484040989409034
other language bindings
0.027527366669267663
T
0.02440285723143343
maps
0.021754451434374163
map
0.020338906174283734
C++
0.020198355263444687
std::string member
0.020023446127629595
<
0.019717400299554353
glue::createAnyMap
0.01869203573138768
great language
0.018508607656588082
map["myNumber"]).get<int
0.01745453180170815
classes
0.01669158047728733
exposed type
0.015754325330960096
B
0.01564107322123017
float b
0.01552697052695499
value
0.015500499717620743
#
0.01523890140853657
callbacks
0.014380368483911622
convience function
0.014234834165194658
std::endl
0.013444330895880095
std::cout
0.013024579630479144
inheritance
0.012056523818167228
glue
0.011802623127612375
API

Maps
0.011406680429330742
glue::MapValue
0.011376700266998331
glue::Value
0.011264848539713103
convenient wrapper methods
0.011249687906923921
TypeScript
0.011218035588303968
support
0.011054903344763512
values
0.011027507105475575
a
0.010842438040570314
project
0.010668390874391833
important types
0.010645450142146642
declarations
0.010431925349033484
auto f = map["myCallback"].asFunction
0.009716318481784603
number
0.00947643531483064
arguments
0.009100550448780904
cast
0.009033965134073813
@customConstructor
0.008740630621804236
example
0.008497431337967471
x
0.008074859088559023
websites
0.007679664276945674
TypeScriptToLua
0.007411662643930989
context.h
0.007315770887356569
servers
0.0073142889604552435
type-safe scripting
0.006958637081160306
simple things
0.006848520065335086
setter
0.006764075882811612
glue::createClass
0.00675376600826558
glue::DeclarationPrinter printer
0.006721488598351844
container
0.0066898769192757
public A {
  B(std::string value
0.00653341352055247
T::member
0.0064873234695034315
automatic declaration creation
0.006435273647279289
returns
0.006409548522931817
getter
0.006314203544571543
strings
0.006309339275357872
A::member
0.006276872595616128
.addMember("member
0.006274722559899962
Revisited framework
0.006270111940028683
way interactions
0.006233621610635854
.addMember("name
0.00619754821757425
short compile times
0.006197092064937595
building applications
0.006149472707847462
setExtends(map
0.00614263736217596
writing algorithms
0.0061339342823950515
map["A
0.006112217249305131
number
}

Supported bindings
0.00611187695110873
callback
0.006099087028775623
class instance
0.006056964980715889
.addConstructor
0.005976343223223444
contexts
0.005968178313208301
lambda functions
  glue::MapValue map
0.005906939078026533
exception
0.005905679045811438
Values
0.005896416882720955
CPM.cmake
0.005895515469341219
generic language binding interface
0.005826217969476605
printer.init
0.0058118265157354404
small overhead
0.005807633210852614
A{value
0.0057987272242695145
additional abstraction layer
0.005781958513223883
helper functions
0.005755394509574016
high-performance code
0.005732026754624572
classExample
0.00568340758289766
map["myMap
0.005669941770502402
map["myMap"].asMap()["inner
0.005587397865725389
result
0.005585955127733372
sol2
0.005583200397143773
return int(member.size
0.005581322202488162
std::cout << b["member"]().get<std::string
0.0055350774657073176
glue::Instance
0.005505190450510012
.addMethod("lambda
0.0054432313272321535
implicit conversions
0.005425702905983894
calls
0.005423406554137703
constructor
0.005389162764674198
setMember(arg1
0.005259599944680193
revisited::AnyFunction
0.00525148315925329
constructor(arg0: string
0.005227652182837213
PR
0.005085718620835607
valueExample
0.005047858795265304
instance creation
  glue::Context context
0.00502946378813603
method
0.005004386812703171
Wasm): EmGlue
JavaScript
0.00491988234996341
.addMethod("method
0.004910187242296509
list
0.004897830526779478
map["myString"] = value
0.004798857494887321
Duktape
0.004787136116925321
GIT_REPOSITORY https://github.com/TheLartians/Glue.git
0.004568537212460624
Actions Status
Actions Status
Actions Status
Actions Status
Actions Status
codecov

Glue

A common interface
0.003307171574682798
