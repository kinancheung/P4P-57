=
0.022191798842998295
useSpiceWorker
0.020849711893185102
import { readFileSync
0.01969035269924904
Web
0.01904113669231893
resulting library path
0.0187918230971476
src
0.018686801584118992
export tkvrsn_c
0.017718574942818623
const stream
0.017612681225444973
data
0.016968635281681046
FS
0.016557634976127302
Build cspice.wasm
0.016373165238095153
symlink
0.015290429858534531
Copy
0.01487546169527122
Jest
0.014696456594442249
string
0.014688103093190888
/spice/kernels/spk/de440s.bsp
0.01447387813073221
Create file system initialization code
0.014294266818413882
React
0.01401058979377194
public/spice
0.013829001884416638
err) return
0.013553383854132873
__ folders
0.012857680412667393
copyFile(instance
0.01279042249127689
required SPICE functions
0.01267336063450193
instance
0.012649342152440764
cspice.worker.js
0.012482239243715002
JavaScript glue code
0.012103089038500091
useState
0.012069965277589953
WebAssembly
0.011924930101966512
useEffect
0.01175317885855893
de440s.bsp
0.011266796185681606
Modify
0.011263778439632405
cSpice
0.010801581962570762
src/spice/filesystem.js

export function mountFileSystem(instance
0.010479695314684272
export default spiceWorker
0.010248972399435912
C
0.009930707409275341
str
0.00976585606323745
div>{ver
0.009757658496004278
NASA/JPL SPICE Toolkit
0.009754008274017739

0.009409771742414306
Webpack config
0.00932681908424688
Testing
0.009314211172336143
async
0.0091876698546159
|| Loading...}</div>
0.00913727586288596
instance.ccall(tkvrsn_c
0.0089315253324237
macOS
0.008462921759905678
spice/__mocks__/cspice.js
0.008395388104096905
fs.lookupPath(/kernels
0.008358373314126335
use
0.00830229726126662
Visual Studio command line
0.008301566733579834
Windows
0.008267305393060838
module.exports
0.008082303494177543
return
0.007781172444643426
FS.mkdir(/kernels
0.007691637448258836
libcspice_wasm.a
0.007671457946265227
fileSystem.write(stream
0.007670276006076575
Linux
0.007642567914905234
Production
0.007613558385565317
fileSystem.open(dest
0.007589997509686487
Development
0.0074882903139175325
w
0.007328739261540885
mountFileSystem(instance
0.007319919484651223
Install Emscripten
0.007230635722239491
build_wasm.sh
0.007108031122669245
data.length
0.007018395232149409
wrapper
0.006892569934561192
createWorker
0.006784254534860038
Node.js
0.006783736232749268
catch
0.006687835030867917
.wasm/.js files
0.006669449767446781
fileSystem.close(stream
0.006621508199378005
cross-platform compatibility
0.0065384752555817365
static library
0.0065313859641823995
webpackFinal
0.00652082241587079
fs.mount(instance
0.006503746362423029
fs.createLazyFile(/kernels
0.006494802440977845
IDBFS
0.006461575418913084
message
0.0064463675842477836
function copyFile(fileSystem
0.006432198454729612
tkvrsn_c(TOOLKIT).then(setVer).catch
0.0062517070329862305
functional components
0.006161676479855167
setVer(message
0.0061057922954779464
src/hooks/useSpiceWorker.js

import createWorker
0.00609314187411383
ver, setVer
0.006004611106825155
workers/__mocks__/spice.worker.js
0.006002685612427543
moduleNameMapper
0.0058744110787017755
app maintenance
0.005855905139685421
persistent source
    fs.syncfs
0.005846698566369086
globalObject
0.005845781949155408
SpiceWorker
0.005782033728077868
spice/__mocks__/$1
0.005757982018359503
Web Worker and Node.js (mocked) code
0.005745672698402126
Storybook
0.005734841403360162
^workerize-loader!(.*)/workers/
0.005712321308806022
^.*/spice/
0.005706667152129866
workerize-loader!../workers/spice.worker
0.005628418096281184
required kernel files
0.00560461539229189
jest
0.0055835391817176585
cd
0.00552396254307249
workers/__mocks__/$2
0.00551285548895448
Install workerize-loader


Add Jest config moduleNameMapper option
0.005496098621692369
itrf93.tf
0.00546378584447956
null
0.005242421594636698
unofficial copy
0.005229653687314486
missing kernels
0.0051726117959140765
repository_root>\bin\cspice.dll
<repository_root>\lib\cspice_dll.lib
<repository_root>\lib\cspice_dll.exp

Static Library
0.004815593611030388
Dynamic-Link Library
0.004476528247537659
