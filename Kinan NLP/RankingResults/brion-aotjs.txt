pointer
0.027985805250706087
bit value
0.02046641657941668
scope objects
0.020391008010830478
JS objects
0.01909166551441736
top 13 bits
0.018586547524335018
stack trace
0.018233596653025465
tagged
pointers
0.0160748027426874
type tag
0.01407690394339734
JS runtime
0.014057311002379003
NaN bits
0.013650787192533837
actual value
0.013122852317939611
doubles
0.012500410553798526
runtime
0.012074222537224085
C++
0.011709505892031768
planned native Wasm GC
0.010737187908905954
use case
0.010509495953794232
sandboxingJS code
0.009951173661171972
WebAssembly
0.009283746179464595
object
0.009110360779621924
SpiderMonkey
0.009058851121502818
Val cells
0.008816225916317592
>
0.008782861450044055
function
call
0.008538739171143641
JavaScript
0.008511933124772494
Next steps
0.00824534100658862
exceptions
0.00820692733287481
Scope
0.008011654908771265
NaN space
0.0077640087046137365
host
0.007534901296679521
different format
0.007401054499457717
non-reachable objects
0.007261889241690161
JSC
0.00713024906045665
types
0.007026793725311968
operator overloads
0.006732372653452621
own naive mark-and-sweep GC
0.00669541416521346
out
0.0066826362525436766
obj struct
0.006569712579566356
exception
0.006475625516016582
compilation
0.006464627783714502
-
0.0062644871587486444
support
0.006250354861722588
closures
0.006008477740491632
time
0.005889500386323514
Cell references
0.005630900430577568
cell
0.005557490723068234
correct behavior
0.005455234034838918
Captured variables
0.0054165162852488095
starters


ability
0.005354880408271865
variable bindings
0.0053394243224249545
list
0.005310755427257801
payload
0.005199651455422758
call frame stack
0.005184845944429837
pointers
(C++ references
0.005176849249746426
future
0.005172623935480599
super-long loops
0.005169633459602967
hard memory limit
0.005118534303864655
current PoC
0.005111007133137121
double values
0.005085783198359435
things
0.005060975894028916
Local instances
0.005012387655337782
way
0.004960798424412283
boxed floating-point
0.004909761690642374
few
extra words
0.0048777330390988045
double-precision floating point
numbers
0.004858610978672566
larger ints
0.004705242128814166
constants
0.004676667595611631
functions
0.00465708069145339
check
0.004505885697970284
binary size
0.004487897458018507
goals
0.00435302992382597
heap
0.00428483253160046
single 64-bit word
0.004264217746373689
symbol
0.004042619952465873
string
0.003860870151156905
arrays
0.003818511759825928
dependencies
0.003734808197599075
parser
0.003721286357064356
host

Non
0.0037011108251605532
arithmetic
add arrays
0.0036325511916795008
access
0.003620013566323868
vals
0.0035578860721548426
Capture
0.003526226323687906
polymorphic stuff
0.0035187225051464877
number
0.0035005142645880218
property keys
0.0034756656473060054
ScopeRetVal
0.0034688028318767498
double)
number
0.0034528534083351574
names
0.0034232455366702075
overlapping subsets
0.0034023096295664914
properties
0.00339987875500348
wasm32
0.00338428681052738
methods
0.0033778382820089732
worry
0.0033718528963246463
ScopeRet
0.0033708596756195017
implement console
0.0033639978376834995
error
0.003354702554599868
optimized subset
0.0033373008033783774
roots
0.003311300540953183
Goals
0.00330920033115646
Exceptions
0.003300821019197574
plenty
0.0032967094154095866
vector
0.003288054931152906
captured var
0.0032432937514696694
capture state
0.0032379045294434294
end
0.003224589237818295
Values
0.0032232972123854894
cleanup
0.003222071760406633
several classes
0.003180135717319181
outside scopeget
0.0031779278424636263
nan
0.0031699359802231106
native testing
0.00316922214686681
PropIndex
0.0031665331998954583
sure hash map behaves
0.0031603660908815913
bias
0.003159086495683832
arg
0.003152313289165772
local args
0.0031221224800610384
meantime
0.0031189167371483357
allocation
0.0031113658846548685
double conversions
0.0031055929360351247
features
0.003092863488995619
browser
0.003087397104677771
lower scopeallocate
0.0030871448675744814
lots
0.003081800633582009
NaNs
0.003080982210159796
Many VMs
0.003072777702589812
Big engines
0.003071915794356595
various conditions
0.003062204980004995
AArch64
0.003038533001460145
new Function("source
0.0030319949338850983
scopes
0.00302348503346754
locals
0.0030131143518916984
least basic log
0.0030113346985465605
concept
0.0030103770377165307
marking phase
0.002992217219783288
Things
0.002991761166922561
process
0.0029888839596492103
int32_t
0.0029841949252168566
exceptions
throw exceptions
0.002974163653608055
stack push/pop


names
0.0029713275500672233
memory or execution timeWebAssembly sandbox
0.0029703540889847364
captures
0.0029673460112017856
set
0.0029619040724642807
Naive implementation
0.0029551225264965314
compiler
0.0029521585197985417
early proof
0.002951017883793579
actual local variables
0.0029458929355221696
downside
0.0029441538741111157
local array
scope chain
0.0029349067950373035
SpiderMonkeys interpreter mode
ChakraCores interpreter mode
V8s interpreter mode
0.0029302956008359165
information
0.0028942544105345414
own GC-managed lifetime
0.0028942392926334607
place
0.0028925559200304366
delete operation
0.0028915970660205906
Upside
0.0028868635716087685
RetVal
0.002885515362130064
terms
0.00287597047302422
virtual
destructor
0.002873519524805162
function definition
referencing higher scopes?copy
0.002848283720070657
FORCE_GC
0.002846078407678779
argument
0.0028345641560374242
application extensions
0.002825284926437464
Val <-> int
0.0028218865721016707
JS/node app
0.002816908312373379
boolean (special values
0.0028149645164935112
GCd Cells
0.002799821937824572
Note
0.0027942674003509187
current x86-64 code
0.002790201088154186
int31ref type
0.002789569165113016
thought experiment
0.00278175741316188
Local/Retained vars
0.0027582291767024787
garbage-collecting JS-like runtime
0.0027262677069213904
scope.escape(foo
0.0027256352403267027
WebAssembly-based execution


memory safety
0.0027253214449064903
less difference
0.0027170942231304483
Smaller interpreters
0.0027161466380112094
man
0.0027129290973803085
win
0.0027080459356462324
allocator
0.0027035007518832134
stage
0.002702374798821948
extra clock cycle
0.0026965843267070036
ORing
0.0026931808038171356
duktape
jerryscript

Smaller compilers
0.002681782114595185
sslloowweerr
0.0026800757986251505
0x0001
0.002645684402517879
variable-type values
0.002579810659064207
parsed AST
0.0025791704351877166
biggest differences
0.0025594885369380513
Safe, small, moderate-performance JS runtime
0.002547742197564578
natural operations
0.002523850263187522
V8s Local/Handle and EscapableHandleScope stuff
0.002523324172582609
safety and download size
0.0024707427933255855
allocating extra instances
0.0024621686088316212
small code size
better performance
0.00244396481853856
tiny test programs
0.0024316909663689595
single 32-to-64 extend opcode
0.0024309017204979075
known singleton values
0.002417781035208764
try block
0.0024127917007628675
most common integers
0.002404221759013156
int32
0.00238994903124856
traditional Boehm libgc
0.002336215425513891
native Wasm
garbage collection proposal
0.002306068629653491
wasm/js
0.002289022131690764
fast-path and slow-path versions
0.002261356145825346
aotjs
0.002237753806549116
needs
0.0020522338546290833
