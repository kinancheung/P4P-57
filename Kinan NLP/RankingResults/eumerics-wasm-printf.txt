%
0.0788980225039815
binary output
0.04367176508370374
length
0.022225541497567093
d
0.021278045117030756
JavaScript console window
0.021053194988450524
+
0.019226620260462644
WebAssembly modules
0.017740795500142167
JavaScript code
0.017460925071464784
newline
0.01738850794463848
t
conversion specifiers
0.015359099741534593
width and precision specifiers
0.015298240090672047
u
0.015000625475948617
browser
0.014103475263887713
e
0.013901599643860214
C printf function
0.01371721492098495
floating point numbers
0.013548022343494134
C code
0.01345905646725257
KB
0.01296216840665272
.
0.012127718531839382
dynamic memory allocations
0.011559292136523267
void test
0.011545688847352619
printf_flush
0.011329463242426408
printf_env.flush
0.011282984750650728
03d\n
0.011030676281473528
=
0.010696974594153424
pfs
0.010670067962995187
printf("%c
0.0105161752613095
buffer
printf_env.peek
0.01027422197019444
complete printf specification
0.00934706219310143
printf("%4.3d
0.009343949778158884
exceptions
0.009337502639515919
Implements
0.009321948910450116
long double (%L
0.009017806659628345
field width
0.008775041605146007
handling
0.008745201874718106
variable arguments
0.008734522826152795
formatting
0.008677103291370957
conversions
0.008544028728422044
C11 standard
0.00851161778930495
NOTE
0.008439358837100742
stddef.h
0.008391646037392078
g
0.0083739049824724
wasi
0.008348392360574932
z
0.008325262610873683
I32
0.00829477919263063
x
0.008275945104110097
WebAssembly.instantiate
0.008257668845686357
node.js
0.00823639648537798
0xc0
0.00812046768442725
p
0.008001340664634036
sdk/bin/clang
0.0079944446907404
0x61
0.0079897950037723
integer
0.007883538028662714
int printf(char const
0.007870533081230514
Ls\n
0.007862998931958333
example
0.007806478807789306
F, %E
0.007784655992139046
declaration
0.007782812473264013
unicode_string
0.0077282789960982055
#
0.007705303390495058
toolchain
0.00765645056552817
pfs.readFile(example.wasm
0.007620977369293194
linking and reloc custom sections
0.007539702866659578
needed imports
0.007487712563292472
async
0.007468779503630927
JavaScript run time environment
0.007441940386481147
multi-byte characters
0.007371128668117058
provided source wasm_printf.c
0.007324474454425406
provided JavaScript wasm-printf.min.js
0.007237914922231798
lc
0.00721681270755805
\n character
0.007207007279616226
printf format string
0.00717048462827511
printf_init
0.0071491088700093835
0x0
0.0071198731067719685
I64x\n
0.00702196859699589
Compile
0.00699842107519626
printf_env
0.006939636254792868
h
0.006923674442003345
printing
0.006922500533427975
current scope
0.006892059796176591
standalone implementation
0.006847683631065301
c
0.006775237147452047
Ls

Usage

Usage
0.006761881900017679
flags
0.006686691333289944
compiler> <options
0.006567011192899638
consequence
0.0065567966342686985
provided printf.a.wasm module
0.006550975217688991
pointers
0.006521598877476711
line termination
0.0064661045996662475
printf_init(example.instance.exports.memory
0.00644410051332627
console
// printf_env
0.006321369516477531
C code
printf("no-newline-string-stream
0.0062566771149502095
read-only view
0.006024016071444567
wasm-printf

A lightweight
0.005353255261445413
