f64
0.06431649656868586
index.html
0.047147555268402586
Rust compiler
0.04620970677998794
example
0.042377732793158526
return
0.0380630864275165
fn calc_fib
0.03182922896674208
mut
0.022939380749162977
return x
0.022831167237383296
following types
0.02178143473992693
+
0.020516412375882132
associate
0.020474411870513565
h
0.019781680734617075
print_f64
0.017704316039994554
comments
0.017685124563455376
Syntax
0.017544139537961783
usage
0.017320139449116534
index.wasm
0.017087321587269902
set
0.017043321109421552
C++
0.016912805450890883
template
0.016886700328104014
b
0.016844955000343664
.\rust
0.016717695840642748
SyntaxParser.cpp
0.016657921801620353
frags
0.016491756596282554
editing
0.01641392472423988
Tokenizing
0.016338259993643148
field
0.015937371947385166
print_i32
0.015754838630490958
import external symbols
0.015528800152192478
WASM
0.015337278589605654
way
0.01460462041282345
terms
0.014572844446492155
Compiler
0.014367282862504435
additional json file
0.014150681040931826
input
0.014006681549592974
complete subset
0.013974686539934725
loop
0.01356068908544452
implemented syntax
0.013401906144270484
i32" ],
        "return
0.013073692499057833
0f64
0.012965821406942796
training project
0.012283467396093357
ultra small subset
0.012095377701444768
basic operations
0.012077647991623648
main.json
0.011661648988939111
i32
0.011482536083286688
imports
0.010898460682850303
print_f64(int(0f64
0.010325091383117296
print_i32(calc_fib
0.009997739773744489
script
0.009891149399088719
console.log(arg0
0.009792679383326402
html>
  <body
0.009441581022829916
print_f64"
    },
    {
      "module
0.009138230274272269
importObject).then(obj
0.00883173648736807
obj.instance.exports.exported_func
0.008728369150679807
repository
0.00822179942233995
MIT license
0.007978613016359172
