coroutine
0.0747804796368976
co
0.02522612691714736
yield
0.016404748806547676
void
0.015721134106674337
few cycles
0.013692302860936987
Added support
0.012452515131644474
values
0.011831581310993475
mco_result
0.011826591789777388
data
0.011775292150052574
asymmetric coroutines
0.011752395203691422
context
0.011515869500984958
mco_desc structure
0.010477193138934688
execution
0.010182849788933468
proper error codes
0.009703586051052926
Default
0.009326726812806805
WebAssembly
0.009274397150854029
res
0.009228505763454112
size_t
0.009143964173603582
mco_resume
0.009038910757432872
m
0.008617918597685643
library assembly implementation
0.008457154469909639
assembly
0.008420565714618126
storage system
0.008151692181986178
desc` pointer
0.008128450131853118
C use
0.007745700614265913
desc.user_data = NULL
0.007454799874169409
C.
The API
0.007438300161040707
Customizable stack size
0.007379393681823168
functions
0.007107832432786768
assert(res
0.006950745411611615
default
0.006931007037468474
cycles
x86_64 Windows fibers
0.006389266998446776
following
0.006363665745905471
WebAssembly Binaryen
0.006234163007323731
x86_64 Linux assembly 9 cycles
0.006129035821062532
mco_yield
0.005932784543508914
multithread applications
0.005607124041020707
description
0.005505824870958012
Retrieve max value
0.005499020486654887
mco_create
0.005482664044278237
Lua coroutines
0.005482441951892946
MCO_USE_ASM               - Force use
0.0053222028122634395
Stack space
0.0053144190243496255
resume
0.005282213988403042
mco_push(co
0.0052640932646585035
open source work
0.00522485418369045
mco_resume(co
0.005190612503784044
ASan
0.005166749606992162
AddressSanitizer
0.005137743797596913
Jan-2021: Some API changes
0.005038694004881223
TSan
0.005038285575974128
RISC-V rv64/rv32
0.005021872028949464
misuse
0.004967410712500586
unsigned long max
0.004952609312322268
MCO_SUSPENDED
0.004882718533324838
Coroutine API design
0.004860654566749704
ThreadSanitizer
0.004794197151378327
if(res
0.0047317093250036305
Fibonacci numbers
0.004565501084098127
ucontext
0.004512602763937806
Coroutine storage size
0.00448475272393466
int main
0.00446199105335645
issues
0.00432321495730294
case
0.004319951211689063
func)(mco_coro
0.004298181887108024
Mac OS X
0.004219063019484949
Minicoro
0.004179418835251084
mind
0.0041748270495359915
MCO_SUCCESS
0.004110756490066108
sizeof(max
0.004097048672638668
mco_destroy(co
0.0040825016960756135
care
0.004060392839773558
Raspberry Pi ARM
0.004021491826440108
mco_push
0.003994227859242113
Public Domain
0.00389408959213817
sizeof(m
0.003844063495083464
MCO_DEBUG                 - Enable debug mode
0.003807461433675511
compiler
0.0037968607677831487
program
0.0037812265528582535
Aug-2021: Fix stack
0.0037595691303486988
point
0.0037555569826108505
Emscripten flag
0.0037535042500356783
suspended state
0.0037492456839819718
assert(mco_status(co
0.003742932923977321
thread
0.00373402573768982
first time
0.00370103246999992
MIT No Attribution license
0.0036990770837567015
mco_pop(co
0.003630925766241637
MCO_MALLOC                - Default allocation function
0.00361056936953519
minicoro
0.003525816180556307
MCO_MIN_STACK_SIZE        - Minimum stack size
0.0035223988338716804
mco_get_user_data
0.0035189956741579183
minicoro.h
0.003445383587406846
body function
0.003434650764550364
mco_coro object
0.003426378510924261
APIs
0.0034161737040812783
C++ exceptions
0.003401139741072562
destructors
0.003302790535775972
user_data or allocation functions
0.0032561049931324896
.c file
0.003178312956174512
Valgrind
0.003036580643387266
fibers
0.002906782223450987
mco_yield(mco_coro
0.0028898247233913113
Support
0.0028297412987257744
MCO_FREE
0.002821808096647384
MCO_MALLOC
0.0027825091795795733
n
0.002757212378306168
Platforms
0.0027439988799149327
Works
0.002742923731431422
most C89 compilers
0.0027391068089907865
WebBrowser
0.0027196390582554545
pop
0.0026971827854640204
Most platforms
0.002696238518811753
push
0.0026863054438229046
Lightweight
0.0026643327936918962
Library
0.002663312774682608
NDEBUG
0.002638185478038027
MCO_NO_DEBUG
0.002623413693505032
Jan-2022
0.002616977840152232
Jan-2021
0.0026166364707328298
DOSBox
0.0025894319530759607
MCO_ZERO_MEMORY           - Zero memory
0.0025881127572717345
Yield
0.002585806870665361
crash
0.0025807295858862826
mco_get_user_data(mco_coro
0.0025753907823079557
MS-DOS Emulator
0.002551812306631813
Windows 32 bits
0.002550897518962256
Clang
0.0025005343929297933
threads
0.002489667868556805
mco_create(&co
0.002485373363195045
2.20GHz
0.0024810112455442967
accessing memory errors
0.0024555482480588726
stdout
0.0024358686532536264
quick reference
0.0024329148698704604
LIFO
0.0024319968497823656
Cross platform
0.002425314687864627
Initialize Uninitialize
0.0024226226856924656
@icculus
0.00242066571278831
printf("%s
0.002408728761652645
external dependencies
0.002407498077912805
valgrind
0.00240439460602109
Minimal
0.002403682659547595
CPU
0.0024018309502214646
First release
0.0023980742174864807
Readable sources
0.0023968968940905324
%
0.0023944442753815395
Benchmarks
0.002394143560764568
list
0.002392563653962725
v0.1.0
0.00239239303915619
KB
0.0023749142632248387
garbage collected environments
0.002374790717887562
Last In, First Out) style buffer
0.0023689911425387664
Fix compilation
0.0023687911435757636
false warnings
0.0023673064785538996
sole argument
0.002361306573888844
ASYNCIFY=1
0.0023540238317256838
different methods
0.002346392587151234
Donation
0.0023460452704972185
mco_init(mco_coro
0.002333644800745822
other parts
0.002323445294027539
Jun-2022
0.002314821504041705
mco_desc.coro_size
0.002308080891548028
v0.1.1
0.0023063568890938357
Structure
0.002298254568245689
usage
0.002283333760306128
Intel Core i7-8750H CPU
0.002280538100265975
MCO_USE_VALGRIND          - Define
0.0022782563413411825
Icculus Microgrant
0.002263188310848595
mco_init
0.0022581432904950427
unsupported sanitizers
0.002255298916760242
Supports custom allocators
0.0022531014367530586
Storage system
0.0022523173163410603
WASI SDK
0.0022486296788698156
CPU Arch OS Method Context switch
0.002244097612815527
document
0.002238720427135941
user
0.0022348508113517645
amount
0.002212289537962088
mco_get_storage_size(mco_coro
0.0022099895670548266
status
0.0022092005417264694
MCO_USE_FIBERS
0.0022077148008558325
benchmarks
0.00220678746478473
user_data
0.0022034860164475223
donation
0.0022005062055770047
improvements
0.002199455032207423
return
0.0021964138177522673
single-file library
0.0021952888872988916
mco_get_bytes_stored(mco_coro
0.0021934961094324705
MCO_NO_MULTITHREAD        - Disable multithread usage
0.0021878282092436026
independent "green" thread
0.002183557365853193
mco_desc_init(coro_entry
0.0021766356182065442
stack_size
0.0021755370305408346
Push
0.0021572373387210237
Multithread
0.0021529115852632393
other header
0.002152123329196066
Mike Pall
0.002148071810894606
Platform Assembly Method Fallback Method
Android ARM/ARM64 N/A
iOS ARM/ARM64 N/A
Windows x86_64 Windows fibers
Linux x86_64/i686 ucontext
Mac OS X x86_64/ARM/ARM64
0.0021441537301862164
handle
0.0021180623203325023
behavior
0.0021128008535860436
stack overflow and iOS support
0.0021072923909691383
Starts
0.002104635570943638
complete example
0.0020921083929118086
persistent value
0.002090885510244348
result
0.0020812310226132275
nested function calls
0.0020701172800577485
Web browser
0.0020631987021498942
suggestion
0.0020613191309789463
mco_desc_init
0.0020474566318953447
fallback
0.002030871460684134
#
0.002020853050383086
mco_result_description(res
0.0020195858610148098
char* message
0.0020119181895051456
Configure `desc` fields
0.002008565133433675
malloc_cb)(size_t size
0.002004285500550123
call mco_uninit
0.002000668808433864
Usage
0.0019949374628451307
mco_pop
0.0019868823432872915
project
0.001970028793475062
const char
0.001966502711206607
available bytes
0.0019614958589985057
encouragement
0.0019555639438393734
mco_yield(co
0.0019382389220166973
1\n
0.0019324481486207063
mco_running(void
0.0019270796771799306
mco_desc;

/* Coroutine functions
0.0019262899754829833
while(1
0.0019254893601264181
Custom allocation interface
0.0019188187040188216
testing
0.001918621364928891
MCO_DEAD
0.0019184635695464968
free_cb)(void* ptr
0.0018861626032982367
Nelua programming language
0.0018806431036148005
mco_init_desc
0.0018749308547671472
ret
0.0018339599712167273
Patron

License

Your choice
0.0018057013123363168
printf("fib
0.0016605217228828513
