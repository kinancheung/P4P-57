Barebone function
0.07474755523062034
stack frame
0.03748937719543986
_
0.03638700768758827
const struct Dispatch *dispatch
0.03380002502266096
barebone
0.03303449368914936
#
0.02999742209083087
ip
0.028089661842737288
%rbx
0.021801426511138356
Explicit register assignment
0.020697578086911528
named registers
0.01975120950566773
parameters
0.018475379228039622
interpreter state
0.018458902248126123
void
0.018394970111317355
Inst
0.016866363763393146
uint32_t b
0.01609326602928772
hand-crafted
assembly
0.01539982374018698
interpretor
0.015327139456497097
instruction encoding
0.01471982335825154
ac
0.014443557534678384
args
struct Inst
0.013555519292866138
Dispatch
0.013512081231101704
accessed fields
0.01198558187635906
uintptr_t
0.011277480352428508
attribute__((barebone(hwreg="r15,rbx,rax
0.009660358995950673
Googles V8
0.009337782085142356
LuaJIT
0.009164087080373794
sample
0.008947351397590666
Clang
0.00890094554091806
Mike Pall
0.008810961374845125
advantages
0.008759668673759028
approach
0.008628862886315994
spills
0.008595743435046278
Apples JavaScriptCore
0.0085877850909006
Lua
0.008583980915597672
number
0.008578696362591448
instruction decoding and JMP opcode handler
0.00853235042415742
prime examples
0.008497564425971459
OpHandler
0.008471116104664174
epilogue
0.008413931107413035
InstNext(dispatch
0.008377710769320753
op(code
0.008328740053306381
need
0.00827738193382423
-O0 compilation mode
0.008252899545198596
Barebone attribute
0.00821408201171367
local variables
0.008143123673163718
document
0.008126225459567302
outgoing arguments
0.008076418654603222
prologue
0.00805619083206404
project
0.008026883877237817
scratch space
0.008002940228618544
local_area_size=N keyword argument
0.00789217151264997
rcx
0.007818122340696433
Restrictions
0.007770131384752556
rdx
0.007753822423052649
int16_t)ac
0.007719637880505523
interpreted
language
0.007697080795408452
Local area
0.007659504640170462
Example usage
0.007627603388175378
callee-saved registers
0.007601535273707334
following example
0.007555997332308353
Other creative hacks
0.007373042086258864
Compiler output
0.007367345680347619
topmost N bytes
0.007363324588314902
rbx,%rax,4
0.007349802561605613
small  i.e. each opcode handler
0.007287256445367348
known offset
0.007282433967067
high-performance interpreters
0.007203212907587953
tail-call position
0.007155370646403808
bb.0
0.00712805792995679
dispatch->h[ip->op](dispatch
0.007116003501936291
uint32_t op
0.007074695659758704
-O3
0.007065185650895501
void Fn(void *p1
0.0070057418381849835
decent job
0.006921130560983686
Instruction
0.006598754056952915
optimizer
0.006544671771095383
separate
function
0.006524450679035557
return address
0.006513358097984496
0x90
0.00644479658378386
goto
0.006442351574677338
InstNext
0.006391685102525068
efficiency
0.006302238933746515
OpJmp
0.0057900541789688365
