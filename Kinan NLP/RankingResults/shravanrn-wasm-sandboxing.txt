CMake
0.026478179434854726
binary file test.wasm
0.018283191364508983
wasm-interp
0.01807839838608612
cmake
0.016370517621183772
tools
0.01599514094808215
WebAssembly binary format
0.014340236483644164
Address Sanitizer
0.014028779987497917
spec interpreter
0.013478205342415077
shared library
0.013327816905071137
Visual Studio
0.01319709901179365
wabt project root
0.01308676141134639
new directory
0.013044135893740136
wasm2wat
0.012578510571917494
wat2wasm
0.01226191189808804
build type
0.012226228799698136
tests
0.011822747114994026
# meaning
0.011617392438884811
test.wasm
0.011224991968391235
other configurations
0.011175991433223214
WebAssembly Binary Toolkit
0.011067975903603776
clang-debug
0.010657489626452566
wasm runtime
0.010458717661997458
WebAssembly text format
0.010347989375392528
example
0.010338638605099216
wasm2c tool
0.00998692196547249
original WABT toolkit
0.00978344432818661
clang/Debug/
0.009411124984518226
changes
0.009161280302919551
gcc
0.00891631501872229
exported functions
0.008566543753215765
macOS
0.008466258008714991
gcc-i686
0.008371725973816318
DEBUG
0.00834724651702169
files
0.00833637044756827
Clang
compiler
0.00822387651456992
uninitialized memory
0.008037512885478004
C Code
0.007946222388119487
dir]
> cmake
0.007814800483025583
print information
0.007721724349091947
additional help
0.007703085728460546
Modifications
0.007661485160679853
debug
0.007523022319186815
cd
0.007469542505116721
CC=gcc scripts
0.007458642890150809
build
artifacts
0.007274160072864354
config] parameter
0.007145147041399059
LLVM sanitizers
0.007056577465695843
default
0.006971526053272873
WASM module
0.006955393337837101
test suite
0.006945192876415094
verbose output
0.006745168305398161
re2c
0.006705668836822452
target library
0.006403022522500339
following demos
0.0063016525028624535
sanitizer name
0.0061973192344395075
compilers
0.005828622737682084
exports
0.005668583968928505
online demo
0.005585960565723539
spec-test.json
0.005447745314627735
instructions
0.005416282080337847
Building
0.005399643084909208
configuration
0.005332817783635556
spec-test.0.wasm
0.005302757034361466
Modules
0.005215952391326455
inverse
0.005191546227732774
Linux
0.0051571204112459395
Online Demos
0.005135995323244844
Travis bots
0.005063506482643856
compliance
0.005044943834055433
uses
0.005005529023458715
Wabt
0.004952139329649115
header
0.004930779042847806
suite
0.004850987554271616
RELEASE
0.004789568578621975
round-trips
0.004762427441777049
Binaryen
0.004745189840060679
combination
0.004718391254735759
spec-test.1.wasm
0.00471794091495303
gcc-fuzz
build types
0.004716211381467133
full fidelity
0.004698438069955479
gtest repos
0.004695077967585732
available
generators
0.0046441493737964185
other systems
0.004620403782536301
testsuite
0.0045928820662239755
native libraries
0.004590303636704555
list
0.004587231883719362
empty, asan, msan, lsan, ubsan, no-re2c,
no-tests
0.00458032775946661
s-expressions
0.004579306376355842
\bin
0.0045528437432695934
sandboxing
0.004550801168339125
safe support
0.004541973627984609
src/wast-lexer.cc
0.004534026439971952
Similiar
0.0045103141326797115
wast2json
0.0044903519642929286
wasm2c tool

Preallocate memory
Remove unnecessary name
0.004468457817836388
JavaScript
0.004456153283133345
use
0.004448528372999286
optimization platform
0.004413033069309257
easier integration
0.004356160398572478
higher-level compiler
target
0.004349220215565945
travis-test.sh
0.004343771940393386
link
0.0043381769046054956
flat syntax
0.004315629427636212
command prompt
0.004307078308149644
undefined behavior
0.004277098278579795
behaviors
0.004270439629300751
targets
0.004255005021649113
commandline
0.0042516837329547525
libjpeg
0.004243086274850278
stdout
0.004236212995826073
threads(partial
0.004236150155479096
functionality
0.004212331850821927
canonical" flat format
0.004208967770649953
result
0.004204484443683898
lexer
0.0042010219493630215
Undefined Behavior Sanitizer
0.00418760895063106
make
0.004150241696628242
safety
0.0041341752608081254
prebuilt C sources
0.004124357710450258
ASAN
0.004105356849412794
.wat
0.004092892874537875
update
0.004092712754353206
value
0.004091420763274577
prebuilt source
0.004083228472507069
WASM machine semantics
0.0040522749658155775
PR
0.004047275267697931
development
0.004043053798775977
surprise
0.004037111006384856
invalid memory accesses
0.00402766644835342
dashes
0.004002220016085604
byte
0.0040013533751997185
stack-based interpreter
wat-desugar
0.00399993514742133
sandbox
0.003995690373762205
--target install
0.003979674729332411
src/prebuilt/.

CMake
0.003955451393174581
process
0.003948919391002317
Compile native library
0.003944023952612955
parse .wat text form
0.003940808577719297
elements
0.003908595517586165
MinGW
0.003903153024322954
C/C++
0.0038472343235436387
MSAN
0.003834043001956911
LSAN
0.003824615473313949
Windows
0.003815133279741854
bounds
0.0038054731166649405
basic memory operations
0.0037756954919691047
UBSAN
0.0037685201604104276
# parse and typecheck test.wat
$ out/wat2wasm test.wat

# parse
0.003702223590836879
Clone
0.003655302724455542
submodules
0.0035699561110008366
release
0.0033980485532656216
Wasm Sandboxing

Modification
0.003058107582093232
change
0.0029698585218817485
easy way
0.0028897973529646097
