WebRTC
0.02588935254547906
libdatachannel
0.020675143593881
WebRTC Data Channels
0.019698285775338078
web browsers
0.019194060612940152
datachannel-wasm
0.016746012775984073
library
0.015837849476495112
alternative ICE backend
0.014838410621719238
peer
0.013991022948093151
SDP
0.013443586340782583
OpenSSL
Build
0.013152025655946958
media support
0.01255987749820153
FreeBSD
0.011410351569469623
GnuTLS
0.010712291995833761
WebSocket APIs
0.010554210186921929
state << std::endl
0.01049935193095338
WebSockets
0.010235498708334703
pc.onLocalCandidate([](rtc::Candidate candidate
0.010031898096490877
RFC8261
0.009860702732175668
DTLS
0.0097626841803131
Chromium
0.009754123785921977
Firefox
0.009717005792239627
rtc::string>(message
0.009682388378716548
SRTP
0.009514516853205115
direct connectivity
0.009448059561243166
WebAssembly
0.00940982973303712
libnice
0.009250755588458422
JSEP-compatible session establishment
0.0091404679656941
protocol
0.009034826439936597
libjuice
0.009033336148561326
Microsoft Windows
0.008898753164789957
Protocol stack
0.00836569796887838
WebRTC Media Transport
0.008176767294148523
compile time
0.00807500455752016
examples
0.008064648188821915
devices
0.007848368670223385
mid
0.007623893249688736
dc
0.007564197412621848
std::holds_alternative
0.007324913865544674
state
0.007251167229513745
Node.js
0.006397385214147565
vcpkg
0.006356578514305414
Rust
0.006298018031739581
STUN
0.006258086793099984
RFC8445
0.00622389115211324
AUR
0.0062091838099697086
plog
0.006139194827070717
RFC8489
0.006087149808011898
Dependencies
0.00608698983392792
dual-stack support
0.006026400348000539
C++17
0.006015872130690317
Bindings
0.005981603804214759
IPv6
0.005933597367418453
Apple macOS
0.0059296803176212545
rtc::string> message
0.005918035242770293
choice
0.005916977972426574
C bindings
0.0058855306511329435
ECDSA or RSA keys
0.005878023971854886
https://github.com/sctplab/usrsctp
0.005816758867033082
Android
0.005812297574570235
RFC8838
0.005641335655795305
code
0.005625634817939802
RFC8829
0.005593756804243906
extension TURN
0.005587561898248258
RFC8824
0.0055800720162214636
LICENSE
0.005577830986966799
https://github.com/SergiusTheBest/plog
libjuice: https://github.com/paullouisageneau/libjuice
0.005563673239279083
design
0.005547238691841816
mode
0.005530763142411303
key derivation
0.005528342254390581
Differentiated Services QoS
0.005468857873569537
RFC5764
0.005464103284484386
iOS
0.005463530284460152
POSIX platforms
0.005435480337639672
RFC7350
0.00542739839251836
RFC8841
0.005404103434165544
Vagon
0.005387373408825603
media multiplexing
0.005384458371975034
Submodules
0.005368118437382107
RFC8835
0.005352811271944517
building instructions
0.005349625062811933
LGPLv2.1
0.0053426229208209
order
0.005336380035219871
cross-environment applications
0.005332659250414234
RFC8843
0.005332456950441362
BUILDING.md
0.005328455258721174
https://github.com/cisco/libsrtp
0.005317135890524953
RFC8656
0.005287407661461715
GNU/Linux
0.0052826663623665344
libsrtp
0.0052150378845467315
RFC5761
0.0051977309556125685
native applications
0.005182208811356675
pain
0.005171367873959419
Hololens
0.005144595383803051
RFC8837
0.005143844381407798
Safari
0.00511202955090289
Keepalive
0.005110134921269313
SCTP/DTLS data traffic
0.0050885265290922235
simplified versions
0.005079843816326658
submodule
0.00506475165925171
Googles bloated reference library
0.005025910081457709
Deon Botha
0.005017965865127785
signaling server
0.0049944165594218645
behavior
0.0049932036932509895
WebSocket

WebSocket
0.004989052808374736
ping/pong

External resources

Rust bindings
0.004954075774957294
Multicast DNS candidates
0.004928317641283848
SRTCP control packets
0.004894380917407014
interface
0.004881956284341618
auto
0.004867799542287728
pc.addRemoteCandidate(rtc::Candidate(candidate
0.004792535484567437
unique network component
0.004782845545813202
Streamr
0.004771927880447871
ad-hoc ICE library libjuice
0.004766530451545118
security layer
0.004754146346536355
Peer Connection
0.004712039196420409
webrtc-echoes
0.004623202297210473
draft-ietf-rtcweb-mdns-ice-candidates-04
0.0046159860009299045
GPLv2
0.004614156709946768
multiple backends
0.004581964357966795
C API documentation
0.004567483204197735
look
0.004561267298794359
datachannel-wasm
Lightweight STUN/TURN server
0.004517936522522501
#
0.004466864417129821
single UDP port
0.004457557012764158
following communication protocols
0.004456469607917217
Media transport
0.004430318798141785
RTCPeerConnection
0.004388875554174169
rtc/rtc.hpp"

rtc::Configuration config
0.004375429908288894
MY_SEND_DESCRIPTION_TO_REMOTE(std::string(sdp
0.004367372605298534
minimal external dependencies
0.0042977466418934705
LGPL
0.0042944359336675765
standalone implementation
0.004252105285764221
RFC8831)
SRTP-based Media Transport (RFC8834)
DTLS/UDP
0.0042488778256591
real-time data and media exchange
0.004236936796645252
client and server side
HTTP
0.004233447890053245
License
0.00421490587190791
Michael Cho
0.004139949568826447
TLS
0.004054083613211085
pc.setRemoteDescription(rtc::Description(sdp
0.004004000265476066
MY_ON_RECV_DESCRIPTION_FROM_REMOTE([&pc](std::string sdp
0.003993356907807689
candidate.mid
0.003904933394166468
pc(config
0.003729234282223941
GnuTLS
Gitter
Discord

AUR package FreeBSD port Vcpkg package

libdatachannel
0.003702603696848143
std::get<rtc::string>(message) << endl
0.0036512230494374943
ws.open("wss://my.websocket/service
0.003645744665992894
std::shared_ptr
0.003573479915240863
work
0.0034692719082366347
dc->send("Hello world
0.0032060385143518064
WebSocket

rtc::WebSocket ws
0.003199821312646173
libdatachannel - C/C++ WebRTC network library
0.0030012932005659175
