LLVM sanitizer
0.05458948746755138
function
0.04577533427541572
LLVM pass
0.03188695419541835
file
0.02539107620751734
sanitizers
0.024288187723146216
compiler-rt
0.02375128628887964
runtime component
0.023532713941300878
out
0.019479181767024813
add_llvm_library macro
0.01908536347289794
source
0.01648151618131343
step
0.015551149166092232
operating system
0.015483630836434083
toolchain
0.014786687857793352
list
0.013985422752314914
LLVM
0.013885537789930234
new directory
0.013653917886553677
example runtime
0.012754361200214398
functions
0.012528745988600303
reference
0.012226685798318818
clang/lib/CodeGen/BackendUtil.cpp check
0.01175846888441852
compiler driver
0.011605788772260152
patch files
0.010592521392981329
opt tool
0.010240924304633078
code
0.010164334347080098
related blogpost
0.009536715385965813
few steps
0.00873043436165895
basic block
0.008241714779015615
Linux
0.008155055550922606
module
0.008085816756547298
architectures
0.008010641074833763
lot
0.007672953666852776
interceptor interface
0.00740650187203471
llvm/projects
0.0073947836899646
cd
0.007323901758691128
cmake macros
0.007306192443432173
few lines
0.007296644421760859
malloc_target.c
0.007282348353913088
repo
0.007225201291677588
actual IR
0.007164637211783392
output
0.006983296242719796
llvm/lib/Transforms/
0.006841385779342439
other things
0.006793446328082174
program
0.006785355455852344
llvm-dis tool
0.0067320823640962925
instrumentation
0.006622107672871699
manager
0.006602682669374031
llvm/lib/Transform/TestPass/TestPass.cpp
0.006539774425762789
architecture
0.00650667297312243
llvm/tools/clang/include/Basic/Sanitizers.def
0.00621750559134908
instruments
0.0061264407105715854
first thing
0.006085623420841333
clang
0.005054096550609398
prints
0.005043491374397358
-load
0.004995432719080291
malloc_target.bc
0.004977917474484817
&
0.004835874826883264
agnostic but other parts
0.00481754848598966
configuration options
0.0048173110167948185
confusion
0.004674148647698337
/lib/LLVMTestPass.so -testfunc
0.004656369482258746
X86, X86_64) 
check
0.004651439484372639
respective levels
0.004632086095575132
largest unit
0.004566038864193263
compilation
0.004563308145244379
bitcode
0.0045602943737952685
more complex tools
0.004551378551899229
template
0.004542611358042693
symbol address
0.004538838897215437
install script
0.0044971393211969985
OS
0.004491719470804012
version
0.004462079173584732
dlsym
0.004446870886585436
malloc
0.004416805296478645
RTCommon libs
0.004410200316974979
configure
0.0043810310606871156
more information
0.0043544983082414
note
0.00435018025053314
https://blog.trailofbits.com/2019/06/25/creating-an-llvm-sanitizer-from-hopes-and-dreams/

Quickstart
0.004326290136494385
patches
0.004304657242438795
rt
0.004295801647550416
runtimeMake
0.004264178263550113
repo
git clone https://github.com/trailofbits/llvm-sanitizer-tutorial.git
0.004251567211702851
interface symbols
0.004241869744396914
#Clone
0.004195034404678095
ones
0.00419026901877506
static runtimes
0.004178233061867224
SanitizersArgs.cpp
0.0041461073589293814
build flag
0.0041342516161207874
add_sanitizer_rt_symbols
0.004129978473486682
CreatePasses
0.0041296567001749915
prototype
0.00409884416470007
github
0.0040896103142910225
build dir 
mkdir build
0.004081844680354239
TestPass
0.004071519074238486
passes
0.004051431276201688
appropriate locations
0.004049282200368379
array
0.004036285664181346
collectSaniitzerRuntimes
0.0040348810071519255
post
0.003979285514075484
variables
0.003979048040017681
constructor attribute
0.003974468123825882
readme
0.003970025478056688
complicated logic
0.0039668209876773585
right places
0.003958116749766872
instrument and analyze programs
0.003948370558682112
editing
0.003913963227000855
nastiness
0.0038409906597230525
cd llvm-sanitizer-tutorial/llvm
0.0038400819221297467
needsDfSanRT() function
0.003833680532166229
boilerplate
0.0038148824255921374
reference
Edit the CMake file
0.0038112799966088483
check
0.0038024084153788044
integration
0.0037959116936575944
powerful tool
0.0037918562481290773
great experience
0.003764634849175907
TESTSAN
0.0037624805298231414
tedious technical details
0.0037202609002747887
internship
0.0036890556902367732
linux
0.0036474180441746
point
0.003630724058347983
work
0.0036239903952974177
issues
0.0036223765780451734
typos
0.003603349305876003
transformation
0.0035399723204650913
rest
0.003533379808545005
cmake build systems
0.0035104849825418447
different build operations
0.003486598340146127
documents
0.00347419273253354
headaches
0.0034706433436674003
helpful resources
0.0032679874300992986
tutorial
0.0029934990776737482
Other notes
0.0029658677705984666
best way
0.002763951241320634
Helpful resources

Maintainer

Carson Harmon
0.0025816380697753524
@ThatsNotVeryCashMoneyOfYou
0.0023868055124879723
