glslang/SPIRV
0.02451127089926944
shader
0.017903982441081847
former
runs unit tests
0.017868906084802173
AST
0.014282252336549285
source directory
0.012533338897617296
Windows
0.011298774902034526
ESSL) front-end
0.011163795882427269
#
0.010415288666608421
GLSL
0.010283482557683639
MachineIndependent/glslang.y
0.010209188853249713
Google
Test
0.009546380356005137
CMake
0.009532968569970901
runtests script
0.008836109927704084
Status
0.008750991261337455
ray
0.007559187714536338
HLSL
0.007500483691684402
integrated test suite
0.007449312945991508
following steps
0.007439840584982578
input
0.007299731651783541
results
0.00723771620564518
version
0.0070361099833018996
SPIR-V
0.006937267074306251
Linux
0.006669042277962525
bison
0.00642211208824072
functionality present
0.006328523632358181
glslang.y
0.0062730502752441734
interface
0.006144492992211643
binaries
0.006131840046897742
tree
0.006118913182907835
reflection information
0.006055803042779617
May
0.006023151952350259
SOURCE_DIR
0.0060124054056126365
files
0.005947859257186051
Memory pool
0.005722422377097565
vcpkg
0.00570946697467506
fileName
0.005645987338421457
example
0.005603324541857264
Set -DENABLE_HLSL=OFF
0.005466764274735563
SPIRV Folder
0.005306137394690851
suggested calls
0.005180229714119039
usage statement
0.005122261619816127
multi-threaded tests
0.005018137736120546
reference validation
0.004940767326500503
date
0.004913613977353068
DXC project
0.004849275291119064
building
0.004821797955403643
failed %
0.004697912051943268
grammar
0.004612414438278614
cmake
0.004555507888112175
subdirectory
0.0045450070729339005
ShaderLang.h
0.004538346346560418
baseResults/.
0.004494011238213728
file
0.004482866415927208
current status
0.004464738166912918
issue
0.00445282735810914
SPIRV-Headers
0.004415546747555031
StandAlone.cpp
0.004332136095735734
reflection types
0.004301708496299549
const char* GetGlslVersionString
0.004294107610072637
code
0.00429153295272452
intermediate representation
0.004214468444907109
Bash shell
0.004197771425601735
web grammar subset
0.004070676103093398
StandAlone
0.004006668017807225
uint32_t
0.0037604668642347706
C Functional Interface
0.003693688894348625
translation
0.0036767544785487913
standalone binary form
0.003663145535194985
more details
0.0036585791824710165
baseResults/
0.00361265366664055
compilation targets
0.0035815412218078158
optional
0.003540773639733892
printf("GLSL
0.003528994481139301
m4
0.0034658337533899613
.stage = stage
0.003458634344908865
>
0.003417403129672625
successful
testing
0.0034159603821211863
changes
0.0033912601254247137
steps
0.0033768407367072667
googletest
0.0033615774118423286
glslangtests
0.0033601975203007965
pipeline shaders
0.0033435293938966285
PATH
0.0033252182756939113
request
0.0033221386156053944
spirv-tools
0.0033089312483982384
case
0.0032551758298249808
BUILD_DIR
0.003226056751624445
symbol table
0.003224333541907604
updateGrammar
0.0032216725229674797
block comment
0.0031948862714740464
Vulkan
0.003178496833142722
GitHub issues
0.003165113411470257
non-shader extension
0.0031163997845356324
Check-Out this project
0.003090448931822076
executable search path
0.003074735071039921
web" argument
0.003061190620185547
Sh*() interface
0.0030556568780623038
definitive/reference-level semantics
0.003042275165373048
localResults/ directory
0.003039558043251573
spirv_messages = glslang_program_SPIRV_get_messages(program
0.002996661895801962
Khronos landing page
0.0029429639512737102
GN
0.0029396204772950524
git config
0.0028999398869990482
glslang_program_delete(program
0.002881919488627493
Debug
0.002824706446831405
use
0.0027959020958757018
bool InitializeProcess
0.002779640430342427
void FinalizeProcess
0.002773298305708822
glslang_shader_get_info_log(shader
0.002747938000028697
standalone JS/WASM library
0.0027292717939606283
getInfoLog
0.0027289695035036593
new compilation error
0.0027080634952884996
memory
0.0026877395244617047
subdirectory>
git clone https://github.com/google/googletest.git External/googletest

TEMPORARY NOTICE
0.0026794800353682605
glslang_program_link(program
0.0026574503702478406
glslang_shader_get_info_debug_log(shader
0.0025910045202880666
object
0.002587427171393041
!
0.0025400245869787955
&
0.002503846787765189
setEnvInput
0.0024369428503287272
setEnvClient
0.002436237648675533
.client_version
0.0023071413881541546
GLSLANG_TARGET_VULKAN_1_2
0.002300610738521143
examples
0.0022760645738182403
setEnvInput(EShSourceHlsl
0.0022740097225592915
ShCompile
0.0022707715345087268
setEnvTarget
0.0022606368276952634
practice
0.0022382250347362507
v7a
0.0022369320348104038
EShSourceGlsl
0.002230807337752388
approximation
0.0022138353893493847
more detail
0.002212064460654253
execution permission
0.0021928722332843612
GLSLANG_MSG_SPV_RULES_BIT
0.0021870178680381226
ninja
0.002182487336168655
bit
0.002160548636695674
glslang_c_interface.h
0.002160173341962498
armeabi
0.002150569241532956
addition
0.0021414979970158583
styles
0.0021374463046176396
.rchit
0.0021218344614741327
system
0.002113854502446979
Microsoft team members
0.0021085489883564
other options
0.0021038922978383135
place
0.002088420584411061
Complete
0.0020830238835463934
std::vector
0.0020825638249795443
warning/error
0.002075709025125696
intermOut.cpp
0.0020702350215353873
aid
0.002066481422087821
buildbots
0.0020616065852296023
limits
0.002057389437575158
similar weight
0.0020571640250862592
GLSLANG_CLIENT_VULKAN
0.0020564657919342737
alternative
0.00203349100751561
validation errors
0.0020265556152093372
GnuWin32
0.002024499137441674
.target_language
0.0020237647595351986
Reduction
0.0020233562606277013
printf("(%s
0.00202179970300532
attempts
0.0020166922671178335
mismatch
0.0020129139512502646
glslang_program_SPIRV_generate(program
0.002006385450458261
standalone.gclient
0.0020024837760204027
source-code control
0.0019908368444577556
build-dir>/glslangtests
0.0019902289268537653
master
branch
0.0019829110521341177
variables
0.001981675490888947
EShClientNone
0.0019797297854210767
Semantics
0.001978331555439155
Sh
0.001970538950922233
compiler(AST
0.0019673195493839987
grained control
0.001965201841131667
false,
        .messages = GLSLANG_MSG_DEFAULT_BIT
0.0019614688600572187
filtering
0.0019610689104999344
Reference Validator
0.0019607194806362514
.forward_compatible
0.0019558911025023386
C++ Class Interface
0.0019547998724179605
real output
0.0019546140898294064
community contributors
0.0019500471987444947
larger investment
0.0019416501626872708
master-tot release
0.0019407854058577137
gn
0.0019392082868073485
old install
0.0019367068136613389
std::vector<uint32_t> compileShaderToSPIRV_Vulkan(glslang_stage_t stage
0.0019334764784667696
platform
0.0019331496955021393
Code
0.0019327967606473581
command
0.0019322529249726314
Release --target install
0.001929039250650635
setEnvClient(EShClientNone
0.0019269864578373367
.rahit
0.0019245181719369658
Bash-like environments
0.0019236047443984005
setEnvTarget(EShTargetNone
0.0019195820050608614
s\b
0.0019183069637873956
Build Steps
0.0019160577012784215
entry points
0.0019142262951609725
-j4
0.0019105096274061302
invocation
0.0019076536995514383
large amount
0.0019055063866775168
transition
0.001903259662670627
.geom
0.001902964977371231
windows
0.0018990272605282118
Tasks
0.0018927717131755743
Python
0.0018922289028856169
several components
0.0018919297141480789
glslang_shader_t
0.0018916742355597966
internal abstract syntax tree
0.0018899952627794067
location
0.0018886034570664127
developer
0.0018884613361904111
compiler
0.0018884602251863535
SPIRV/
0.001879862601349239
--local
0.001875716085133472
contrast
0.0018745939863245213
shaderSource
0.0018698040875110866
Optional
0.0018673601999930074
Instructions
0.0018635582120824603
glslang_shader_delete(shader
0.0018607741241396369
.default_version
0.0018514638387477954
specifications
0.0018506011909334987
spirv.hpp
0.001849372473492576
update_glslang_sources.py
0.0018470485474377032
constants
0.0018465022740512245
glslang_shader_preprocess(shader
0.0018463804912648375
simplified resulting run-time call stack
0.0018457054481738535
bash script
0.0018419825635399678
few cycles
0.0018360001739582503
HLL source
0.0018358791157481891
Dependencies

A C++11 compiler
0.0018353122290415288
deallocation
0.0018263959458329271
locations
0.0018250086855581583
software
0.0018243201551084928
CMAKE_INSTALL_PREFIX part
0.0018236430075583006
specification/goal
0.0018159854369450962
own scripts
0.0018158025296275337
dependencies
0.0018156935752244123
repo
0.0018129922392438752
various
gtests/*.FromFile.cpp source files
0.0018108105900733018
command-line
option --update-mode
0.0018071786250498556
linear byte-code style low-level intermediate
representation
0.0017980361789573605
EShClientVulkan
0.001797303109851975
efficient transfer
0.0017968311595910832
gclient sync
0.0017936498000666334
arguments
0.0017932397987199464
choosing
0.0017920729809105824
EShClientOpenGL
0.0017881813691228532
result
0.0017851073510553907
Programmatic Interfaces

Another piece
0.0017849766710052051
Android
0.0017848115295695608
localtestlist
0.0017814496006734299
glslang_program_create
0.0017769105556044123
Intermediate.cpp
0.0017736604932114847
Basic operation
0.0017680309543906003
people
0.0017659006014458696
diff and bump process
0.0017636075404067716
--config
0.0017609778113272332
primary algorithm
0.0017579218770534164
global symbols
0.0017575579434265986
different interfaces
0.0017568185330473424
return outShaderModule;
}

Basic Internal Operation

Initial lexical analysis
0.0017551425652212827
Reflection
0.0017520056095139068
original program
0.0017509049584069258
new C++ class-oriented interface
0.0017482264779069018
Configuration Manager
0.0017469528686221377
Reflector

An API
0.001741432984482385
MSVS
0.0017392087836874419
execute glslangValidator
0.0017391528393064983
glslang_program_t
0.0017368433294151506
applied stage-specific rules
0.0017365013692076977
completeness
0.0017341811561075837
small amount
0.001725799730120493
./vcpkg
0.0017243424637813872
News

Visual Studio
0.0017202286956597946
preprocessor
0.0017189382145152159
own private list
0.0017155151796795407
MSVC
0.0017154091147405929
ParseHelper.cpp
0.0017148053499836985
warnings/errors
0.0017126736802773456
following notes/exceptions
0.0017119447330625236
original C functional interface
0.0017044561541273305
cmake
Set -DBUILD_TESTING=OFF -DENABLE_OPT=OFF -DINSTALL_GTEST=OFF
0.0017023581421548022
Glslang
0.0017015319512836396
above commands
0.0016988329094799292
NewPoolTString
0.0016957006940210833
CMAKE_INSTALL_INCLUDEDIR
0.0016952923522445405
glslang_shader_parse(shader
0.0016900403257212226
appveyor status
Continuous Deployment

Glslang Components
0.0016844966509655974
outShaderModule.data
0.001683984160018961
AST -> SPIR-V Back End

Translates glslangs AST
0.0016835937240996359
Execution
0.0016773859491559615
reinterpret_cast<const glslang_resource_t*>(&glslang::DefaultTBuiltInResource
0.0016736095450139896
individual container
0.0016663695927129545
correct configuration
0.0016617069645668294
compiler" call-back object
0.0016577736590888798
-DENABLE_GLSLANG_WEBMIN_DEVEL
0.0016571294479673943
next section
0.001656882377831095
depot_tools

Download depot_tools.zip
0.0016503919804362105
bump shell script
0.0016462679711920897
minimized build
0.0016457471578250158
parent
0.001632542875853359
-DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="$(pwd)/install" $SOURCE_DIR
# "Release
0.0016148411530755467
single-shader single-threaded integration tests
0.0016109164042968796
command-line tool
0.0016085297195481973
planned removal
0.0016081150790450962
base class
0.0016024310987782782
brotli
0.0016018815061135648
custom allocator
0.0015958465146372477
good way
0.0015807654303600465
class TShader
    setStrings
0.0015803346514907
External
0.0015724943966936588
Khronos-specified SPIR-V intermediate language
0.0015713677155224503
cases
0.001571190297999908
internal
object code representation
0.0015528541191619921
CMAKE_BUILD_TYPE
0.0015422348637900809
TString
0.0015131309189407032
dead old-style linker-type code
0.0015112719402983808
missing header
0.0014848270648949694
WIP
0.0013665729196282992
Android -DANDROID_TOOLCHAIN=clang -DANDROID_ARM_MODE=arm -DCMAKE_MAKE_PROGRAM=$ANDROID_NDK_HOME/prebuilt/linux-x86_64/bin/make -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake
#
0.001365864339042001
differences
0.0013595959113492154
normal
C++ memory management
0.0012886648890678433
versioning scheme
0.0012814005397550308
version/extension/stage/profile
0.0012109668107238537
