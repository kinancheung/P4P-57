WasmEdge
0.07778110604039852
NodeJS
0.06534267159553218
wasm
0.05684373788430167
image
0.05632833093354506
JS Worker threads
0.05195402936136612
C code
0.03901055056127985
single-threaded WasmEdge Runtime
0.03382393805537371
multi-worker version
0.032319691889220355
clang toolchain
0.02551193326489791
-
0.025107537721175105
Multi
0.02473433338145765
AOT compiler
Multi
0.024578729734743232
std::threads


NodeJS NodeJS WebAssembly
0.024408550895237306
performance
0.024356953289628117
V8
0.02427259037611185
Mandelbrot
0.024226300377179398
memory
0.02345613227608257
Number
0.023322871831157495
workers
0.023263909634499563
different runtimes
0.022885385638909347
shared library
0.022762052802241403
npm install canvas
0.02269928740421646
Installation
0.021844090908826025
installation step
0.0216027400714918
results
0.021287934784715096
WasmEdge WasmEdge C-API
The wasm file
0.02093823573143231
experiment
0.020880029451403555
bash test.bash

Results
0.02079843659901869
Intel(R) Xeon(R) Gold 6226R CPU
0.020740438727595845
node v14.18.2
0.01991124516526186
ColinEberhardt/wasm-mandelbrot
0.019264589479879513
example
0.019021543427321198
better thread scalability
0.01892813270225949
Images
0.013005745801952837
node

output-wasmedge.png
wasmedge
0.012786212200286733
