datapoint
0.03512679528688818
most one function
0.027508240562281724
core library
0.026711899214617453
grid
0.021983943058622592
dp3
0.02076475324771275
dp5
0.02017309912348423
spfg_dp_create(&runtime
0.01890240539468796
dp4
0.016655380601352923
dp1
0.016293335042059213
graph
0.015082154015915393
variable ARCH
0.014790674261994055
grid evaluation
0.013999841577561145
WebAssembly
0.013128523844785208
dp2
0.013103767433950447
spfg_fn_id_t fn1
0.012398193780652428
spfg_dp_set_bool(&runtime
0.011710938323747911
spfg_fn_id_t fn2
0.011366357696824758
CI Dockerfile
0.011200586624975608
metadata
0.010792340984640035
fn1_out_dps
0.010774911877064842
Refer
0.010762678040141376
external dependencies
0.010511351849951474
functions
0.01048264918303233
spfg_fn_create(&runtime
0.010446066585125435
spfg_dp_id_t
0.010433372042605462
Support
0.010313531093749023
binary footprint
0.009891161369527687
fn1_in_dps
0.009860213197745722
outputs
0.009720049025794732
Bindings
0.009594851160099005
tests
0.009425531743956276
# Removes
0.009411482915245807
inputs
0.009172827773561636
changed data
0.009125241137564319
higher level event-driven rule engines
0.009105488664826732
coverage
0.009093760359251555
single phase
0.009083305382532566
integer
0.008963738453554844
spfg_boolean_t
0.008869227005611015
lib/azjson
0.008747039825963667
Support optional error stack
0.008727618302728505
contrib
0.008562936295175877
fn1_type = SPFG_FN_AND_BOOL_BOOL_RET_BOOL
0.008558283575007456
devel   # Builds
0.008365565747843081
spfg_phase_t
0.008299804942009778
Add extensive test coverage
0.00821688624041159
typed memory
0.006903907906228507
addition
0.00689509923310069
fn1_phase
0.00678002507901544
fn1_type
0.006726036712420076
piece
0.006716492491445939
nodes
0.006687636859333543
additional insight
0.006539162563300713
build options
0.006343544351082697
docker
0.006300129957388663
specific list
0.006221322593327732
relationships
0.006096691807800581
Abstraction Model
0.006032641866110611
higher level languages
0.006009047030423125
platforms
0.006004234142320586
easy inspection
0.005952563247810016
edges
0.005886073653832788
make
0.005793499081454366
predictable memory usage
0.005776424023916236
relevant abstraction units
0.005758041448100882
Python
0.005688907422458013
code
0.0056764137316005275
Makefile
0.005666486547099481
Elm ports
0.005606593912259352
atmega328
0.005606209917182329
recent mutation history
0.0055813189317973095
decoders
0.005570423904938959
range
0.005568291239334345
JSON encoders
0.00554993508565794
ABI
0.005540914190777385
announced types
0.005514116142679529
mind
0.005513484808836621
goals
0.005497733568451963
embedded devices
0.00549176275647367
breadth
0.005469629786597954
modern browsers
0.0054533695979196856
Disclaimer
0.005448804457910894
output
0.005445901967592461
built artifacts
0.005439863469000437
core API
0.005439315293663256
wasm lib
0.005439053547358242
C
0.005430586427795373
Elm: Elm type definitions
0.005421328461010726
input
0.0054169630539508415
Roadmap

Add compile flags
0.0053943344160833
specific python binding
0.005352379790132471
abstraction model
0.005316308897525452
dp5_output
0.005302273752815908
sequential phases
0.005287762041002812
fn2_type, fn2_phase, fn2_in_dps, 2, fn2_out_dps
0.005282967699479825
Diagram
0.005281660088983679
error handling
0.005243068305011041
datapoints
0.005232580597357235
spfg/spfg.h"


void spfg_example_1
0.005173312268513298
string
0.005155937686716951
brevity
0.0051544276075254115
intermediate build artifacts
0.005094049315309048
spfg_rt_reset_cycle(&runtime
0.005067445608964094
spfg_runtime_t runtime
0.005065507664436455
ctypes
0.005062056350406081
spfg_rt_run_cycle(&runtime
0.005040541673038335
first stable version
0.005036556918442705
spfg_rt_init(&runtime
0.004930775650458947
predictable schemaful malloc-free JSON deserializer
0.0049203675944002965
dp5_emitted
0.004902700586478956
timestamp stream oriented filters
0.004861489407921669
NULL
0.004821833189583799
safe cross-platform propagation
0.004748994788707193
single type
0.004706262633299857
Complete richer graph viewer
0.004624306233361693
shin javascript wrapper
0.00454532969029157
foundational block
0.0044801659207245
minimalistic stateful event processor library
0.004388702867377678
more usage examples
0.004281768543417127
public interface
0.004267794545815941
SPFG
0.004177003098912474
complete state
0.0036865484299079664
