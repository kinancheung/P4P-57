MIR
0.04070171286723051
code specialization
0.017421753311921064
SSA
0.0156728257640434
int sieve
0.014633743886628582
C external functions
0.014115812616589035
control flow instructions
0.013869745364398292
MIR JIT compiler
0.013852646675599312
functions
0.013196637547864322
machine
0.011421595217343776
bit integer
0.011253249515515441
function
0.011103724123335278
name
0.010999753575834983
k
0.010634486075982948
ctx
0.010433056416258458
local i64:iter
0.010357753243961864
data
0.010320917433852578
Files mir-dlist.h
0.009981827628993847
modulesEach module
0.009322007781499175
branch insns
0.008745956564825392
Files c2mir/c2mir.h
0.008653440233218618
K
0.008289836181064603
Memory operand
0.008070431199438502
form
0.007630750837616117
modules
0.0074864447965786824
used optimization level
0.007008696078881172
func i32
0.006947412335044804
Porting GCC
0.006733580088152093
count
0.006713098011358389
i32
0.0063535327495779425
API
0.005866407155679914
printf
0.0057189948759258265
long double values
0.005552808927151243
aarch64
0.00550225943572836
more than one result
0.0052574476685497765
time
0.005157304547015355
project
0.005130118599627016
instruction
0.0050556186191059675
propagation
0.0050353459143657065
mir-gen-x86_64.c
0.004971325748729968
Build CFG
0.0049144774952505875
mov iter
0.004850796849256951
interface 
Running code
0.004812813771481485
float
0.00475055658984003
declarations
0.004663806971478678
small WASM runtime
0.004609813097182964
optimizations
0.0045560630739942065
LIBJIT
0.0044776226342502405
generated code
0.00445140230101811
iter
0.004370353281429377
different architectures
0.004161598993089823
RyuJIT
0.004114756466913037
small (10K C lines
0.004085023660887392
QBE
0.004003185689101466
MIR calls
0.003941337199963242
p_printf
0.003917926606573723
label
0.0038341881042095152
textual files
0.0038311731944626047
future
0.0038033467673255434
IR
0.0037640169907210558
m2
0.003744844255860895
x86_64
0.003739908509204983
r
0.0037055595407812923
p_sieve
0.0037025309823538804
KB
0.0036864896326829102
m1
0.0036746732293469475
MIR light-weight JIT
0.00361556185376274
unused outputs
0.0035449978393904333
signature
0.0035084010238194004
bit signed and unsigned values
0.003492123623782037
README.md
0.0034457696887292863
phi nodes
0.003444523453528555
prime
0.003424663186672237
basic blocks
0.003388369104429197
months
0.003357557949533707
bge fin
0.00335213255004652
operands
0.003335723304996261
tests
0.0033341153759107105
Files mir-<target>.c
0.0033006883217194245
return types
0.003285198127449526
allocation
0.0032778968728050264
Example
0.003264409599893963
GVN


Dead Code Elimination
0.003254138977068564
program point
0.0032525513915512665
generator
0.003242938909310937
MIR Project

MIR
0.0031975413376134246
MIR translation
0.0031773021453824187
generation
0.0031734391967717297
loop
0.003170510878141412
big-
0.0031612693079284284
bge fin2
0.003149923863799107
loop2
0.0031251815705990752
mir.c
0.0031080868099543847
memory pools
0.003106452636393976
prime
loop4
0.0030890636130072703
names
0.0030729788229923636
beq cont3
0.003063293600394631
bit and 64-bit insns
0.003056460342510307
interface
0.0030521546645365352
x86_64 Linux/OSX
0.0030136998117109375
Static Single Assignment Form
0.002997890616553438
string
0.002984515390239155
mov u8:(flags
0.0029606057419019746
speed
0.0029317105378594455
int N
0.0029163732338384654
text file
0.0029161781772768145
calculations
0.0028148008164661383
instructionsEach local variable
0.0027880018941104936
function arguments
0.0027551883674242846
JITs
0.002653233502643816
compilation
0.0026507072947420437
MB
0.002648216293637332
%
0.0026404664147781703
void ex100
0.002637515508404655
syntax
0.00261989972308219
conversion instructions
0.0025840951126997165
type
0.002577706577417015
core
0.0025163553670569166
MIR_gen
0.002488760509784241
export
0.0024438202445148513
bit operand
and high 32-bit part
0.0024332520443681198
use
0.002410590289366638
ABI
0.0024006732366970663
m_e100
0.002391066745620109
ppc64le
0.0023872784688966937
m_sieve
0.0023839598886494493
s390x
0.0023719044145965817
ppc64be
0.002347918516890385
blog post
C2MIR compiler description
0.0023439117501706432
directories
0.0023389126560087003
Assign
0.0023185073892019424
standalone+
0.0023177593333492735
Implementation
0.0022668379835926494
NanoJIT
0.0022640781051308815
riscv-64 Linux
0.002254077323640318
interpreter
0.002235250461933151
multiplication
0.002219888990027361
subtraction
0.0022197818918945466
Apache License
0.0022136687977170402
registers
0.0022023074614312974
target
0.0022014928758310173
LLVM Bitcode
0.0021900585200533805
medium
0.00217851825865273
fast RA
0.0021742231385029867
work
0.0021730444557520345
reserved hard regs
0.002172829837190652
parameters
0.0021694996543422176
assign
0.002155771938174659
Performance
0.0021552467155775915
MIR_load_module
0.0021505662855889236
Java
0.002143498339912863
ongoingImplementation
0.0021318135828291927
fmt
0.0021274289438677893
Combine
0.0021224168489995107
LGPL2
0.0021162510224952634
creation
0.0021116353316305955
i++
0.002104532649338932
cc1
0.0020967409319027396
mips64
0.002086143353704977
proto
0.002082776289538123
division
0.002078231785168945
addition
0.002076883525187178
context
0.002074391842103268
Rust-
0.0020716911855532478
MIR_init
0.0020710398376391024
iter
          export ex100
0.0020560668856872332
sparc64
0.0020556623392369976
CraneLift
0.0020517920921949186
*
0.002041679637126307
Copy Propagation
0.0020208047007469346
Apple M1
0.0020178077923740626
small C11
0.002015906434195402
interpretation
0.002012312479835368
1st call
0.0020058004101971925
estimation
0.002001493074057876
ASM generation-
0.0020009195399849273
N
          mov count
0.001998993399577185
Sparse Conditional Constant Propagation
0.0019920627274250726
Simplicity
0.0019906930015626424
bitmaps
0.0019727607144766485
death paths
0.0019659722139574796
natural loops
0.001965720997197487
variable length arrays
0.001962493726588113
v
0.0019604153622015327
Control Flow Graph
0.001956485424407278
DotGNU Project
0.0019410257059666966
hash tables
0.001938196596601313
MIR_interp
0.0019321937740174012
Find Loops
0.0019280737272347778
labels
0.0019252798130386655
Build Live Ranges
0.0019247489753028333
ex100
0.0019171139750033261
Brauns algorithm
0.0019148606643241209
feel
0.001910648036195087
Rewrite
0.0019105999013482291
challenge
0.0019101831340837792
Parameters
0.0019042492103495685
combination
0.0019036508876382494
alloca flags
0.0019010949929790283
input/output
0.001898693861884811
copy elimination
0.0018969604073577017
HOW-TO-PORT-MIR.md
0.001896307212841396
dynamic Pascal compiler
0.001888190156528363
Global Value Numbering
0.001886077441914615
Different optimization levels
0.0018814646969701598
building loop tree


Build Live Info
0.0018787397357920132
More details
0.0018763883550594594
priority-based linear scan RA
0.0018687551595187144
process
0.001861795757552675
implementation
0.0018586732754309924
hashtables
0.0018573953743616072
possible number
0.0018523440396822652
bench
0.0018494338022603722
opcode
0.0018489004681801469
aliasing
0.001847837063931518
Simplify
0.001847079050358352
ones
0.0018438856119586925
additional small analysis
0.0018361428154817705
M. Braun et al
0.0018360829092619448
fin4
0.0018343455750468123
Eratosthenes
0.0018338786712091448
0
0.0018318120793080184
loop3
0.0018284162760389682
set
0.001823417962870401
stripped sizes
0.0018208724418727232
FC29
0.0018204872125815509
benchmarks
0.001818509071538495
MIR binary
and MIR text representation
0.0018169985369633646
local variables
0.0018043004359499565
best way
0.0017914942542592842
endfunc
          endmodule

func
0.0017901857492433778
stack slots
0.0017884998537444547
index
0.0017868875927267264
temp
0.0017857429764530355
Core:RyuJIT
0.0017784965038412548
modulo
0.0017753195143889004
double-linked lists
0.0017650254824320062
case
0.0017617177884176936
Motivations
0.0017527667843752267
result description
Function
0.0017497740433033559
MRuby
0.0017310452690609847
GCC-8.2.1

MIR-gen MIR-interp gcc -O2 gcc -O0
compilation
0.001728325429029941
current state
0.0017154970508582294
info
0.0017130915968634312
above example
0.0017102044265999256
detail description
0.0017094984900578262
n++
0.0017087342128978028
test

Current MIR Performance Data

Intel i7-9700K
0.0017063697908585133
runs
0.0017045356905409054
longjump
0.0017040228657226803
platforms
0.0017027301584977778
int64_t
0.0017007517597548772
machine-dependent code creating machine insns
0.0016983954894924376
initial stages
0.0016946607476022357
d\
0.0016906607677182987
warranty
0.0016893291659921992
general, simple, high quality hash function
0.0016889200916573523
c2mir/c2mir-driver.c
0.0016798532794646526
simple RA-
0.0016765386223311692
startup
0.0016743823297572318
sense
0.001656877438742191
jmp loop3
fin3
0.0016474714829700012
WASM floating point round insns
0.0016423687529461587
12.1ms
0.0016400709612827578
endmodule
0.0016396817380182232
development
0.0016386752997546467
implicit coalescing hard registers
0.0016372089688732544
xor
0.0016324755107706645
loaded modulesLinking modules resolves
0.0016302075422010747
1.3us
0.001626487518523143
interpr
0.0016141956693464183
call interfaces
0.0016128187362196551
familiarization
0.0016056301722904747
MIR_set_gen_interface
0.0015949667193102866
line
0.0015948403782799667
combined comparison
0.0015924507241934789
CRuby
0.001589535134776624
memory file system
0.0015886087023439372
fast and lightweight interpreters
0.001573286016246077
count++
0.00156802640227804
LOC
0.0015645477950957947
C setjmp/longjmp functions
0.0015616344678588967
flags[k
0.0015523186228796984
unconditional jump
0.0015509941224534376
interpreter and
JIT compiler 
Files mir2c/mir2c.h and mir2c/mir2c.c contain code
0.0015186472797677133
basis
0.001509022863552975
serious usage
0.0014999006508700811
char flags[Size
0.0014984046495885256
mir-gen-aarch64.c, mir-gen-ppc64.c, mir-gen-s390x.c,
and mir-gen-riscv.c contain code
0.0014870169681847605
sparse conditional constant propagation
dead code elimination
code selection
fast register allocator
0.001472929331765095
2.9s
0.0014716895865809797
double value
0.0014673736021582795
non-zero value
0.0014593456108000936
projects
0.0014571697669273978
register pressure sensitive loop invariant code motion
0.0014373528474022359
times faster compilation speed
100 times faster start-up
100 times smaller code size
less 15K C LOC


Very short optimization pipeline
0.001437161454467907
operandsOperand
0.0014198294430902581
scale
0.001407160365685385
sign
0.0013796202083181863
execution
0.0013677058169552319
12us
0.0013544206969612518
double, or long double typeWhen integer memory value
0.0012832907525754873
Medium Internal Representation
MIR project goal
0.001265334159491982
