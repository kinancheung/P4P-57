number
0.06290992220453391
key
0.05969450133254636
BigInt
0.036211124331738155
ctr
0.0339807050053544
result
0.0280121867991477
bit unsigned integer
0.027987591907932638
counter
0.027075522818370258
algorithm
0.026043611821040067
provided range
Bias
0.02151103971616009
npm run build_bin
0.02145325259957203
web assembly modules
0.019917078715497992
numberReturns
0.019745193351279958
following binaries
0.01665322201539945
more information
0.01631546750504519
M.E. ONeill
0.015914195518081393
Number
0.015549534083465913
order
0.015405002916332131
module
0.015194853044015535
stateless version
0.014909032254663057
modulus operation
0.014902579190425496
node example
0.014097162631309246
c
0.01282621809877285
min
0.012268456898307762
written: stateless
0.011214147228973858
randBound(ctr
0.011159276604290955
max
0.010890309189184181
test_squaresrng
0.010887306665655431
positivity
0.010420254520914187
list
0.010268270315806507
desirable keys
0.010098646434813159
transliteration
0.009958444560800004
seedable PRNGs
0.009852504734156288
randBound(min
0.009845283761251386
test_squaresrngs
0.009801232970782694
integers
0.009799965865263846
float
0.009790546802866479
rand():numberReturns
0.009693775576875728
addition
0.009622236731612102
debias
0.009425037165702803
Bernard Widynskis "SquaresRNG" algorithm
0.0094138167951222
EcmaScript
0.009396709186430709
sufficient randomness
0.00937114685754773
Daniel Lemires "Debiased Integer Multiplication" algorithm
0.009323945273181101
part
0.00928982186700082
flavors
0.009163958920302095
absence
0.008970308912473949
web usage
0.008955431293020965
Range

wasm/squaresrngs.wasm
0.008805380963672274
Keys
0.008701010098616306
0xffffffff
0.008690243783764224
state
0.008669245761290708
setCtr(v
0.00862316713488242
prng
0.008604678470489914
Widynski
0.008569847282502676
//
0.008333263087037393
tests
0.008318536640337212
index
0.00816953549775998
wasms output
0.007972296002458792
API use
0.007969561791998684
ref/squaresrng/keys.h
0.007948408568176019
console.log(instance.randBound(1
0.007881650239713902
console.log(instance.randF
0.0075626125348769065
test/test_squaresrngs.js
0.007552607263355488
randF():numberReturns
0.007523692965207142
Testing
0.007370387879220583
playground
0.007359656685457881
node and web context
0.007248646193092649
console.log(instance.rand
0.007247374970076194
Widynski and Lemires c implementations
0.0072183542808393585
async
0.006935727039420372
instance.setKey(BigInt(0xfc819a732d6c7841
0.006846499125428004
machine
0.006733209359196841
instance
0.0064034276689113444
console.log(instance.ctr
0.00606540201795874
Pseudo-Random Number Generator port
0.005485743701237332
