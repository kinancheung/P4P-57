number
0.04129897713248337
@default
0.03683602994765367
file
0.023116714451101524
encoder
0.02303855511754069
Emscripten
0.02171825295930142
single gray frame
0.02129064217527031
output video
0.020705552165300806
string
0.016371878232553486
Trevor Sundbergs h264-mp4-encoder
0.016334053107734677
size
0.016225948200219817
multiple
0.014411367459767897
kbps
0.01342982778515601
YUV format
0.01326528288085611
input frames
0.012438176555057518
FS.readFile(encoder.outputFilename
0.012023597805921809
width
0.011909382319791375
WebAssembly
0.011586866777192579
Uint8Array
0.011189672353951227
fastest speed
0.011177227815742225
library
0.011125340549653208
wasm
0.01105187787530091
web
0.010996428997813744
best quality
0.01084476824928594
H264Encoder
0.010736892643313024
encoder.finalize
0.010696049881667748
Docker image
0.010540408753840602
outputFilename
0.01040361888290487
object
0.010222129687729198
encoder.width
0.010055011192867514
Overwrites
0.009855061277352813
quantization_parameter
0.009350081082281527
cmake
0.009263626542320989
NAL unit
0.00910915778786536
Emscriptens node implementation
0.008770071601865145
const
0.00876128465655234
changes
0.008727988566340347
submodules
0.008468868827866847
libraries
0.00838609412610725
frame_rate
0.008324508300204814
repo
0.008166503805172972
forks
0.007933987947265499
Waits
0.007666280196274718
@astronautlabs
0.007494116119900878
bitrate
0.007452641379918187
WASM
0.007379313258078382
Promise
0.007207495864993281
Int8Array
0.007172855038218748
H264MP4Encoder
0.007052279855888029
frameRate
0.006986582755490528
better compression
0.006963611672056072
Webpack
0.0069579203350134
Higher
0.006951830044129033
importable modules
0.0068604230339998525
loading
0.006859930791356808
HME
0.0067432544789684
base64
0.006713228307481141
console.log(uint8Array
0.006698928847063416
compiler
0.006588336263150838
groupOfPictures
0.006584603814759301
Height
0.006556755881904597
quantizationParameter
0.00653510401917534
Width
0.006435262921950987
async function createH264Encoder
0.006350761462717531
encoder.addFrameRgba(ctx.getImageData(0
0.0063314389678592025
Speed
0.006282630362900089
height
0.006223885738933737
minih264
0.006207780067979108
encoder.delete
0.006200501322942543
Example
0.006182257172396182
keyframe
0.0061533057456711355
*/
    FS
0.006128611905752394
addFrameYuv(buffer
0.006126109190059133
MPL 1.1 license
0.006085884367076138
reference
0.0060720139231979775
GOP
0.006068216695592696
git submodule update
0.006037896628422886
browser environment
0.006023991383953126
packaging
0.00602236485103924
* Frame rate
0.0060155113142163555
docker
0.006011992598021388
H264MP4Encoders
0.006009066487198532
Status

Usage

npm
0.005974188393510417
HME.createH264MP4Encoder
0.00596002465539709
other depdendencies
0.005934437500672874
locateFile
0.00591134406212589
* Alpha
0.005906398528035208
convenience
0.0058805120263540536
Ubuntu
0.005855701662983499
addFrameRgba(buffer
0.005820629534032833
HTML5 canvas.getImageData
0.005804279016666013
canvas
0.005799170000116708
option
0.005783756996197211
temporal noise supression
0.005572533547693215
error
0.005477933989937369
FS
0.005419260232881246
webpack.config.js
0.005388726239262478
public domain minih264 H264 encoder
0.005383848512484661
resources
0.005347058202972333
temporalDenoise
0.005343936867922354
initialize
0.00530830871864324
NALUs
0.00528051949454128
parameters
0.005268128564917858
transport 
stream
0.0052662075024714535
C++ code
0.005240900591941823
* @default 0
     */
    desiredNaluBytes
0.005092856250136333
alpha
0.005062480734415905
build
cd
0.005030310922482182
Prints extra debug information
0.0049663491192829725
H264
0.0049639866284327035
delete
0.004948956601267953
debug
0.00494265791835802
output files
0.004941321853389665
Node.js
0.004890363126547575
@/h264-encoder

Encodes raw YUV 4:2:0 progressive (yuv420p) frames
0.0036801704600548856
