Haskell
0.023445456967157906
types
0.014969303435526691
String
0.014935750612057938
compiler API
0.01416550404221586
def jsonToString(js
0.01339837783888894
lasca
0.013324602351115924
Scala
0.01298801446647383
Rust
0.01221144466133963
algebraic data types
0.011468265617062883
Erlang
0.011276395555883683
parametric polymorphism
0.010673220924326722
Array
0.010175679848287789
fast compilation
0.009698662461805443
https://gitter.im/lasca-lang/compiler

Lasca
0.009391196516833266
compile time type checking/inference
0.00934033388148105
Int
0.009327241581507521
Float
0.009214238734777476
Bool
0.00913144535296998
Python
0.00892591347074817
decent records syntax
0.00861040968951108
hello.lasca
0.008586883492058028
+
0.00827676384765677
package manager
0.008139799765442855
fast execution
0.008017599817470222
ADTs
0.007852866456059536
install boehmgc
0.007810409024339663
immutable strings
builtin types
0.007661376174452489
order function definitions
0.007642780471015262
Simplified OCaml
0.007364151083323033
type arguments
0.007256187689275265
traits
0.007051211367464272
GC
0.007004240977446932
Prototype Mode
0.007002852928643171
Syntax
0.006986500451333189
start time
0.006964424851151229
JArray(v
0.006946905552663442
classes
0.006802698379430881
Concurrency Oriented Programming
0.0067624061933910925
|
0.006629621883916353
pattern matching
0.006626701177421519
Current implementation
0.006406992282897809
ByteArray
0.006328105988158782
Int32
0.006315493669526492
Var
0.00629544756715361
Int16
0.0062737814699395785
Mac OS
0.006236424559137809
FileHandle
0.006202540003814962
Byte
0.006188816367773189
implemented List
0.005913865013072015
dynamic compilation mode
0.005864995106479438
Either
0.005809947900640016
Option
0.005768862893932362
bash completion config
0.005725484075595185
AOT
0.005663992639953343
Map
0.0053775215099784845
Current n-body
0.00523599085564833
docstrings
0.0052210320748345244
immutability
0.005179391243021965
subclassing/inheritance
0.0051404636070737355
doctests
0.005106960359138474
typeclasses
0.005086206121804756
minimalism
0.005034219099392398
--bash-completion-script lasca
0.004979073759983134
actors
0.004978906478020709
ints
0.004974098322016651
=
0.004967088486022728
interpolation
0.0048344666361517935
floats
0.004809059644731518
service
0.004739992076551267
JValue
0.004731360594781178
Leon
0.004725670379947376
notation
0.004713524521880543
UTF8
0.0047085412681016165
js
0.004650225550191608
Language Server Protocol
0.004648500329673277
| xargs cat
0.004627829598175283
regular expressions
0.004612962393482753
Num
0.004587829697782641
braces
0.004586012244689956
.bash_profile

export
0.0045591309957387334
checks
0.004548561807234919
Nix
0.004522115634079957
JIT
0.004510137041984043
garbage collector
0.00449108183251092
println("Hello
0.004487917876064918
Imagine
0.004438174430879608
method
0.004428949619529834
semicolons
0.004423800986858398
r
0.00441137374244542
first argument
0.004403178121270871
inner functions
0.00439703535529753
D
0.004391268275443749
Julia
0.0043716592151423934
default
0.004310159952199518
example
0.004307773230753098
Compiler Modes

Dynamic Mode
0.004301616683555595
-sSL
0.004283650823095818
toString(v
0.00426011077926364
OOP
0.004255841685363338
values
0.0042399296663092
curl
0.004232827069161428
func calls
0.004231584804390945
Algebraic Subtyping
0.004230492913587954
proof assistant
0.0042194777561238165
JString(v
0.0042099274522160385
Z3
0.004203754605591358
Liquid Type system
0.004191963418379551
Use
0.004186605573892035
Array.map(v
0.004145480554178749
Install
0.004139252655094202
JBool(v
0.004137086199870191
Objects
0.004135627220135625
CPS/Actors/-calculus/STM
0.004131412001305327
Proves
0.004126372825156604
record field selection
0.004109646280950296
select principle
0.004085920495283483
lowercase idents
0.004082277789107411
Type System

Hindley-Milner
0.004081751905824977
optional dynamic typing
0.004048580752013548
markdown/rst comments/docs
0.004034827956026723
\"${v}\
0.004026231812519688
external C functions
string interpolation
0.003979797974321813
module system
import features
0.0039753999733574625
searchability
0.0039566421413497685
Julia
Swift
Nim
Pony
Koka (algebraic effects
0.0038985140233592027
JObject(m
0.0038715448799488696
Linear/affine types
0.0038451152899995496
toString(n
0.003829111473239986
type classes
easy C interoperability
no exceptions
0.0038102926744169245
expression
0.00380627322404679
multiline strings
Uniform Function Call Syntax
0.0038057441759373426
syntactic sugar
0.003799225410868561
Haskell/Scala style)
pattern-matching
ADT
0.0037748599743384708
UTF-8 strings
Haskell-like application
0.0037651977097932473
Gradual Typing
Deferred Type Errors
0.003763673262059374
Typechecking/inference, faster execution
0.0037384747534187717
null
annotations
0.0037372551486619305
indentation-based syntax
0.003719649928216634
uppercase Typenames
0.003718596066616365
lasca -e --mode dynamic hello.lasca
0.0037084772522718327
non-blocking IO
0.003687083535453386
binary


type inference
dynamic typing mode
0.0036863034249095747
Java/Python-style)
annotation-based extensions
0.0036060371907582463
actor/green thread
0.003552105626574429
Liquid Haskell

Memory Management

GC
0.0035293760668614897
ident
0.003492485089330524
concurrent mark
0.003492239918865079
macros based metaprogramming
0.0034687423345960886
function argument type annotations
0.0034647197720102814
semicolon inference
0.0034557728207679677
Full program optimization/reflection
important things
0.003451231969654901
JNull
    | JNum(n
0.003435607651930473
HAMT/CHAMP
0.0033831404206471445
multiline lambdas
TypeScript
0.0033784724498415915
way
LLVM backend
JavaScript/WebAssembly backend
0.0033725850615138144
*
0.0033348436331947077
compile-time and runtime reflection
0.0033258656703511833
things
0.003301348173554312
\"${k}\
0.003274114594832138
jsonToString(v
0.003247372538512582
instant code generation
0.0031657465662147245
chat
0.0031600461665395817
Go/Rust panic style errors
0.003155131783800729
IDE-friendly (intellisence dot-autocomplete
0.0031510513355413644
IDE integration
0.003144996694646431
more freedom dynamic languages
0.0031100160687649397
~!@#$%^&* symbols
default immutability
string interpolation
0.0031043206441915346
native or via LLVM/emscripten)
GraalVM backend
0.003101353071905549
install haskell-stack

stack setup

Setup LASCAPATH environment
0.003090075500366771
instant compilation/execution cycle
0.0030747683749039172
src
0.0030605433415931645
idx.readVar
0.0030504093452130335
Ubuntu

Requirements
0.003027318733582881
>
0.003008318768868926
s} }"
        }
    JNull -> "null"
    JNum(n
0.0029965914403829266
String.join
0.0029899245465457337
wc
0.0029842405998179345
sources
0.002962039203402872
static type checking
0.0029064365165192073
install llvm-hs/llvm/llvm-6.0 #
0.0028874172195951352
strict functional programming language
0.002859175197609482
boxing
0.002826732542661427
Scala
Haskell, Liquid Haskell, Linear Haskell, Idris
OCaml/SML/F#/1ML
Clojure
0.0028200455238922475
light, non-symbol-polluted syntax (Python)
indentation-based
readability
0.002813972698068685
examples
0.0027361889427304264
hello.lasca

lasca --exec examples
0.0027124638448588786
apt install llvm-6.0-dev libgc-dev zlib1g-dev cmake
0.0026915755527369503
install
lasca -e examples
0.0025895056030624105
~/.local/bin directory
0.0024329095644643325
sudo add-apt-repository universe
0.0022993055462252852
