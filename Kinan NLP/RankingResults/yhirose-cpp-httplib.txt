auto numbers
0.028790141457019358
auto res = cli
0.024702569302744275
req
0.021290594180779585
res
0.019975492640595213
form data field
0.018161093011215258
size_t data_length
0.014858186673471215
text/plain
0.014534834060135293
Response
0.013248930696541985
signal handler
0.012599986696230652
httplib.h
0.012095973511179952
const httplib::Request
0.011105658454311957
cli
0.010913716338501205
Server svr
0.010111706193036333
content
0.009415959056782362
#
0.009124595955686968
cli.set_ca_cert_path("./ca-bundle.crt
0.0089914784345839
request
0.008925610347005848
data_length
0.008920677548533656
Put("/resource/foo
0.008400265236083141
Default thread pool support
0.008257708016068836
directory
auto ret = svr.set_mount_point("/
0.00792766579751428
DataSink
0.007807544221265044
Basic Authentication
0.007694145626101563
one
0.007312373614420955
Get("/hi
0.007070887524315534
ret
0.006778394710440278
response
0.00661327431731782
seconds
0.0064834381767257
res->status
0.006473992670817151
default
0.006472140780694973
SIGPIPE
0.0064230399473425214
std::string body
0.006304249226456993
//
0.006076918345876079
httplib.h file
0.005944299607598418
NOTE
0.005727938415541506
CPPHTTPLIB_OPENSSL_SUPPORT
0.005692275253003289
Error handler
0.005535362105230704
body.append(data
0.00551746039744328
server
0.005390535992150625
path
0.005341008900197674
Windows
0.00528620145095288
httplib::Client
0.005256898202525442
./www
0.005173720821015075
OpenSSL library
0.00510112641812306
way
0.005083941481403108
res->body
0.005007807720138716
Get("/
0.0049594267976909995
c
0.004790916308450305
versions
0.004734415293982422
uint64_t total
0.0045949102089489985
text default
0.004576181594505129
Remove
0.0045128373752087135
return
0.004438244362029957
latest Visual Studio
0.004416694422591498
cpp-httplib
0.004388367945552031
.h
0.004298734690873378
sizeof(buf
0.004191067606566979
public TaskQueue
0.004171508226803492
snprintf(buf
0.004039384672523135
sink.done
0.003938888350449397
process
0.0038949077101664608
MIME type mappings
0.0038755758680149837
res.set_content(buf
0.0038365220116550725
SSL Support

SSL support
0.0036860386249796856
uint64_t len
0.00363990984791681
Range
0.0036125677102593246
DATA_CHUNK_SIZE
0.0035865811728137877
Default
0.003559587707781014
const char
0.003554344109638064
Timeout

svr.set_read_timeout(5
0.0035286275731191384
MultipartFormDataItems files
0.0034159935313027375
svr.new_task_queue
0.003411380548132089
Server example
0.003400328532660638
Mount
0.0033877348833840546
bytes=1
0.003262801159425995
EXTENSION
0.0032353766499492354
message
0.0032030927991317125
res.set_content("Hello World
0.0031839333597281074
OpenSSL
0.0031589763103660037
./www1 and ./www2 directories
0.0031451468420351427
connection
0.00313789731276471
res.set_content_provider
0.0031237840923703827
%lld bytes
0.0030674953373726983
Split
0.002976854832041813
application/json
0.0029729352687689094
Post
0.002966569329655612
HTTP
httplib::Client cli("http://cpp-httplib-server.yhirose.repl.co
0.002923057377758293
xslt+xml
mp4 video/mp4 xml application
0.0029165965738585154
HTTP
httplib::Server svr
0.002844364488228081
std::exception
0.002839250580297804
errors
0.00283610131456623
Extension MIME Type Extension MIME Type
css text/css mpga audio
0.002776994853142432
req.path
0.002762843725169063
Read
0.002672655957980549
Write
0.002669899038151203
Result::error
0.0026503741939975234
class YourThreadPoolTaskQueue
0.0025861783854945956
e
0.0025738473218371418
libssl
0.0025672264891897587
list
0.0025637137286406765
cli.set_write_timeout(5
0.0025570754797333887
!
0.0025492812264698217
error
0.002541815369457419
BindIPAddress
0.0025191210461185235
ExceedRedirectCount
0.0025127150828086016
user
0.0025096520116741545
SSLLoadingCerts
0.0024925630580153067
YourThreadPoolTaskQueue(size_t
0.002449449685295266
std::min(length
0.0024436089069830285
SSLConnection
0.0024370361360475544
folks
0.002432152164789563
more detail
0.002426547763063792
Success
0.0024242856510728952
Constructor
0.0024208038028948504
need
0.002419133845290526
sink
0.002417721890850184
great contributions
0.002407872060548423
https://github.com/google/brotli
0.002383151881403217
libcrypto
0.0023735616151646694
sink.write(&d[offset
0.0023621274745865423
Necessary libraries
0.0023499476980892906
CPPHTTPLIB_BROTLI_SUPPORT
0.002341807934951329
script
0.002340352024483469
Unknown,
  Connection
0.0023390155627322777
svr.set_write_timeout(5
0.0023387389017385522
Cygwin
0.002338324508331459
compression
0.0023093702265757302
.Get(R"(/numbers/(\d+
0.0023067438578246876
Post("/resource
0.0023003786407349066
_
0.002292264999307448
multi-threaded blocking HTTP library
0.002283114704851081
feature
0.002274432589098312
YourThreadPool pool
0.0022732807854629615
SSLServerVerification
0.002269477154435132
libz
0.0022694150468372766
CPPHTTPLIB_USE_POLL
0.00223953109001292
host
httplib::SSLClient cli("localhost:1234
0.0022388314237153798
files.back().content.append(data
0.0022349659179073766
EXPECT_EQ(200
0.0022328500875968735
pool_.start_with_thread_count(n
0.00221947875478713
runtime
0.002215392162831944
scheme
0.0022140508327678507
scheme-host-port string
0.0022126695201002723
CPPHTTPLIB_ZLIB_SUPPORT
0.0022118575796223703
Special Thanks
0.002193009257731519
multiple interfaces
0.002192083526087556
IP address
0.002178066804686228
Options
0.0021766813153932738
cases
0.00217660940423844
xhtml+xml
jpeg
0.002174912053398042
specific network interface
0.0021725921456387945
operating systems
0.0021719676775430077
Interface name
0.0021712876598502244
Get("/world
0.002165485920805221
ThreadPool
0.0021558965659204004
cli.set_follow_location(true
0.002151837722271729
response.status
0.0021480809960179965
svr.set_file_extension_and_mimetype_mapping("cc
0.00214171058476731
Yuji Hirose
0.0021396251181117357
svr.set_keep_alive_timeout(10
0.0021387118425041625
content_reader
0.002137958067069395
svr.set_file_extension_and_mimetype_mapping("cpp
0.0021356704723184956
e.what
0.002128812951213841
res.set_content("world
0.0021209505529444727
\"world\
0.0021091526405157936
socket
0.002107709941117872
h\ne\n\nl\nl\no\n
0.0021046885143705192
hello.txt
0.002099959119853721
data](size_t
0.0020938208035434494
enqueue(std::function<void
0.0020933969274971724
true\n}\n
0.002090163562588184
Get("/stop
0.0020886178155237467
svr.set_idle_interval(0
0.0020878557424192415
level
0.0020850366041797125
cli.set_read_timeout(5
0.0020847084644859174
cli.set_decompress(false
0.0020824343864973976
xht application
0.0020811606329506245
Expect
0.0020685287547674014
2nd order
0.002061233637501774
License

MIT license
0.002055256063343513
Get("/stream
0.002053394794240751
Compressed data

Use poll
0.0020527192287814276
svr.set_file_extension_and_mimetype_mapping("hh
0.0020500143352878493
sink.write(data.data
0.0020440662862377984
Post("/content_receiver
0.0020394474127376815
bytes=0
0.0020389963306463466
new ThreadPool(12
0.002034843494370983
internal communications
0.0020304320256051495
Server
httplib::SSLServer svr("./cert.pem
0.002030410865777795
fn
0.0020276951519887713
jpg image/jpeg xslt application
0.0020190689332475966
User defined file extension
0.002015437373081092
./www2
0.0020149620241521064
virtual void shutdown
0.0020084396931808546
program
0.0020023400020666967
regex
0.0019982140053015243
text/event-stream
image/svg+xml
application/javascript
application/json
application/xml
application/xhtml+xml

Zlib Support

gzip compression
0.0019936472380060904
Get("/hello
0.0019925711123585815
host
0.001991408012540895
override
0.0019886311517073613
std::thread::hardware_concurrency
0.001987188663327357
req.files.size
0.001985985581885786
files.push_back(file
0.0019808255083097913
Get("/body-header-param
0.0019782328166669124
C++11 conformance
0.0019743705122010026
cli("localhost
0.0019738349967594734
CPPHTTPLIB_THREAD_POOL_COUNT
0.00197279346843033
client
svr.set_file_request_handler([](const Request
0.0019663342819463987
usage
0.001961817430095345
req.is_multipart_form_data
0.0019568749963224438
namespace httplib
0.001952694338659911
cli.set_keep_alive(false
0.0019480848598950311
Accept-Encoding
0.0019457599216356814
content provider

const size_t
0.0019452162219571823
Post("/person
0.001944114418965148
optional arguments
0.0019423239252696913
header
0.001940270614916985
file1
0.001934595327053334
h
0.0019337055966509274
specified base directory
0.0019281602927355822
file.content
0.0019217825114216103
data->size
0.0019164063522736307
version 1.1.1
0.0019131462899921099
gzip
0.0019124262385546834
file2
0.0019109025186192482
file.filename
0.0019023579670344086
simple toy
0.0018981866622573137
data.size
0.0018962736788575266
milliseconds
0.0018960984317502494
data](bool success
0.0018950209561235465
SSL
0.0018918354181490064
svr.stop
0.001890789518328051
cli.set_proxy("host
0.0018892171910421455
Get("/range/32
0.001884308155270345
available port

int port
0.0018834726612195689
select

select system call
0.0018776300529897562
red;>%d</span></p
0.0018769469915511827
followings
0.0018757885426528213
./key.pem
0.0018716179423703522
cli.set_basic_auth("user
0.0018697805131884185
MB

Server-Sent Events
0.0018642787211694475
Client

#define
0.0018580209543146214
sink.write("123
0.0018566033778510652
your_logger(req
0.0018484350365007133
cli.set_digest_auth("user
0.0018469787472581239
cert verification
0.0018375157030020755
sink.write("345
0.001836002265477516
httplib::make_range_header({{1
0.0018286905313975761
body.size
0.001817023320690692
value
0.0018040269591287398
std::vector<char> data
0.001800802176336578
help message and exit
  -e EXTENSION
0.0018001036246663798
Pull requests
0.0017980964763146157
Redirect
0.0017978445596224866
sink.write("789
0.0017936322824337013
HTTP headers
0.001779253722537972
bytes
0.0017700712887603089
POST
0.0017672465782054207
file3
0.0017671270454840127
tar
0.0017652866435992117
Content
0.0017633651688682877
int main(void
0.0017526250720013591
Expectation Failed response
0.0017480129436878728
httplib::Params
0.0017426018808873543
final status
0.0017393174968448038
static file server methods
0.001733491603547872
req.has_param("key
0.0017324610264492137
-1
0.0017277722151070366
sink.write(body.data
0.0017237256685441018
Simple examples
0.0017214706659215051
Windows.h
0.001720342044874804
cli.set_proxy_bearer_token_auth("pass
0.0016968499906282052
application/gzip
webm video/webm zip application/zip
mp3 audio/mp3 wasm application/wasm

File request handler
0.001693362797909821
httplib::make_range_header({{100
0.00168701085928222
application/x-www-form-urlencoded
0.001637012754766758
auto res = cli.Get("/hi")) {
    if (res->status == 200) {
      std::cout << res->body << std::endl
0.0016348012441581815
john
0.001622121838373705
webm
txt text/plain wav audio/wave
vtt text/vtt
0.0016080220838369914
rss+xml
0.0016042436175549356
WIN32_LEAN_AND_MEAN
0.0015969921570705356
text2
0.0015865998988421133
Progress Callback

httplib::Client client(url
0.0015556336471734826
otf font/otf
html
0.001498858495529975
code
0.0014984598397000167
js application/javascript
webp image/webp json application/json
ico image/x-icon rss application
0.0014599154369988377
bmp 7z application
0.0014140008705409626
C++11 single-file header
0.0011368698757264761
