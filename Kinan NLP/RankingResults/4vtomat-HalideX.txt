Halide
0.04970481090128298
Hexagon
0.024721725700769484
build flags
0.0180892691972977
^
0.017551392994974546
various code generations
0.01407638736485888
Windows
0.013669640460302132
example code
0.01327741729640714
Ninja
0.011410671938858708
target
0.010424139304736731
modified version
0.010146065093411203
tutorials directory
0.009718533400732357
Linux
0.009299746482127762
number
0.009070374695398347
CMake
0.00890980423220048
Visual Studio
0.00863249557114432
LLVM project
0.008546494878521035
clang
0.0078017158629663285
Python binding
0.00758228091350548
llvm
0.007425806174015088
vcpkg install halide
0.007207569911241255
% cmake
0.006901010743244009
active platform
0.0067272607425455455
C++
0.006717178006938595
HVX
0.006689817724040197
make
0.006595143428816124
default version
0.0064872559907182695
time
0.006376145817158174
D:\
0.006295143937349268
vcpkg
0.006276938129596422
async scheduling directive
0.006192255351048424
above instructions
0.006159487324538667
=
0.006110931376926207
trunk
0.006100798465893273
versions
0.006037729441488855
simulator
0.005967955469044657
path
0.005909263174599526
Ubuntu
0.005596928553842079
shell environment
0.005547509650089267
Halide pipeline
0.0055306977965343725
macOS
0.0053576598151408245
full support
0.005303854705193082
JIT-compile it
0.005301366291268167
threads
0.005210617820192549
additional IRs
0.005163779056935392
Halide

Halide
0.005120477936514733
MLIR 
dialects
0.005076655113926329
Android
0.005053997269300991
compiler library
0.004944071623279975
tested host toolchain
0.0048071045311153734
tools-extra ^
0.004745355236978987
output
0.0047311917493951675
parallel
build
0.004601541591542653
+
0.004572495817034978
D:\Halide> cmake
0.00454350918420425
dependencies
0.004473247241919799
MLIRX
0.004449983459780952
-DLLVM_ENABLE_EH
0.004343357415056446
writing
0.0042333160035628965
NNN
0.003944092920776805
C++17
0.003854605473231311
-DLLVM_ENABLE_ASSERTIONS
0.00377977953923907
repository
0.0037675465205294525
Architectures
GCC 7.5 Ubuntu Linux 20.04 LTS x86
0.003739619248830492
correctness
0.003721934737388952
apps
0.003701348689524792
information
0.0036826954495658227
MSVC
0.0036579885521925825
LLVM_ENABLE_PROJECTS
0.0036483579468636895
AOT mode
0.0036430678214151263
CPU architectures
0.0036329009571095397
tests
0.00360456330679552
-DCMAKE_BUILD_TYPE
0.003568106202527407
tree
0.0035410607034347457
more detail
0.003539572542378899
binary releases
0.0035281607680487494
Other package managers
0.003489575833768583
libc++
0.0034765438496838583
binaries
0.0034600277912906876
high-performance image and array processing code
0.003442575561379536
experience publishing packages
0.0033711038426447876
mileage
0.0033684663224129523
device
0.003361654747356101
OS
0.0033141150033527984
lib/cmake/llvm
0.003310398268315008
/location
0.0032905440686542063
installer
0.0032808488217711323
minimum Halide backends
0.0032760280808037
AppleClang 12.0.0
0.0032521351277308504
programming language
0.003239763186326941
C:\Program Files
0.0032180058228025565
variable
0.0032172141898791184
build system
0.0031638516367443995
multi-level dialects
0.0031521385140483266
-Thost=x64 -A x64
0.0031460269761557098
Halide/apps/blur
0.003072361519900607
Download
0.003061967485237839
builds
0.003023859138854115
Halides AOT compilation target
0.0030200681139669555
suitable system-wide version
0.0030149576597218136
MSBuild
0.0029829553243218097
branch
0.002953381167237977
environment script
0.0029107139035985823
hexagon-32-qurt-hvx
0.0028757049874310408
Clang 9.0.0
0.002803899820065263
terms
0.0028005292429219668
_ feature
0.00277799810647814
trace
0.0027463561742039734
ClangCL
0.0027135656175188987
indices
0.0026898335056739194
OFF \
        -S llvm-project/llvm -B llvm-build
% cmake
0.002671992603762554
optimization
0.0026718191438537676
load
0.002664404816464652
performance
0.002654687963377737
OpenCL
0.002616592218107568
windows libjpeg-turbo
0.0025990219872819562
Debian
0.0025321160095870005
python
0.0024733605655624965
OpenGL Compute Shaders
0.002468050554664657
error
0.0024402861499899257
option
0.002429669188800824
cores
0.0024193202702863068
BufferStore
0.0024056880113809674
CUDA
0.0023913541336484695
instance
0.0023800966124173694
PPA
0.0023777499117014376
differences
0.002369606858555691
github
0.0023637501136163684
point
0.002356745688675429
store
0.0023553294572829114
parallel jobs
0.002354263301132479
more opportunities
0.002351842669554322
mkdir halide_build
% cd
0.002348974180493358
transformations
0.0023364933027074587
folder
0.0023332199244292732
HL_TARGET
0.0023142634153642716
Release
0.0023103187759783506
BufferLoad
0.0023064980599058977
Android, iOS, Qualcomm QuRT
GPU Compute APIs
0.0023039761569421694
properties
0.0022966141176305297
HL_JIT_TARGET
0.002293616964999996
work
0.0022747811895789437
LLVM_DIR
0.0022707917519155228
utils/HalideTraceViz.cpp
0.0022531083649705162
Conan
0.0022462609646585812
set
0.0022453308212736704
original vendors
0.0022418221318430747
users
0.0022384917477678455
CentOS/Fedora
0.0022220536037613494
byte vector
instruction extensions
0.002217264225897766
x64
0.002215203081578826
lld
0.0022142076409050245
Debug
0.002204140936275416
Halide_REQUIRE_LLVM_VERSION
0.0022028148843547483
MacOS
0.0021996112928748045
disk space
0.002195817678065536
pseudocode
0.002189700336422174
ARM64
0.0021885072494816846
selecting Installation
0.0021867857605496165
500.2.76
0.002183578916415608
program
0.002181868075983863
many popular platforms
0.0021727659687256987
Ninja -DCMAKE_BUILD_TYPE=Release
0.0021678631298073505
parts
0.0021580116669734205
C ABI
0.0021568077082725597
Hexagon Vector eXtensions
0.0021541176534050775
lot
0.002153923413092744
Compiler Version
0.002148701906987956
caveat
0.002148396257459825
Subsets
0.0021461496074181657
/tests
0.002140962821733605
QPM
0.0021278103785821846
CPUs
0.0021247122038210993
mistake
0.0021225232261556726
-S
0.002118348634677097
appropriate
HVX vector instructions
0.0021162878765527606
issue
0.002114950350044829
supported
combination
0.002114711513029228
Higher numbers
0.0021145883852700153
object file
0.0021118492975440674
sets
0.002110364804487637
D:\Halide
0.002106059783382678
download
0.00210251725481429
same process
0.002102125191579778
Qualcomm Snapdragon
845/710 devices
0.0021012547319589794
one(keep
0.0020987680717407652
ramaining
0.002097130262734216
README
0.0020928507395910597
Apple Metal
0.0020913991486151942
Arch
0.00208562915377239
targets
0.0020829031704354753
maximum
0.0020827123112558414
compatibility problem
0.002079504888674049
Compiled AOT pipelines
0.002079115530768189
above cmake commands
0.002075083416738314
respective project
websites
0.0020686735573981294
Homebrew
0.0020680943477092936
polyhedral analysis
0.002067380008618294
D:\Halide\build> ctest
0.0020542566001690646
HL_DEBUG_CODEGEN=1
0.0020522452395808554
thread
pool
0.0020487660985824114
addition
0.0020385363856494764
representation
0.0020313785255669805
PRs
0.00202965859781968
framework
0.002026505877730089
LLVMConfig.cmake
0.0020247865090969887
active, first-party
0.002022375339644022
optimizations
0.002021127525738655
notes
0.0020197081691615483
libstdc++
0.002018686450930837
binary outputs
0.0020132877728206507
generated headers
0.002011570749247672
column
0.0020071769885386024
data
0.001997620084302237
Hexagon object files
0.001994139848234055
latest 12.0 release
0.0019929915523134853
https://buildbot.halide-lang.org/master/#/builders
0.001991995835235542
run_tests
0.0019847564284657757
compliant C compiler
0.0019846864365840903
cases
0.0019818962597943682
llvm-11.0
0.0019761098999480507
place
0.00197449149536088
memory
0.0019694170385120757
X86, ARM, MIPS, Hexagon, PowerPC, RISC-V
Operating systems
0.0019665828138034545
main advantages
0.001965194070061628
further 
loop analysis
0.001961575072650902
SDK/Hexagon_SDK/4.x
0.001958547396056189
maintainer
0.0019507138114379296
modern machines
0.001949668690116195
suitable binary
release
0.0019490318108780036
scenarios
0.0019469137362827143
other package distribution platform
0.0019428588725300838
r19c
0.0019416273319927684
WebAssembly
0.001939784921394141
x86 linux
host
0.001934057325662686
x86)\Python38
0.0019331665256821667
different generator
0.0019292234628844294
MULTIDIM_BUFFER=1
0.0019213104755964536
older XCode
0.0019205530719576301
examples
0.001914786739345726
D
0.0019131520819958793
Halide(described
0.0019105023564804846
GB
0.0019098550721780073
bit x86/ARM Ubuntu Linux
0.0018913623154600536
Hexagon Series 600 Software
0.0018870848425198653
test_apps
0.0018865275847619808
project
0.0018769093779602672
full source distribution
0.0018730257526241505
windows #
0.0018660645707666082
right
0.001865706844727685
steps
0.0018603715097728524
API documentation
0.0018598387126450753
exception
0.0018570244230732436
Build
0.0018532512469935482
vcpkg.bat
0.0018528799261002668
pull requests
0.001848824997107118
speed
0.0018464018914481689
bin subdirectory
0.0018240782646631883
D:\> cmake --build llvm-build --config Release
D:\> cmake
0.0018183573021004653
use
0.0018014184924387828
things
0.0017927760120712336
halide[target-all]:x64-windows
0.0017917883553884451
llvm-build --prefix llvm-install
0.0017792659632626835
SDK installation locationexport SDK_LOC=/location
0.0017718868177391289
vcvars
0.0017664300502880552
git repo
0.0017590565220068108
HalideX
0.0017420530561343996
Release \
        -DLLVM_ENABLE_PROJECTS="clang;lld;clang-tools
0.001740967026375486
stdio" links
0.0017391967128352736
install
...
CMake projects
0.0017039111382674038
ON \
0.0017021064345426138
blur
export HL_HEXAGON_SIM_REMOTE=
0.0017003194169732082
OPTIONAL
0.0016949257073070275
fine
0.0016748229248507796
libraries
0.001612956064214919
/src
0.0016126129240000182
GitHub
0.001592950713021608
llvm[target
0.0015828110533368579
iss/
0.0015493286112084992
HEXAGON_Tools/8.4.11/Tools/
HL_TARGET
0.0014890211152310008
HL_HEXAGON_TOOLS=$SDK_LOC/Hexagon_Tools/8.x/Tools/
LD_LIBRARY_PATH=
0.0014815496675922935
