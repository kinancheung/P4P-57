class
0.03886558315860504
auto mat
0.03820549423892002
libscran
0.025584311150654408
single-cell data analysis
0.020538059329007652
standard analysis
0.020306820221049827
example
0.01943963353065324
#
0.018175441099261128
total count
0.016796997699659085
cluster
0.015363479418764895
PCs
0.01459200960685829
variable genes
0.014481307329534085
PCA
0.01444365115921558
log-normalized expression values
0.01290040416197507
libscran library
0.012296593785045632
more details
0.011898704913431844
output
0.011865269378691883
filtering
0.011763434968286407
top set
0.011479958802994388
reference documentation
0.01132285030325682
Bioconductor package
0.011206166543523672
pairwise comparisons
0.011203460200129555
cells
0.011039306404705787
low-quality cells
0.011024548818982812
HVGs
0.010594626820752493
common QC metrics
0.010562014710716583
marker detection
0.010290425197445613
residuals
0.010248342494582235
QC step
0.009971951853468195
clusters
0.009925890223002692
Available functions
0.009788876580279576
clustering
0.009716422774388611
various algorithms
0.009027122404120427
CMake-based build system
0.008963769359176098
data
0.008957345765317102
qc_filters.overall_filter.data
0.008927529497104807
GRCh38
0.008588235837996087
auto var_res = scran::ModelGeneVar().run(normalized.get
0.0084339167720502
minimal example/data/filtered_gene_bc_matrices
0.008413700175025107
light-weight library
0.00822393161481548
C++ library
0.007778422730786454
https://github.com/LTLA/libscran
0.007673119549912434
GIT_REPOSITORY
0.0075795456844896785
pca_res = scran::RunPCA().set_rank(npcs).run(normalized.get
0.007143736225078837
scran
0.006985020008869075
interest
0.006848420673126635
libraries
0.006846481814984436
statistic
0.006758083327838737
Identification
0.006749905337833918
number
0.006675452962976192
columns
0.006650837759443692
single suite
0.0065876184391370236
summary statistics
0.006574004248327322
-DBUILD_TESTING=OFF -DBUILD_GALLERY=ON
cmake --build example --target minimal

Download
0.00651926160942431
Compile
0.006492539288853159
distribution
0.006422504935837396
Users
0.006351838175605263
variances
0.006192180399163215
tunable parameters
0.006172664249325204
selection
0.00615700902337127
executables
0.006143857577344336
trend
0.0061422918572711285
RunPCA::set_rank
0.006120969058301187
theory
0.006047735477794729
following commands
0.006037387302190923
Bioconductor book
0.006020087796193818
WebAssembly
0.005987158099608024
Variance modelling
0.005983925157793559
root
0.005978507651902866
include(FetchContent
0.005942828517037523
int npcs
0.005905151319642504
FetchContent_Declare
0.005875960584549639
filters
0.005867861908498593
scran::FilterCells().run(mat
0.005786957566463779
Filtering
0.005777885885279558
compilation
0.005742574993749548
several flavors
0.005693431849493731
pca_res.pcs.cols
0.0056653413356870155
pca_res.pcs.data
0.005580363383422767
Readers
0.00557987305200989
libaries
0.0055483109419026955
mean-dependent trend
0.0054999861033307295
UMAP and t-SNE C++ implementations
0.0054806530344240455
keep.data
0.00547381342979885
tatami::MatrixMarket::load_sparse_matrix(path
0.0054647044039666005
best_clustering
0.005445714868557791
based approach
0.0054251543078050815
core parts
0.0054228216462309485
using size factors
0.005361549884986829
Hartigan-Wong algorithm
0.005360947882230351
pca_res.pcs.adjointInPlace
0.005342254293155229
CMakeLists.txt
0.0053395515531217685
ClusterKmeans
0.005337282714472995
Quick
0.005282119824816715
ClusterSNNGraphWalktrap
0.005278930632340324
matrix.mtx
0.005229082196964954
shared-nearest neighbor graph
0.005203470511175114
other useful bits
0.0051664863871798625
multi-level (ClusterSNNGraphMultiLevel
0.005154810974580081
ClusterSNNGraphLeiden
0.005143099932465586
easy deployment
0.005138305112075125
headers
0.005119027793881867
HVG-subsetted matrix
0.0050941368726848246
first (and only) batch
0.005065021843730871
unzipped) MatrixMarket file
0.005048672076972641
other packages
0.005040228753628011
minimal-dependency version
0.005013446539347391
idea
0.004998906572315322
version
0.0049444300091106876
browser
0.004919591197611879
multiple batches
0.0048994287165790955
time
0.004895064737126994
BlockedPCA and MultiBatchPCA classes
0.004773006560630813
entire R/Bioconductor runtime
0.004751347690422212
other applications
0.004672108504254814
minimal pipeline
0.00461396471678172
Matrix Market file
0.004481571131436542
mito subset definitions
0.004380371600863244
CMake
0.004242474254712537
Unit
0.004225582864669026
mkdir example/data
wget https://cf.10xgenomics.com/samples/cell-exp/2.1.0/pbmc4k/pbmc4k_filtered_gene_bc_matrices.tar.gz
0.0042011231667239725
0m0.104s

Building projects
0.004055058638866193
