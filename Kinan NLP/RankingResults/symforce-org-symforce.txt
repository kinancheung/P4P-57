_
0.05083897077074043
SymForce
0.03044563525544948
template <typename Scalar
0.02870926864496663
sf
0.01964153182601578
C++
0.014386951302619267
Generated functions
0.010950900786368312
optimized values
0.010907427496329176
landmark location
0.010335770425477727
code generation library
0.009342737667158558
symbolic residual function
0.00872590374947665
Python
0.008196326204191154
optimization problem
0.008012890072526903
pose
0.00786266899981195
pip
0.007788038686225402
robot
0.00776885952117012
factors
0.007522853091005115
epsilon
0.007377559598436775
-
0.007352971572732053
=
0.00733701057600899
fast native runtime code
0.007282801900673532
fast tangent-space optimization library
0.007149882465128877
symbolic expressions
0.006851034403226085
symbolic mathematics
0.006667575580345875
symbolic math
0.006378336967801375
factor graphs
0.006311665717255428
Eigen::Matrix
0.006208038874694352
tmp7 + epsilon
0.005613931945417945
pose[0
0.0055603569976712015
complex problems
0.00551994108971831
Scalar(2
0.005452582156251509
j
0.005440896304423521
const
0.005435285206190933
noisy measurements
0.005348121999254134
residual function comprises
0.005202838248060715
scalar angle
0.004918574276276198
Pose2
0.004884460097552644
.
0.004867839311733953
int
0.004780185233085059
rigorous geometric and camera types
0.004610599740355206
multiple versions
0.004442525292141528
sym packages
0.00443694365346209
symforce
0.004381334091592972
CMake
0.004308422367110263
Optimizer
0.004270683111219329
jacobian
0.004022999653940791
tmp8
0.004009908167948057
P
0.0038375539384028863
num_poses
0.003788100262307623
relative bearing angles
0.0037497246921767
tmp7 = -_tmp4
0.0036621075130198674
tmp13
0.0036301921931087746
tmp14
0.0035784183035588685
simple example
0.003544214344967574
robotics applications
0.003529739217300696
workflow
0.0035126524992661378
Values class
0.003510207409008041
hessian(0
0.003476220165069387
expression
0.003460862724784967
jacobian = nullptr
0.003450008130628741
poses
0.0034343817047284256
tmp20
0.0034293014973268508
tmp10
0.0034100941126936255
value
0.003372710839503832
nonlinear optimizer
0.0033440050770450888
Skydio
0.0033401563968270256
problem
0.003331995016062191
more information
0.003324502850371146
numerical quantities
0.003252931038486668
symbolic classes
0.0031851159477108227
range(num_poses
0.003124715011745483
Scalar(M_PI
0.003078084287994981
build issues
0.0030433124171936696
Set({L
0.0030342554575492663
fast symbolic computation
0.0030134729224968637
sym package
0.0030034875914695717
pose[1
0.00300311552812691
double
0.0029991489661100293
Result object
0.00299675606617398
templated Eigen code
0.002989564306723753
terms
0.002973753665323363
Gauss-Newton linearization
0.0029263413888640966
tmp19
0.002908612357411365
cam packages
0.0028465274837946
robotics community
0.0028457118743607725
hessian(2
0.0027956354989590094
odometry
0.0027611371459089736
Linux
0.002739880578258086
tmp15
0.0027246062009463217
tmp23
0.0027181957621423367
CUDA
0.0026973093593278302
Symbolic implementations
0.002684361010264377
pose[3
0.0026442320836873217
known landmarks
0.002634853996839824
computer vision
0.002602852674903832
distance
0.002592420047989082
Scalar
) -> sf
0.002576408186612954
bug-prone handwritten derivatives
0.002574656939751253
Pose3
0.0025553800723987414
res
0.002540842126871749
keys
0.0025374850420054424
goal
0.0025372189544650967
TypeScript
0.0025366054818897394
pure form
0.0025336869303832547
local frame
0.0025216965643555618
autonomous robots
0.002521437050961825
production
0.00249082136397866
fewer lines
0.0024770396448826836
hessian(1
0.002454551498675271
error
0.002417944032728094
landmark(0
0.0024060573342564585
source
0.002375934801238153
Factor objects
0.002368485479076443
world frame
0.0023674628006020667
autogenerated Python runtime class sym
0.0023452147481042556
numerical Values
0.0023146003011494417
tutorial example
0.0023106243299174023
SymPy API
0.0023063855032624016
minimal dependencies
0.0023030582209193724
import
0.002300349228066858
optimized implementation
0.0022966549108134923
tmp2
0.0022808159731572495
PYTHONPATH
0.002248890860421018
hessian
0.0022346209391449472
numpy
0.002229792193960148
tmp22
0.0022193121295953117
factors.append(Factor
0.002204537263391171
hood
0.002197934087948336
new backend languages
0.0021925190315834095
extra requirements
0.0021532205768375716
# Odometry factors
0.0021485695100657933
iteration
0.0021391521571354844
build
0.0021193378328511507
desired features
0.0021000597947419693
clockwise
0.0020703490478681226
x
0.002066326388931185
flattening
0.0020507529858352644
recommended way
0.002040048606079818
Robotics
0.0020307898256569173
CppConfig
0.002004263681308251
counter
0.0019900737594397
axis
0.0019866394616202677
sensor
0.001927883997036247
SymForce tests
0.0019187430116992259
V2(1
0.001866715282803351
angles=np.deg2rad([[145
0.001846161447627018
dist
0.001776326620160643
Strategies
0.0017710234029523061
pose[2
0.00175361731224749
const auto params
0.0017513088350460874
Rot2
0.0017388853478042074
std::pow(_tmp20
0.0017297138946308732
leveraging sparsity
0.0017273963142246007
tmp1
0.0017194460786787125
V2
0.001696001617882017
tmp16
0.0016871382988644004
Matrix
0.0016717123286039374
codegen
0.0016688825790167503
pose_b
0.0016681589727499814
landmarks=[sf
0.0016652542267750698
V2(-2
0.0016484299352811963
Numerical Types
0.0016289919746092078
-20
0.001624394326351272
pose.inverse
0.0016241602591166306
Mac
0.0016234400202995612
tmp17
0.0016002145381348884
flexibility
0.001596810154456424
geometry
0.0015961679600786727
scene
0.0015884285752307608
body
0.001588268575126491
Import
0.0015837734283107026
performance
0.0015822522121784223
Pose2.identity
0.0015716495928711001
numpy.ndarray
0.0015702758639107996
set
0.0015624797839879764
multiple time steps
0.001561577801454665
tasks
0.0015612481689291772
std::atan2(_tmp3
0.00156084152731871
macOS
0.0015558777217532045
autogenerated, highly optimized code
0.001548577009390158
10x speedups
0.0015452386419477105
BearingFactor(const
0.0015416910538954497
common sub
0.0015401720612704917
poses=[sf
0.0015382315193373426
pose_a
0.0015379532168601341
sym::Pose2
0.0015365251905645073
namespace
0.0015310564577554683
singularities
0.0015287985036405315
confusion
0.001527653908200675
Functions
0.0015227796225100244
bugs
0.0015185871145649503
matrix type
0.0015168175408977903
std::pow(_tmp3
0.0015155593200940015
standard autodiff
0.0015126383411572957
t_body[0
0.0015121645708727363
strings
0.001509325687794656
Aaron Miller
0.001506071982954168
tools
0.001504412738524922
SLAM
0.0015028655060474385
sym::Pose3<double>::Identity
0.0014999777965149868
range(num_landmarks
0.0014983429100044624
state estimation
0.0014965286001458534
lives
0.0014962416185937582
development speed
0.0014961887114272596
position
0.0014958309922555554
Code Generator
0.001493268160695047
2D plane
0.001490944517446081
V2(5
0.001489746327955056
Science
0.0014872289291614894
sf.atan2(t_body[1
0.0014851454013640518
tmp6
0.001484060034805456
motion planning
0.0014816719155556373
tmp9
0.0014816589579319413
canonical symbolic class sf
0.0014778816140367747
rhs(0
0.001475052318966899
Nathan Bucki
0.0014700067293344078
Hayk Martiros
0.0014684711140664167
singularity handling
0.0014610539668257008
sf.Pose3.identity
0.0014590922304871133
Lie group operations
Code generation
0.0014581946401266395
jacobian(0
0.0014581210074578743
Matrix21
0.0014575006429849077
tmp5
0.0014558099828026081
alternative methods
0.0014541516340503885
Rot3
0.0014506689735661587
duplication
0.0014488479602073627
tmp18 * _tmp22
0.0014486668763290839
wraparound effects
0.001442606046242078
installation
0.001441960112263319
modeling
0.001441813227918891
GLSL/HLSL
0.0014413686482402863
V2.symbolic("t
0.0014404569781240318
landmark_body[0
0.0014400363846090542
sf.wrap_angle
0.00143955424460462
target runtime language
0.001436838523305229
controls
0.001434935433490907
constraints
0.0014333841705362774
Sponsors
0.0014319091458697005
structure
0.0014308006156925747
order
0.00143059330757848
sf.atan2(landmark_body[1
0.0014296031916915888
faster development time
0.0014288515083755208
convenience
0.0014276470446223908
results
0.0014267163174543258
scale
0.0014241189365711959
blazing-fast, branchless code
0.0014232898853392662
Support
0.0014207628112970422
respect
0.0014180035311113946
wide range
0.001415512801294393
useful systems
0.0014145851370826654
clean APIs
0.001413604534710542
bugs
Novel tools
0.001412520996428089
std::floor((Scalar(1
0.0014098378827946546
loop
0.0014090146215209663
body-frame landmark
0.0014055342508666757
orange circles
0.0014047666334074142
blue
circles
0.0014021422248426945
lie group calculus
0.001402117351807151
PyTorch
0.001400610731564126
Windows
0.0014003690736442873
world_T_body
0.001388377147914402
important note
0.0013876139563405985
tmp12
0.0013864163129291012
res(0
0.0013862722872465616
tens of thousands
0.0013847587713874865
Symbolic Toolkit - builds
0.0013823137579024726
optimized_keys=[f"poses[{i
0.0013812817348117332
central tool
0.0013794949220021183
author
0.0013787455673234153
Set({a
0.001376482719580805
pragma
0.0013760632782986956
initial guess
0.001374350851397888
Systems
0.0013712124531108246
need
0.0013702840595382448
symforce/examples/robot_2d_localization
0.0013699838794421443
limit
0.0013684219245273274
name
0.0013674643013963281
linearization
0.001366789495093313
pre-compiled C++ components
0.001359922757516365
template system
0.0013581692389078004
bearing_residual
0.0013563679465308323
symforce.values
0.0013519215768941235
visualization
0.0013517468671618213
public library
0.001349362526087416
third_party/skymarshal
0.001347368353313672
std::pow(_tmp15
0.0013465054393715053
work
0.0013462443643231534
LICENSE file
0.001344416599173587
applied science
0.0013408521503736066
identity
0.001339935317361593
simplicity
0.0013395308115769135
t_body
0.0013352493546834904
Bradley
0.0013309711038692375
atan2
0.0013279963299892908
top candidates
0.0013223763243194228
approach
0.0013209702808140524
exploration purposes
0.00131603658910922
Set({P, i
0.0013145666949373723
language


Optimization Library
0.0013133373834346737
case
0.0013130956317936701
orientation
0.0013125859545181594
3x1
0.0013078722166267208
gen/python
0.0013074003383647622
print(open(metadata.generated_files[0]).read
0.0013073890449404773
Args
0.0013060232504776576
sym::Values
0.0013020905296181964
rest
0.0013019813007939108
symforce.symbolic
0.001301833945723298
import plot_solution
plot_solution(optimizer
0.0012990767717073093
distances=[1.7
0.0012982583668488343
paper
0.0012976580042273244
Epsilon Tutorial
0.001292031858659953
Input arrays
0.0012911424087431221
engagement
0.0012895682301722383
production use
Embedded-friendly C++ generation
0.0012886296448894172
Set({d
0.0012845738463626987
@inproceedings{Martiros
0.0012792765777090555
num_landmarks
0.001277334835414515
Rot2.symbolic("R
0.0012737679739916394
PyTorch
Easily swap
0.0012735287403828673
f"angles[{i}][{j
0.0012722644585654475
symforce.opt.optimizer import Optimizer

optimizer = Optimizer
0.001271797470132394
which_args=["pose
0.0012717107258074874
landmark_body.jacobian(pose
0.0012714974989394983
pluggable jinja templates
0.0012630763004670368
landmark(1
0.001262462891079047
sym::Optimizer
0.0012595350097745087
f"landmarks[{j
0.0012586577745011816
given arguments
0.0012578401939708375
hand
0.0012573402201537809
docs
0.0012553326862531147
optimizer.optimize(initial_values
0.001249633761336051
factors.push_back(sym::Factor<double>::Hessian
0.0012491549407318654
Data
0.001245299201823471
Total ops
0.0012451554208646296
Apache 2.0 license
0.0012437558399171005
angles[i][j
0.0012405322417292682
other groups
0.0012379577831525472
setup.py
0.0012364032902931782
sym::kDefaultEpsilon
0.00123557726957313
piece
0.0012323615904419685
Eigen::Vector2d(1
0.001228248413144801
Scalar(4
0.0012268675674119555
std::pow(_tmp14
0.0012254640425694615
CI
0.0012224548901799963
RSS
0.0012197262018724983
beginning
0.0012189362706599262
particular Sim(3
0.001218267810531453
linters
0.0012165930553810704
Set({d, 1}, 1.4);
const std::array<std::array
0.0012149019365551112
Eigen::Vector2d(5
0.0012148106858388115
Eigen::Vector2d(-2
0.0012143443609938737
Scalar
 *
 * Outputs
0.0012090569640518627
major desired contributions
0.0012073532234838343
free and open-source library
0.0012054880199957373
beta stage
0.0012050527270773808
targets
0.001203562193897039
approximate or architecture-specific implementations
0.001200701486776409
method
0.0011961505863207556
additional values
values
0.0011958286685627866
sym::OdometryFactor
0.0011925766173853777
sym::Pose2d::Identity
0.0011910191983119944
std::vector<sym::Factor
0.001189647557930268
sym::BearingFactor
0.0011875455056794915
rebuilding
0.0011728129838363356
keys=[f"poses[{i
0.0011666774697161582
L
0.0011638114788116451
issue
0.0011629578856126184
conda-forge gmp  # Conda

SymForce
0.0011559346253833505
# Mac
conda install
0.001147242829899031
mkdir build
cd
0.0011442635842130366
Optimize(&values
0.001144239223952394
cmake
0.0011364104465738253
virtual python environment
0.001133668365004522
WebAssembly compilation
0.0011279636865987395
Optimize!
const auto stats = optimizer
0.0011209209907121981
install libgmp-dev            # Ubuntu
brew install gmp
0.0011202657929469226
angles.size
0.0010928013593946068
ISPC
0.001087608661678787
