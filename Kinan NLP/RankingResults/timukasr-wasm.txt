JavaScript file
0.06804038928651529
LKH example
0.06117703455571352
WASM=1
0.044046309189064554
main function
0.038032146544917836
Wasm
0.03471553554450197
trzeci/emscripten
docker run
0.03337699137821736
Open
0.030725033287898953
Outputs
0.0295170111799915
-O3
0.0285658455924947
a.out.wasm - WebAssembly binary
a.out.js - JavaScript file
0.027152152648325784
yarn
0.027007280100424982
Download
0.02556612163910213
Optimize
0.020079334044369217
effective implementation
0.01983525154030024
flags
0.01967106436946743
EXPORT_ES6=1
0.01928834454389206
More info
0.018638166106513376
export ES6 modules
-s EXPORTED_RUNTIME_METHODS=["FS
0.018480151968326815
modules
0.01839333964534571
MODULARIZE=1
0.01828035445288146
Emscripten
0.018144396700586318
Lin-Kernighan heuristic
0.0181411381489651
module
0.0180209557582481
/lkh.js
0.017981075243935458
asm.js
-s EXTRA_EXPORTED_RUNTIME_METHODS=["cwrap
0.017850053744214715
Setup
0.01768055480618301
traveling salesman problem
0.01737073277813979
call
0.017232447556455525
undef HAVE_GETRUSAGE
Add
0.01704997407206055
lkh/src/SRC
0.016727607368683235
complexity
0.01656525335272354
Docker image

docker
0.016511609437610198
Option
0.01642475642588763
Input/output
0.016348155193735385
support
0.016145789136697557
line
0.015602787864200442
cwrap() function
0.015406235986528191
pwd}:/src
0.015116138379000946
emscripten emcc <emcc options here>${pwd
0.014820457910592985
http://localhost:8080/lkh.html

General

Settings
0.014222585376554167
WebAssembly and Emscripten

Setup Emscripten

Option
0.013943653244977313
BUILD_AS_WORKER=1
0.013851121680595041
Quick intro
0.013276585110612327
emmake
0.012722348124062314
Linux

Fibonacci

Compile WebAssembly
0.012255728980485504
