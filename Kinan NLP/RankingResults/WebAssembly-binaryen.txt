Binaryen
0.03701180054078067
WebAssembly
0.0256912376775335
wasm minification
0.021425381383454366
wasm-opt input.wasm
0.0172726009074426
re
0.015894334228584207
Tree structureBinaryen IR
0.014207165462185296
code size
0.013044739313101999
optimization
0.012405942528316633
block
0.011875128051790498
WebAssembly binary
format
0.010370816657396755
concrete value
0.010056836211272617
function
0.00998336094945394
example
0.008925938492768671
JavaScript
0.008853744233997074
wasm2js
0.00820998794480407
names
0.00786421504863541
Microsoft Visual Studio Installer
0.007469822545343921
ES6 module format
0.007218219387483583
many passes
0.007069990527282974
more than one functions
0.007064358515981999
optimizations
0.006680015317076983
Consequently Binaryens text format
0.006033033788636191
shell
0.005804888329217066
tuple types
0.005747236731997641
tests
0.005599763802560223
CoalesceLocals - Key
0.00558245325303051
pass
0.005329405112530088
other tools
0.005121387644098473
compile time
0.005037813053895577
CMake
0.004942952070511597
result
0.004923568392323993
order
0.00491264376978227
s-expressions
0.004879125994757667
list
0.0048695276655264805
locals
0.004633003389721133
JS
0.00462797846601682
various
pass options
0.004532583908549839
C++
0.0045292915587121785
contributing instructions
0.004508848747178909
more details
0.004354067393324062
wasm-ctor-eval
0.004350162014163197
corner cases
0.004295033908650662
node
0.00428518259041624
user
0.004246150233800979
compiler
0.004224122269461014
tree
0.0041918076453108495
optimizer
0.0041075477010414745
output
0.004065331787956963
i32
0.00398730788592366
&
0.003987056274593277
other work
0.0039502639141426816
import
0.003924654848584637
final lowering
0.003900178427488494
interpreter
0.0038163706454948966
blocks
0.003757180286337376
load/store
0.0036707946394287346
Emscripten
0.0036681338083454037
git submodules
0.003655310938896191
imports
0.0036308079710845
specific VM
0.003620177613708046
pipeline
0.003603900037664097
projects
0.003586022137774392
nodes
0.003579791579925677
Interned strings
0.003570916977313844
parts
0.003567970630510536
things
0.0035530445125237695
branch targets
0.003506127971329196
Windows
0.0034722980192264425
transformation
0.003469208615268441
global context
0.0034351530456059173
WebAssembly-like
form
0.003393254915008542
input
0.0033662668832109663
point
0.0033255033219837717
y
0.003290954790586306
single header
0.0032126794784065786
few differences
0.003165821460843771
loops
0.0031162324228754053
Targaryen
0.003078487338000431
Grain
0.0029841920442717777
memory
0.002797494449159924
string
0.0027928526073780764
C
0.0027614208723608083
lists
0.002760786733299083
loop types
0.0027268503460417515
builds
0.0027266171410633556
set
0.002698436054513891
WebAssembly files
0.0026962938219833297
child
0.0026714732644929824
number
0.0026585222711606057
WebAssembly

Binaryen
0.002656377347880152
globals
0.0026548916330812913
LTO
0.0026422262380056257
arms
0.002636718072146738
operands
0.0026226258249550036
project
0.0026218006727634904
ninja
0.002605608931470892
change
0.002593414092531012
x
0.0025771651463768106
native support
0.0025686256834374474
WebAssembly spec tests
0.0025598522123213433
numeric indices
0.0025557770532427387
motivation
0.002554707168701204
bin/wasm2js [input.wasm file
0.002549483129232817
src/wasm
0.0025430716124173274
multivalue instructions
0.002506696792492068
property
0.002502428716026789
path
0.002498974231477549
side effects
0.0024941827786407367
single
operand
0.0024846401109706704
non-block nodes
0.0024654699531820334
br
0.0024634243847863036
unreachable type
0.002435241730378767
parameters
0.002427806821880762
contents
0.0024229342095073696
CodeFolding - Avoids duplicate code
0.0024132660208406246
calls
0.002411370273994935
%
0.002410306671501035
gtest
0.002400708545886235
table
0.002384534057283573
added constant
0.002362003893255198
OptimizeInstructions - Key peephole optimization
0.002357131654876577
structured form
0.002355386297717705
local transforms
0.002332301693775994
expression
0.0023305461919667053
Node.js versions
0.002325603923365816
intrinsics
0.0023120806326950554
Binaryen IR

Binaryens internal IR
0.002309514982136503
tool
0.0022969662035318785
stack machine
0.002283094214530157
reason
0.002267712970530534
general control flow graph
0.0022570589458499346
bin/wasm2js test/hello_world.wat
0.0022347609220979463
arena
0.002233705981049889
overview
0.002228784734605587
Binaryen IR
=> wasm
0.0022001856154057918
simple C API
0.0021853174400842178
spec test suite
0.0021800156190360377
small program
0.0021629052866559886
dependencies
0.0021517110012779185
unoptimized file
0.002139238111260899
compact data structures
0.0020932076596613092
confusing errors
0.002088878764421244
semantics
0.002071617606806452
sum
0.002059981820305545
large program
0.002039090534247088
limitation
0.0020075141290407067
main JS file
0.0019902167269283586
simple
round-trip conversion
0.001964809886803279
name-types.wast
0.001956064138207418
runtime state
0.0019389117356768237
TypeScript
0.0019330996037008085
Asterius
0.001910970653436725
pip
0.0019003537564771728
Haskell
0.0018948212911421819
location
0.001883524741978961
variant
0.0018184986441302344
Blocks
0.001797835279987895
sense
0.0017921808472818816
arenas
0.001747209180781412
V8
0.0017374201878325205
i64
0.0017282674140962225
Branch targets
0.001718609650516838
installation
0.0017148268218435151
Allocate
0.0017121657714686872
experience
0.0017110094258525664
cmake
0.0017076174427981896
consequences
0.0016913969459522852
binaryen.vcxproj
0.0016865730293561378
emmake
0.0016695132486284309
drop
0.001650985512339208
alternative
0.0016477767889520054
Experiments
0.0016450028561668048
MergeLocals
0.0016415056353517106
case
0.0016326585329826803
loads
0.0016294857893224782
other
optimizing/transformating toolchains
0.0016290269988424632
linux
0.0016286079651267565
AssemblyScript
0.0016227088342268838
global $global (mut i32
0.0016215276226966547
patterns
0.0016179895468303846
other hand
0.0016135272195784952
github
0.0016092545204119118
rawgit
0.001600569231184204
legalization
0.0015997510742297905
f64
0.0015980985791881487
top level
0.0015961667966190942
Substitute VISUAL_STUDIO_ROOT
0.0015897238645159785
Fire
0.0015870856140368455
PickLoadSigns
0.0015829297683963301
overlap
0.0015790780533214315
bin/
0.0015788623230683124
combination
0.0015787779588851756
Blood
0.0015751834207579137
way
0.0015739845239805582
Code
0.0015670854560380172
add(x
0.0015655940671321044
toolchain utilities
0.0015622253641682502
Passing
0.0015613237779033577
inlining heuristics
0.0015563055523036009
outer one
0.0015529081162964017
Compilers
0.0015524853906553765
SSAification
0.0015479352325329578
ALL_BUILD.vcxproj
0.0015479069233918312
local.set
0.001545841941897119
address
0.0015426849906813992
mkdir
0.0015416489721508944
testcase reducer
0.001533881437382678
minification
0.0015335409661548336
stores
0.0015332982617882985
x64
0.0015318452744079011
mind
0.00153079711875658
Bugs
0.001529780369372787
CSS
0.0015185100700262923
lot
0.001517031300462148
bunch
0.0015151201831015192
RedundantSetElimination
0.0015137331047146837
PATH
0.001513558686484648
pointer comparison
0.0015135501798088612
MergeBlocks - Merge
0.0015125839663327942
generator
0.0015063147858563628
arm
0.0015034617221064122
repository
0.0015031810326837005
Relooper algorithm
0.001496304619907884
SDK
0.0014944697596698774
end
0.001493232588225081
middle
0.001492025942484079
reference
0.0014900113377775864
nesting depth
0.0014898632755392088
Types
0.0014893995806615657
console
0.0014844661687401569
convenience
0.0014829383597129789
Wasm modules
0.0014805360228815822
store
0.0014791080706006688
normal call
0.001475322720152669
more
optimal shapes
0.0014734434392944798
look
0.0014722977906311894
unlikely traps
0.0014706631275663734
random inputs
0.0014705762852033348
CFG
0.0014702561174817547
fast-math
0.00146832156925845
npm
0.001467542135267315
web
0.0014671658681418291
focus
0.0014659980409294985
arguments
0.001463618546283714
Binaryen.js
0.0014530410811304892
variable-length list
0.0014521593354833969
performance
difference
0.001451713629140449
pop subexpressions
0.0014503162110710332
C:\Program Files
0.001450171864471194
Developer Command Prompt
0.0014498572534459421
jump threading
0.0014482601541630385
useful but small code size savings
0.0014478039534609472
detailed definitions
0.0014448540422967093
addition
0.0014444376802858852
addDefaultFunctionOptimizationPasses
0.001444175961746821
sign/unsign operations
0.001443762586906071
-O
0.0014401408327028773
indirect call
0.0014399313781290706
conversions
0.001438667710612318
Names
0.001437686030568043
other places
0.0014333724538267418
debugging info
0.0014280919400383159
older browsers
0.0014231861068377501
behavior
0.0014197821533304816
optimizing
0.001419655013260967
various ways
0.0014193598453117904
func
0.0014186280951224315
requirements
0.0014182971686491888
browser
0.0014180342897134725
wiki page
0.0014179216382845202
speed
0.0014170961851903276
llvm+lld
0.0014156888493529066
docs
0.0014155089512791676
Binaryens default
text output
0.0014136021665107808
none_=>_none
0.00141358117960959
more notes
0.0014084386842963849
commands
0.0014075008321990307
error
0.0014072812018872398
OS X
0.0014031147646699578
combines segments
0.001402242433900703
elements
0.0014004909639440874
ref.func
0.0014003420959085508
S-Expression
format
0.0014000870136985644
possible bug
0.0013988293187709201
similar reasons
0.001398636197608493
arm, or
function toplevel
0.0013983487225411755
RemoveUnsedBrs - Key minor control flow optimizations
0.0013982763721792284
specific area
0.001397360002412429
place
0.0013953253010811958
relevant ones
0.0013949327620156025
specific
operation
0.0013948575564569942
Vacuum - Key remove silly unneeded code pass
0.001394843445989568
quick summary
0.0013909878823584242
VMs
0.0013899630070467832
RemoveUnusedModuleElements - Global DCE
0.0013897708972431086
git submodule init
git submodule update
0.0013896589709190509
copies
0.0013887424106915367
pronunciation
0.0013832929905115276
SimplifyGlobals - Optimizes globals
0.0013792449192428836
exception handling feature
0.0013766840366526275
intrinsics.h
0.0013764774737883877
Things
0.0013720502203019812
live range
analysis
0.001370896123857382
LocalCSE - Simple local common subexpression elimination
0.0013687926042073885
hierarchical structure
0.001361978977869002
various fuzzing modes
0.0013619061279478305
subset
0.0013584894094672167
same constants
0.0013514989831211292
call_ref
0.0013460942303112674
tee
0.001343996330947146
transformations
0.0013419995043594069
b, etc.
OptimizeAddedConstants - Optimize
0.0013389245332318868
Emscriptens WebAssembly processing library
0.0013380950315915973
LoopInvariantCodeMotion
MemoryPacking - Key "optimize data segments
0.0013374200295914879
./check.py
0.001329823563331111
check.py script
0.0013294294864027562
participating
0.0013273727964171283
Babel
0.0013269166582252378
testing
0.0013250808285177528
same manner
0.0013228936442943972
print it
0.001316812279892593
sorting
0.001315666395706492
Other scripts
0.0013101281391712084
pip3 install
0.0013077931521966613
execution
0.0013043570798862345
mutability
0.0013040265747089326
parent
0.0013039887819004865
outputs
0.0013000180132192046
fast
JavaScript code
0.0012955085775679593
warning
0.0012954313800834965
elem declare
0.0012945868243626015
Notes
0.0012925043921025942
i32.add
0.0012906260781022087
available CPU
cores
0.0012884615642143596
branches
0.0012880240843305803
parallel codegen
0.0012874677947219092
import "binaryen-intrinsics" "foo
0.0012804552980023632
./scripts
0.0012783171778036342
stdout
0.0012771619741006256
./hello_world.mjs
0.0012726318975944228
ES5
0.00126861660328378
local
experimentation
0.0012587233925786237
core IR structure
0.0012550050612157122
int/float conversions
0.0012545514394745618
ReorderFunctions - Put more-called functions
0.001253739528481721
general-purpose compilers
0.0012446969943252814
linear style
0.0012432311370353325
core devs
0.0012422372391663863
toolchain infrastructure library
0.0012381210359286578
intrinsic method
0.001229214905717683
./check.py --list-suites
0.0012246517232098306
ee
0.001223848341788378
output.wasm
0.001222034660180019
export
0.0012191008054309763
LEB
0.0012189048968780127
checks
0.0012161178668170128
Help
0.001215455672688373
snapshot
0.0012097565081405487
testcases
0.0012032125338470928
useful pattern
0.0012016177211452176
run
0.0011961698978803263
wasm-ctor-eval

wasm-ctor-eval executes functions
0.0011960395569286834
foo
0.0011868548876581286
pure computation
0.001175165499218475
--print-stack-ir
0.0011705836671526873
import "import" "import
0.0011680379171081238
minify whitespace
0.001167219450033376
translation
0.0011628678736948946
compilers
0.001159842282185763
step
0.001156697426276162
Linux
0.001146623828559049
logging
0.0010294894083065344
CI

Binaryen

Binaryen
0.0009635615338884351
