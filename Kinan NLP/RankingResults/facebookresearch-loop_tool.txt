loop_tool
0.06424749843586133
auto C
0.044541318523096
return
0.026639302333102417
B
0.026151811702469177
many useful operations
0.024352516287945953
n)).sum(k
0.021639524944094247
JavaScript
0.018182969641793008
Python
0.017780962993117874
optimized bounded loops
0.017119364773434235
mkdir
0.015654686021151026
build
cd
0.014917692133596533
>
0.014873203386283278
./lt.mjs
0.014802390114792795
= lt.tensor(128
0.014193459644395653
a.to(m
0.013843243035599856
def
0.013818114618858096
fact
0.013724178169898578
mm(a
0.01367788377540139
k
0.01361404516939433
earlier PyTorch
0.013376283150538366
mm(A
0.013301173363756741
Numpy
0.01325881184998774
b.to(k
0.013172053529308286
Overview
0.012963555825644103
lz::Tensor A
0.012869388312748491
loop_tool/loop_tool.h>
namespace lt = loop_tool
0.012468162740263982
linear algebra
0.012364735604592617
neural networks
0.012285756561194109
Building
0.012144757094509587
experimental loop-based computation toolkit
0.011948943169224015
lazy symbolic frontendExtension
0.011890069686264996
typical eager interfaces
0.011884841928982462
https://github.com/facebookresearch/loop_tool.git
0.011778694152634736
Symbolic shape deduction
0.01177676496045502
k).mul(B.to(k
0.011747772595274642
np.random.randn(128
0.011736048181417233
WASM
0.011709435992415335
lt
import numpy
0.011646404021964821
B_np
0.011591626234654862
pip
0.011572684791587613
ideas
0.011463776074444676
C.data()[0
0.011365018329341113
K
0.011317342453031612
input shapes
0.011240870321241912
media processing
0.01109289444286823
N
0.010812058869484229
fly
0.01063273286937663
Transparent JIT compilation


A simple functional IROptimized
0.010581317794542326
various backends
0.010410774798692131
loop structures
0.009940512612438763
max
0.009869087096126907
curl
0.009832971429661516
Tensor(B_np
0.009755792694888011
cmake
0.009723991214829954
A
0.009711366475824977
rand(A.data<float
0.009685432503855241
curses-based UI
0.009643588623302377
local node-level annotations
0.009567445845164281
Pooling
0.00948452669860557
C.data
0.009395987361966014
-j$(nproc
0.009344631518335676
fixed-range loop iterations
0.008931753469477147
B(128
0.00884401244923368
lt.symbols("m
0.008651278547225423
print(C.numpy()[0
0.008541910690019593
arxiv
0.00853419897929296
quasi-linear index equations
0.008439847695288188
Usage
0.008389729476781663
A(128
0.008314864947065619
* 128, 1));
B.set(new Float32Array(128
0.00812920714499994
http://loop-tool.glitch.me



Preprint
0.00794401728612371
MIT
0.007785317302639017
constraint-based quasi-linear indexing system
0.006660848420660012
arithmetic support
0.006436734737610784
Padding
Concatenation
Matrix multiplication
Convolution (group
0.0064359984268506
LICENSE file
0.006275422478590178
tiny linear algebra code-generator and optimization toolkit
0.005550608468414146
