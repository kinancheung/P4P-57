ScriptX terminology
0.05413369050782939
C++ standard
0.029607453978881197
scripting engine
0.02224860992432137
unified API
0.02117991345470286
V8
0.018520206330356885
High performance
0.018103222910623818
native binding
0.01358955095177871
C++ native types
0.013539349306992406
WebAssembly
0.01175245084855504
front-end
0.011644422955655783
code
0.011125068765287113
js
0.010712870352284843
JavaScriptCore
0.010601608584438807
APIs
0.010465168091999684
script exceptions
0.010382712702102061
clang-format
0.009822209883112309
Local<Function
0.009711345774669772
problems
0.009709600657688337
use
0.009703813028924549
different scripting languages
0.009242037469441208
design
0.008403353474793155
several JavaScript engines
0.008154571400157308
example
0.007953086882853932
JSCore
0.007830686176920787
Lua
0.0073643192911793335
support
0.0070873975063208946
large number
0.007084887135537518
single time
0.006996223518326007
iMac i9-9900k 32G RAM
0.006862355538738137
Local/Global/Weak
0.0067610673771859395
script engines
0.006704450029191539
microsecond

Test environment
0.006684993462876
many bound native classes
0.006582795057041333
modern C++ features
0.0065743533541965556
scripting language
0.006493098671111487
ScriptX.
0.006448659620883149
details
0.00640381102538434
classes
0.006265355306161633
FAIL() << e.message
0.006164284374083667
auto log
0.006006680255407942
exception feature
0.005679448578980663
underlying engine implementation
0.005177828288251954
bottom
0.004944904660979266
upper-layer caller
0.00487925822699124
platform
0.00478016764156842
things
0.004778082565554734
Exception
0.00476171375939034
tools
0.004743159192910613
Implementation
0.00467992835770112
users
0.004634665690990647
methods
0.004619852091882458
lot
0.004595468169785238
micro seconds
0.00455067445319726
backends
0.004544491659160307
ease
0.0045268852239902435
Use
0.004525884770216207
node.js
0.004471147859031856
C++17
0.00446525147619565
e
0.0044546563220966475
backend
0.0044328200266099144
catch
0.004387087172621372
goal
0.004329411556282914
crash
0.004322923921403713
mutual conversion
0.004309244732694081
set
0.004309092260742809
JS
0.004306201029314224
kotlin
0.004295896982490405
message
0.004281060996254881
technical means
0.004275635577883259
semantics
0.004274197118026939
concept
0.004267827991788584
line
0.004266142808363417
stack
0.004250738160501996
1z
0.004246344285809406
failure
0.0042451304294191475
beginning
0.004229628083811747
series
0.004229380607459096
ability
0.004208597960637444
obvious error messages
0.004196300378926466
Test Environment
0.004192658623775457
mistakes
0.0041919006052761896
guiding ideology
0.004190490190092456
MessageQueue
0.004182492400838855
automatic memory management
0.004177736633974098
additional logic
0.0041776411244777815
situation
0.0041632465697766935
full consideration
0.004123737703389434
order
0.004102280599835619
%
0.004085446854982257
friendly and simple operation
0.004071275677070228
Zero-Overhead
0.004058861972959221
templates
0.004058629447499405
docs
0.004049009835787153
global references
0.0040475474505006995
capabilities
0.004043855349762404
copy
0.004033385562717312
ptr
0.004018197733073431
important indicator
0.004008462967545737
MyBind
0.0040032741638794615
crashes
0.003998099227882765
multi-language design
0.003989807850990717
return value
0.003982293895898658
parameters
0.003978996791061551
script::Exception
0.003973150081527674
need
0.003971649367435338
Release mode
0.0039447679434330375
problem
0.0039390811936626125
header files
0.003931993851156734
Script functions
0.003919570677807247
MSVC compilers
0.003915617612869667
Feature introduction
0.003894083641122032
Happy Engineer
0.0038912586617221
automatic reference counting
0.0038873227541331725
warning
0.0038778449314652214
unified exception handling
0.003870080698141373
Efficient
0.003868392341914505
Support script exception
0.0038683848291569257
functional features
0.0038600437680573526
GC
0.003849945460494458
Debug version
0.0038448646784608647
interface
0.0038139188631954968
nullability safety
0.0038115525054758926
Performance test comparison data

Test indicator
0.003802208019955586
=
0.0037416814419511907
error" level error messages
0.0037272677940159626
Convenient exception
0.0037156902705797086
implementation process
0.0036899387019464877
null pointer safety
0.003656661824012236
ptr->callCppFunction
0.003635790474476782
msg
0.0036351000330168888
variadic template
0.0036303676441115304
States

backend language version states
V8 JavaScript
0.003626745110920277
ClassDeifine related binding API
0.003619823355329264
EngineScope
0.003615598246337267
const std::string
0.0035781904411348394
src
0.0035676020003649455
UnitTests coverage rate
0.003551254634166588
ScriptX.h aggregate header file
0.003518360122699616
host
0.0035050229487958483
ExceptionTest and Related Documents
0.0034900867855050034
test cases
0.0034793398108668534
direct binding
0.003448428344400533
overall impression
0.0034477845019292696
finalize callback
0.003447179865525518
convenient Function::call syntax
Use Template Meta-Programing
0.0034381935891262113
Modern C++ API

API design
0.003405514859783501
Design goals
0.0033699396176310307
cyclomatic complexity
0.0033679509897995463
engine->eval("
0.0033609563803097533
e.stacktrace
0.0033592739691754767
ScriptX.

EngineScope enter(engine
0.0033506849059053156
Engine destruction
0.003347396940243982
JSON.parse({"length":1,"info":{"version
0.0033341736152342205
app
0.003331001113570327
variety
0.00332117214599194
InteroperateTest and Related Documents

Code quality

High code quality requirements
0.0033133157493820667
1.18","time":132
0.00329918032396179
CPython Python
0.0032647255670491117
work efficiency
0.0032408562139531047
std::cerr
0.003213381893041113
Cross-platform

First impression
0.003210731470484908
.asObject
0.0032093292681197876
different underlying engines
0.0031940392591056827
json.get("length").asNumber().toInt32
0.003193630243430528
YARV Ruby
0.0031814380459798627
Lua Lua
0.003176048405500097
json.get("info").asObject
0.0031650855583003597
info.get("version").asString().toString
0.003126264076083417
+
0.0031135562882104017
Various unit
0.0030888037501276442
engine->get("fibo").asFunction
0.0030077350072479437
ret.asNumber().toInt32
0.0029610566165821544
ScriptEngine
EngineScope
Exception
Value, Null, Object, String, Number, Boolean, Function, Array, ByteBuffer, Unsupported
Local<Value
0.0029043618857636623
README.md
0.0027998440692596368
engine->eval("function fibo(x
0.0027993010298299563
engine->eval("log(hello world
0.002785299128935318
JavaScriptCore
  Lua
  Python
0.0026607126171580443
script engine abstraction layer
0.002644867529254313
several concepts
0.002445553581629443
bytes Lines
0.002314674809985463
Local<Unsupported>
Global<T
0.0022105810761515266
project documents
0.0022072394684029533
README License UnitTests GitHub code size
0.0021902864660634782
