NNUE support
0.0418498391417643
flags
0.027178348854333952
Firefox
0.02656804455854379
stockfish.wasm

WebAssembly port
0.023047412794181495
javascript.options.shared_memory
0.020011602547620088
MB hash
0.019196753387001064
additional memory
0.018839239545158294
engine
0.018021185814274417
Stockfish().then((sf
0.017409268454260895
corp
0.017353875799277236
Chromium
0.0171508863193057
e
0.017101503706542166
WebAssembly
0.016923889819214628
Stockfish
0.01635278069800742
stockfish.wasm
0.01493858106496585
stockfish.worker.js
0.014272023676596295
SharedArrayBuffer
0.013836250836310189
require("stockfish.wasm
0.013805095822995795
=
0.013599088074295987
stockfish.js
0.013236909734656506
0x61
0.0125304324967001
^2.0.13
0.012275291572644322
Uint8Array.of(0x0
0.012245779300369556
total size
0.012182097157953776
dom.postMessage.sharedArrayBuffer.withCOOP_COEP
0.012171583456452015
em++
0.012133336465602882
Other browsers
0.011988854534092477
nightlies
0.011698340987179716
Hashtable
0.011480929854284784
file
0.011307044773970485
https://github.com/hi-ogawa/Stockfish
0.011230516232937048
positions
0.010964692151915091
Supports treading
0.010568974601443706
SF_classical
0.010557016836824291
options
0.010539503125317052
0x6d
0.010484005662907046
Current limitations
0.010466399973579477
npm run-script prepare
0.010383640260838089
v14.4.0
0.010330781208211268
threads
0.010317067704939563
invalid commands
0.01022728067300718
K
0.010173450746442728
catch
0.010092888383346096
module
0.010022134916885243
Cross
0.009913446886188114
desktop
0.009807320427633102
default allocation
0.009794375540511194
Memory
0.00977546765808406
same directory
0.009734491439597957
WebAssembly 1.0
  const source
0.009684207395920887
recent node
0.009675731634592982
script src="stockfish.js"></script
0.009429245710838096
navigator.deviceMemory
0.009350963722577522
object
0.009196959368763732
Shared memory
  const mem
0.009188436664943234
Structured cloning
0.009162112729892782
portable but single-threaded version
0.009136730090000496
Cross-Origin-Embedder-Policy
0.009129246879233248
flags
--experimental-wasm-threads --experimental-wasm-bulk-memory
0.00910674698510278
return
0.009066908569598043
0x00
0.00904285201338466
Feature detection

function
0.009038173900724675
UCI protocol
0.00903652883638279
Threads
0.009028135291693693
HTTP headers
0.009012031403635767
Atomics
0.008899507518423373
latest WebAssembly threading proposal
0.008885788089123745
included files
0.008879438758009528
Thanks
0.008870177073138679
https://lichess.org/analysis
0.008802957350237398
action
0.008768271583168398
top level response
0.008600182008019111
function
0.008551935424339017
navigator.hardwareConcurrency
0.00839533259727702
flag chrome://flags/#enable-webassembly-threads or
Origin Trial
0.008361425116650098
GPL3
0.008136088405527573
console.log(line
0.00810387716998525
sf.postMessage("uci
0.007979083897553776
WebAssembly.validate
0.00787003013294637
maximum
0.007792735885411557
Growable shared memory (optional)
  try {
    mem.grow(8);
  } catch
0.007729626275701151
!
0.007567175493179373
messages
0.00729008297049143
strong chess engine
Stockfish
0.0071415473743673095
