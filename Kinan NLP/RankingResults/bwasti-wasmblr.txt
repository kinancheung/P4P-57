wasmblr::CodeGenerator
0.07075402382380663
Code
0.06257444338182624
auto add_func
0.03980003057850374
f32
0.019186923753041422
C++
0.018772516541093517
_
0.018651291749732193
local.get(i
0.01747239133327733
uint32_t factorial
0.017095574771719097
= cg.emit
0.01709285759460197
loop_fn = function
0.016325241258273306
local.get(0
0.01587190331653221
i32.const_(0
0.015458488934410373
end
0.015454038699975896
local.get(vec
0.014921083783988928
function({f32
0.014266371251413036
new WebAssembly
0.013901663054256792
case
0.012323709102569264
function
0.012060556656891017
f32.const_(0.0f
0.011877062318905836
Measure Bandwidth
0.011379924707985434
local.set(vec
0.011268259605170711
const
0.01068517968998137
memory(1
0.01015269482410813
wasm.write((char*)bytes.data
0.01011414284813736
if_func
0.009883311530625797
bytes.size
0.009861153528586792
f32.const_(1.0f
0.009847866002454957
loop(void
0.00933159119005559
reserved keywords
0.008359466428091971
Useful
0.008327618576462413
JIT compilation
0.008317459501315513
TODO

Many things
0.008314600851440288
export
0.008145600743051927
xor
0.007800197889430966
projects
0.0077788429029921075
cg
0.0077758587055800875
Measure Matrix Multiplication Performance
0.007769694676263718
-std
0.007758747252373566
https://bwasti.github.io/wasmblr/flops
0.007758383648267848
couple
0.0076508967282027844
c++11
0.007629025136953163
Emscripten
0.00761834591800094
example
0.007615821896967405
local(i32
0.007526258706410055
semantics
0.00749037159271101
i32.const_(1
0.00737695075909154
i32.const_(10
0.007294989451176401
i32.add
0.007289407875812421
assembler attempt
0.0072849830266688426
local.set(i
0.0072458255624806974
wasmblr.h
0.0072228486104091326
benchmarks
0.007216033326098504
i32.lt_s
0.007083648294942113
f32.gt
0.006977419068488302
if_(f32
0.006969148040702729
NB
0.006958255398595681
#
0.006922699660677629
examples
0.006878577017463785
class variable
0.006861236041957389
Features
0.0067813163001348995
file
0.006749062118629639
br_if(0
0.006680253196898924
export_(if_func
0.006666603761455003
console.log(instance.exports.add(8
0.006650972742220555
relu
0.006615421265711838
issues
0.00658496578647982
i32.xor
0.006579601518281381
export_(loop_fn
0.006539798028398604
GFLOPs
0.006506286115704512
local(v128
0.006502353201946386
v128.load
0.0065020507341949285
v128.f32x4_mul
0.006495754161960399
loop
0.00644090966984855
underscore appended (e.g. export_
0.00634546513219775
If-statements
0.0062925858020386445
i32
0.006267789428682117
help
0.006254338118295899
store
0.0062507690805322785
bit lanes
0.006232249027329159
export_(store
0.006207490393055212
web assembly binaries
0.006166617599122287
export_(factorial
0.006124800168170396
f32.lt
0.0061058721126460444
SIMD
0.00609013316722905
code generator
0.005962320715189561
v128.store
0.005777461988332447
std::ios::binary
0.005689093337050509
Test
0.005608962284040086
JavaScript
0.005578443117733316
index
0.005548656954496147
inheritance
0.005539199845669144
value
0.005381231253425352
align
0.005377875637002642
library
0.005364083862131221
cg.f32
0.005121526049548297
call(factorial
0.005113397349897583
export_(add_func
0.004951227263620499
f32.add
0.004924235555657272
export_(square
0.0049232748838524245
cg.f32.add
0.004593068075832821
wasmblr

A single header file WebAssembly assembler
0.004308974074350524
