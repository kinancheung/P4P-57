WebAssembly
0.04449690265693285
C
0.03216305131469386
JavaScript
0.022645951028036123
Elm
0.02260162754268581
custom code
0.02101015071759643
kernel code
0.017638386308422776
JS
0.01706762685274802
Wasm performance
0.016891336534575477
Rust
0.015678988026532323
lot
0.01480112871892576
Elm data structures
0.01426689338656794
Total Blocking Time
0.012108141108364124
ms
Cumulative Layout Shift
0.01168049457545589
Interactive
0.011533535143391714
compiler
0.011344947241937763
--optimize
0.010904604899191081
VirtualDom diffing
0.009806312158684938
good way
0.00951894105277531
first-class functions
0.009226364363578972
byte-level Elm data structures
0.00896441292739025
generated code correct
0.008428351192883625
years
0.007957465402329915
Installation

This project
0.007922095660732046
intermediate language

Other documentation
0.007809960569110098
pure part
0.007733652581870467
model
0.0074641051886986136
bytes
0.007307315615693499
First Contentful Paint
0.00722625888681373
runs
0.007148638567516839
root directory
0.007106139105504459
minification
0.007025260464680559
code size
0.0069532234135065716
bugs
0.006907929454997943
Cmd
0.006726897141204349
wrapper" Program type
0.006622962035724686
Makefile invokes
0.006360469800692822
much serious effort
0.006294517683062116
http-server
0.006294503920996316
memory
0.00628741104254112
things
0.00623594008741197
update function
0.006164013863725585
Elm program
0.0060946916813051305
server
0.006076709300146744
implementation
0.005998177755228819
JavaScript functions
0.005968852310446685
GC
0.0058894528567547365
early phases
0.00570201651749249
overall score
0.0056894830956418395
overall score 91 - 95
First Contentful Paint 0.9 s
Speed Index
0.005663649676379679
algorithm
0.005552461895760479
core libraries][demo-unit-tests-core
0.005355558613988028
few demos
0.005321255016883122
diff
0.00530613545465384
Demos
Installation
The JavaScript/WebAssembly
0.0052285288973197095
Speed Index
0.005081620027089109
Largest Contentful Paint 1.2 - 1.3 s
Time
0.004742210537525192
NPM packages
0.004666345914029206
Browser
0.004576390404035699
ArrayBuffer
0.004496298750114156
https://github.com/brian-carroll/elm-compiler
0.0044942441235397935
cd
0.004484220540340248
TypeScript
0.00443925332904827
lots
0.004438247640795767
DOM
0.00442930271281155
Scheduler.js
0.00442882564771
couple
0.004420182177807157
offset
0.004390031675428825
msg
0.004313666296097313
XmlHttpRequest
0.004288484139043977
Lighthouse Performance report
0.0042830911425108895
ways
0.004265197804701224
ports
0.004251780129342914
patches
0.00424972864305308
forked repo
0.004244047004200893
combination
0.004213142472973678
Platform.js
0.00417672728048633
benchmark
0.004172143182987534
experts
0.004171648073190971
hundreds
0.004154940411037613
Jakub Hampl
0.004143479203666861
stack
0.004140350450479721
-O3
0.004134352950938263
Web APIs
0.00411529984156537
accessors
0.004106608704315614
effectful modules
0.004101433878386195
record updates
0.00410087630036478
Http
0.004098199437681971
ranges
0.004096786689854458
Clone
0.004093535269523525
wrapper (src/kernel/wrapper
0.004090207872112566
unique effect
0.004053846769245939
limitations
0.004038778152094046
iteration
0.004029288067727005
exported function
0.004028819438991306
work
0.004001617628198162
Browsers
0.003996974636451587
numbers
0.003996072207320514
More details
0.003995333860410561
direct support
0.0039523622289288326
Desktop
0.003950318531963349
main limitation
0.00391465613390981
arguments
0.003906820542348497
elm
0.0039038495251764588
assets
0.0038530136336610314
best approach
0.0038358490467413522
interface
0.0038327819400494965
uglifyjs
0.0038290450650849397
Figures
0.0038212235425573045
https://www.haskellstack.org
0.0037990478320107956
arithmetic operations
0.0037826720942634416
Performance micro
0.0037779266322958737
other

Function calls
0.00377647296898859
.wasm
0.0036892637889403535
output
0.00368012563612743
Chrome
0.003680039961140802
advanced low-level optimisations
0.0036788246884668294
few effects
0.003646596722906192
fact
0.0036025658522841784
Reported figures
0.003568763709234464
wrapper.ts)This file
0.003560234747412194
PATH
0.0035597550857928615
heap
0.0035428500715504008
Run npm
0.0035394032609901917
forked Elm compiler

Install Stack
0.0035298207019566355
development
0.0035208825248916713
local .json files
0.00349811727488261
order
0.0034953011826486407
several drawbacks
0.0034932325454644043
errors
0.0034889108597789486
directories
0.0034887889203162673
meantime
0.0034712048937138302
action
0.0034683125929514534
network variability
0.0034527784733107674
Firefox
0.0034498034746743185
API endpoints
0.0034484380958117573
App
0.0034369281717688328
summary
0.003423432967317555
first attempt
0.0034232441910502873
Install Emscripten

Clone
0.003398013964627685
browser
0.003392160231081654
theory
0.003382529987962522
JS/Wasm boundary
0.00338158958454348
little DSL
0.0033759194876077626
person
0.003373795845171907
focus
0.003363781972829941
evenings
0.003363025510858066
alternatives
0.0033540420012030617
only tool
0.0033399715739669327
basic optimisations
0.003336456920855727
bottlenecks
0.0033326724860722173
context
0.0033209399495160376
measurements
0.0033183128553278987
massive productivity gain
0.0033079310714118765
demo
0.0033061266775471104
Haskell
0.0032960867109562268
Benchmarks
0.003287130314556756
time
0.0032752713219860005
production
0.0032631691049005975
test application
0.0032447453025080345
elm-spa-example
0.0032373246659061763
performance
0.0032026828467800967
Elm-specific ones
0.0031169197588629973
big win
Replacing Emscripten
0.003041050650489257
job
0.0030298887905490287
downsides
0.0030270833251731712
First Contentful Paint 0.5 - 0.6 s
Speed Index 0.6 - 0.7 s
Largest Contentful Paint 1.2 s
Time
0.0030103170781826554
garbage collector
0.0029977699112614694
installation guide
0.002992809549723806
hand-written code
0.0029074922105092665
different decision
0.002789427378690966
reasons
0.002712378380333356
normal rules
0.0024671255041983004
Contents

Lighthouse Benchmarks
0.0022728842310684306
