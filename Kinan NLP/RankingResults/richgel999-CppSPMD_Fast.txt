code
0.030800061794200306
AVX1
0.027706815262794827
CppSPMD
0.02448807838463037
different headers
0.022332568480630307
_
0.022296684645289076
vint" struct
0.020104794804416976
AVX2
0.01900596642499703
varying SPMD flow control constructs
0.017074410540479326
CppSPMD_Fast
0.015367411371950324
AVX-512
0.013699579972463523
MSVC
0.013328971466669877
SPMD_IF
0.011484933298450649
Many ispc kernels
0.010681792610514013
original CppSPMD projects lambda-based flow control
0.010422519425650279
macros
0.010091851105256743
logical ops
0.009947838740941305
SSE2
0.00935114975486915
BC1 encoding example
0.00894843438437585
integer kernels
0.008467369721235242
SSE4.1
0.007910187542030997
compiler
0.007703860554337622
C++
0.007645365543236009
SPMD_SIMPLE_IF
0.007627301352776112
SPMD
0.007303417276619952
ARM Neon support
0.006887233329624548
ISPC"

SPMD Programming
0.006818419209023823
BC1 kernel
0.006788339596936097
m128i
0.0067500651653535255
SSE operations
0.006742931450978557
specific instruction set
0.006684929686118467
others
0.006439518966727601
block
0.006408085103880663
spmd_continue
0.006397189173137011
spmd_return
0.006343064397421276
lanes
0.006286356899981207
Microsofts MIT
0.006155745325176994
int16 and int8/uint8 support
0.006070808664105782
SPMD_SIF
0.006062589631579752
spmd_break
0.0059877763427894195
vfloat result
0.005982962564781739
vfloats vs. vint
0.005935788348039431
math
0.0059177812074199775
different variants
0.0058648534307572135
namespace CPPSPMD
0.005773052881477915
optional FMA3
0.005681024718108788
count
0.005400461872905213
#
0.005349290002194092
lot
0.005304237302703172
header
0.005167487234579429
clang
0.005025735848519249
store(result
0.0050234262655399564
different pros
0.0050041288866980735
testing/validation
0.005000120891001513
integer variables
0.004985765475797197
new systems
0.004843860118527865
CPPSPMD_NAME(simple)(float vin
0.004809447589875996
better performance
0.004743316507320674
loop
0.004692003291875201
DirectXMath project
0.004632905936813699
multiple ways
0.004631172272575872
Use store_all
0.004473822555182543
common functionality
0.004407793122726701
different vector instruction sets
0.004387515759460409
m256
0.004353299124741775
built-in math/trig library
0.004328230706744439
loads/stores
0.004313382060415213
same results
0.004295404787038627
m256i
0.00428888746566451
problem
0.004277020296468189
trig approximation library
0.004245710425465108
pure standard C/C++
0.004238693305235464
intrinsics usage
0.004222478192953106
appropriate input value
0.004171093589623726
C++ header-only library
0.004080620993880714
vectorized math approximation functions
0.004052956738617381
FMA support
0.003850214480313845
arbitrary little computation
0.0037927265397075245
vfloats
0.0036609246441089045
vout
0.003404487189877598
WebAssembly
0.0033972387127748894
-mavx512dq
0.0033537308587086507
CPPCon
0.00333134131350463
cppspmd_sincos.h
0.003317458783162335
floats
0.003279161072375694
time
0.0032730989104198535
way
0.00326919012976262
CPPSPMD_USE_AVX2
0.003266180780799059
-mavx512f
0.0032577917440664945
Vectorized sin
0.003257365348230683
varying ints
0.0032530553847957776
cppspmd_avx2.h
0.003223397198009152
CppCon 2016 Video
0.003185763942872736
SPMD_ELSEIF
0.003182480717120658
cppspmd_int16_avx2_fma.h
0.003176578148956898
SSE 4.1 supports float
0.0031640001675201767
References
0.003141243566778453
cons
0.0031231866801673933
int32 opts
0.003101704501688122
Conditional statements
0.00308643347911508
Nicolas Guillemot SPMD Programming
0.0030727935520236255
differences
0.003065914866322929
foreach
0.0030425656615106745
behavior
0.0030129828360399144
-mavx
0.0030040754383484497
aspect
0.0029945556578761614
reverse bits
0.0029801835703443793
count leading/trailing zeros
0.0029598851752529643
wide int16_t
0.0029479646490601116
int32_t
0.002943906757027098
varying integer bitshifts
0.0029316217997268847
Benchmark
0.002921835892623102
temps
0.002914993581378527
cppspmd_math_declares.h
0.002906972328854262
return
0.0029001483114913366
benchmarking
0.0028978463799727862
sqrt(v
0.002889104635635577
cppspmd_avx512.h: AVX-512 support
0.0028782261877335217
types
0.002878203817227803
porting
0.0028536082364070295
workaround
0.002852906317539427
SPMD_ELSE
0.0028486535621653672
v
0.0028379323618121545
approximations
0.002834853988840591
log/log2
0.002825058248059045
set bits helpers
0.0028207420504340066
cppspmd_sse.h
0.0028152597320287003
CppSPMD_fast
0.0028144718473548896
practice
0.0028080948418026485
sorts
0.0027977350368269564
spmd_foreach(0
0.002797478347924743
regular store
0.0027940834050514873
state
0.0027843547193967277
simple
0.0027821988866679023
lots
0.0027794510291203715
const lint
0.0027687130134862
surprise
0.002767776136919191
debugging/porting use
0.0027642464964684308
less execution mask
0.002763748037990617
simple SPMD random number generator
0.002751794095965089
earlier version
0.002751400586973824
ISA
0.002741033163666043
more parallelism
0.0027376491571025935
encoders
0.0027116942616273966
index
0.0026960776828258057
single self-contained header file
0.00266986036826571
arrays
0.0026658830658235636
minor thing
0.002663904977607564
output array
0.0026630173194843857
lambdas
0.0026629559862387515
means
0.0026592299942936604
pointers
0.0026426977126002295
SIMD processor intrinsics
0.0026393797882951087
temporaries
0.002612128510712656
cppspmd_avx1.h: The "AVX1 alt" header
0.0026082035354842497
-msse2
0.002595518690154186
foot
0.0025952651684423515
need
0.002578511257311393
SPMD_SIF(v < 3.0f
0.0025766691664510276
gathers/scatters
0.002561699142521129
developer
0.0025534238086492474
SPMD_SENDIF
0.0025487987041693835
Intels ispc SPMD programming language
0.002547199668038457
little bit
0.00254570281146863
linker
0.002544851777794874
several quality-released bugs
0.0025197569469793337
key design goals
0.0025183618994929235
mind
0.0025160409875328695
variable
0.0025118693256273206
subroutine calls
0.0025066961187838015
strong subset
0.00250185126114205
Use uniforms
0.0024944210208469285
separate call
0.0024905815841663173
store()/load
0.002489249684289158
named namespaces
0.002487313602029599
sort
0.002474645824588755
blocks
0.002472274530770086
few changes
0.002453939798679264
internal" mask
0.0024449108263873507
experience
0.0024101293972681242
files
0.0024091976191893964
SPMD_WHILE(cond)
{
}
SPMD_WEND

Other notes
0.0024088308666296737
correct MSVC/Intel/etc. compiler options
0.002407844938392691
development repo
0.0024027195565576656
unique struct/class names
0.0023956739961838117
slowest supported gather/scatter operation
0.0023928513527252202
simple portable and scalable math
0.0023826905028489598
many cases
0.0023753976917819347
advice
0.002375215756412833
program instance
0.0023722038400908986
SSE4.1-level scaling
0.0023565590753242918
statement
0.0023489615883969597
systems overall complexity
0.0023427051637918564
spmd_foreach
0.002331973618861416
Earlier versions
0.002331399916104153
load_all
0.0023244444662207106
less exec mask management
0.0023215279562962985
SPMD_FOREACH
0.0022924043244657646
bug fixes/improvements
0.0022908038692889166
tan
0.0022817210849361003
release
0.0022566157521953026
varying and non-varying indices
0.0022522962227503524
SPMD_SELSE
0.00224642321282461
test apps MSVC 2019 compilation time
0.0022246895528276684
ispc "simple" example
0.0022238950150186686
gcc
0.0022195021352330447
Simpler/faster spmd_if
0.002207771180256042
difference
0.002170024189606752
load_linear
0.002160851475772534
LICENSE
0.002160144650813646
checks
0.002150768270505918
bugs
0.002149431771937516
vbool
0.0021363506316269495
AVX-VEX transition penalities
0.0021310458637483873
doubt
0.0020698115751147154
Agner Fogs dispatch example
0.0020531720005349872
explicit CPU dispatch
0.0020398259897587323
test project
0.0020339599712037994
Intels open source license
0.0020276492802550816
