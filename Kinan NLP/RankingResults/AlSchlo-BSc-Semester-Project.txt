smart contract applications
0.03474433513782262
project
0.03274365396990154
training
0.023153653108577144
Solidity compiler
0.022763403470599086
network
0.01960524191193111
revenue distribution application
0.01915385016688611
following commands
0.01756414049136335
EPFL
0.017179556282420315
following execution environments
0.016950963751420193
version
0.016370237258719854
more details
0.016308178732975312
EVM
0.01618425880892111
new emmake
0.016037933023655377
Ethereum Virtual Machine
0.01542908951681403
normalization
0.015184507174403356
JVM
0.015096437301392832
Supports
0.01499881619011184
implementation
0.014639887372288878
WASM
0.013923150258384932
Geth
0.013900508480735506
machine
0.013696654428917952
testing
0.013236740090670638
source
0.013079098849266887
desired benchmarking parameters
0.012880938759846318
operations
0.012447410718250925
shape
0.011401539626253076
latest
# Activate PATH
0.011341978304453592
efficiency
0.011313131681607351
ease
0.011253646930735495
activation function
0.011214189447479386
stochastic gradient descent
0.010937219364191996
dependencies
0.010527339400764186
ReLu
0.010503501112867243
terms
0.01034880955122497
programming
0.010068307515153821
Benchmarks
0.010001345790423593
Execution Environments
0.009969337259666824
Applications
0.009789823552958609
car
0.0096524890098251
content
0.009634927017763988
smart contracts
0.009501689755021475
DEDIS laboratory
0.009473439399051367
common problems
0.00946623422741151
results
0.009332638873011756
Emphasis
0.00922406283128536
go-ethereum
0.009179614144933235
context
0.009121367757236694
wide range
0.009054862167566445
paper
0.008982407207372188
different execution platforms
0.008958907888713943
Solidity
Web Assembly
0.008947206172316998
solc
0.008764797985415122
responsability
0.008607598767027788
Prof. Bryan Ford
0.00859008076906646
full report
0.00851172500880449
JMH framework
0.008511027792202436
support
0.008442485847073087
steps
0.008412502269530905
realization
0.008360607918674942
Student Alexis Schlomer
0.00829502190043326
arbitrary complex multilayer perceptron classifier
0.008260399949631013
floating point arithmetic
0.008207606784261684
macros
0.008136230147211692
gratitude
0.008074669010176751
such problem
0.00798166265424147
original one
0.007947096402170126
benchmarking code
0.00774604412313455
sophisticated optimized approach
0.007644864229335883
constants
0.007642472932374724
work
0.0076191537362279155
files
0.007578196278220081
Simulation.c ClassificationContract.c MatrixNNUtils.c
0.007527020106485516
Revenue Distribution

A generic and flexible version
0.007464686728477176
following email address
0.007434668888223249
inquiry
0.0073709249454542896
import directives
0.007356511953577169
/go/pkg/mod/github.com/ethereum
0.0073270975810845644
cases
0.00724216518095806
Random.c ./gsl-2.7.1/.libs/libgsl.so.27 PATH/neural_network/gsl-2.7.1/cblas/*.o -I PATH/neural_network/gsl-2.7.1
0.0072250448893124855
last step
0.007212761361135771
new package
0.0071687597023083515
EPFL PhD Student Enis Ceyhun Alp
0.00716808924104037
Non]OptimizedSimulation.c DistributionContract.c
0.007050601423186954
other environment variables
0.007005178587985382
install solc-select
solc-select install 0.7.0
solc-select use
0.006977429008167835
solution
0.006774260342398662
current terminal
0.006744934196367708
previous command
0.006676388021461418
cd emsdk
0.006300961297723231
file
0.006137195496122723
#x61;&#108;&#x65;&#120;&#105;&#x73;&#46;&#x73;&#x63;&#104;&#108;&#111;&#109;&#x65;&#114;&#x40;&#101;&#x70;&#102;&#x6c;&#x2e;&#99;&#x68
0.006028415297747548
