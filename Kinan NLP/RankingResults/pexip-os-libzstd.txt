Silesia compression corpus
0.035987115736899354
zstd
0.03554749636583234
Small data
0.033733965564159335
dictionary
0.022041776103005437
project
0.020180800789006813
typical file
0.019981071001153566
root directory
0.019399818587334597
several fast compression algorithms
0.017424546394464176
Visual Studio
0.01678659113930618
FSE library
0.014606316974895337
Zstandard
0.012889139966178492
build/cmake
0.010920635847785935
Arch Linux
0.010666908134267144
better compression ratios
0.010230376127571454
algorithm
0.008910004801102914
selected type
0.008840974470644022
date
0.008616352987966027
vcpkg
0.008610154507981157
Zstd
0.008342206036078362
decompression speed
0.008336414702003496
Speed
0.008304699952797536
default
0.00811314402411294
dev branch
0.008101420466045756
server
0.007965506712066934
training mode
0.007897139375817236
output binary
0.007882738668471298
following example
0.007726652676244044
instructions
0.0076812179646023925
buck
0.007594878964793629
short version
0.007456325411298523
dictionaryName


Compress
0.007387081271120197
install
0.007382065560531546
Training Zstandard
0.00735248449778741
playTest.sh script
0.007240226213165975
information
0.006971754204614184
KB
0.006812253149651767
release
0.006759467003829334
zlib-level
0.006738668984301534
memory
0.006687627074025815
MB/s
0.006685344966691586
@inikep
0.006644088284808978
using lzbench
0.006444091458092813
Compressor name Ratio Compression Decompress
0.00628186967767859
VS2015
0.006193492790188249
VS2013
0.006136490844683952
Core i9-9900K CPU
0.006071744959607458
VS2017
0.005898887174823943
VS2012
0.0056702924367871875
Small Data compression
0.005466747780338103
case
0.005413970095327143
Automated build scripts
0.005362443155561971
results
0.005299077860353767
Previous charts
0.0052325938881528315
stream scenarios
0.005185924822295011
Projects
0.005160256593393103
man pages
0.005146771845522132
request
0.005127906556712774
@KrzysFR
0.0051125038616145506
make
0.005099210878999795
Microsoft team members
0.005064140806502213
lzma
0.00499698082545829
sample
0.004981988798962516
several MB
0.004960498607368576
multiple formats
0.004951980085168071
issue
0.004927372767725938
cost
0.004921533615467456
CMAKE_BUILD_TYPE
0.004919632085295119
zlib
0.004895743968507419
known ports
0.004871934612278774
Compression trade-off
0.004865390950432517
Windows
0.004838096689631585
need
0.004799288985597671
link
0.004798027074317291
loss
0.004785827732604736
exchange
0.004784398091622136
slow modes
0.0047727777638833044
CI testing
0.004747526796812132
larger picture
0.004745397966859836
gmake
0.004725850377533705
standard make
0.0047223697632650975
result
0.004711991910396162
additional possibilities
0.00470935055664117
list
0.0046772751418139285
cases
0.004676138553011294
family
0.00466043259361264
look
0.004656734043425385
Release
0.004653988044811777
MB/s 1660 MB/s
zlib 1.2.11
0.004643708899071782
check
0.004624819194284133
community contributors
0.004622044497327086
property
0.004567011597619727
system
0.004551674410819146
reason
0.004545253496938164
rest
0.004535538525078118
greatest benefits
0.004534294593862637
repo
0.004523889188019619
Other available options
0.004523876507168829
situation
0.004492321892903993
GPLv2
0.004488348829734872
BSD
0.004485177449321285
Meson
0.004475598717908241
dictionaryName --decompress FILE.zst
0.004460790555081892
following tests
0.0044462385457208885
large amounts
0.004430555863343253
Buck
0.004421340147133992
bindings
0.004421099918318511
decoded content
0.004379011729643676
few samples
0.004358716613651312
graph
0.004357586570405771
reference
0.004331509780765857
Dictionary gains
0.004330401843503554
small increments
0.004305291607263411
table
0.004297350841194881
correlation
0.004295143873297707
different perspectives
0.004272869491511066
slower speeds
0.004269146939257277
production environments
0.004255203102018443
behavior
0.004246235566132591
settings
0.004238506102731418
Decompression speed
0.004186694396767104
beginning
0.004173091601625113
dynamic and static libraries
0.004147108511785052
DATAGEN_BIN
0.004130495923131333
src/tests directory
0.0040560908667002385
programming language
0.0040156069826708845
TESTING.md

Status

Zstandard
0.004005990890734268
env variables
0.004001410071341427
Huff0
0.00399566794958725
problem
0.003981871089745334
github-users sample set
0.003972307211485329
Makefiles
0.0038855806436869293
Facebook
0.0038774585114608098
zstd vcpkg dependency manager
0.0038724819842145836
git clone
0.003824918615407694
Benchmarks
0.0038172503182725788
Linux version 5.5.11-arch1
0.003811139846822588
--fast=
0.0038110842378092547
5.0GHz
0.003697809724457039
quick local smoke tests
0.003681458003186583
github public API
0.00367566387837001
faster compression and decompression speeds
0.0036722633868113775
contributions
0.003663101295280413
K records
0.003658150852448431
Development branch status
0.0036494437582573554
open-source dual BSD
0.0034261657038244563
patch
0.00341770162966949
-1
0.0033932148654073316
MB/s 820 MB/s
lz4 1.9.2 2.101 740 MB/s 4530 MB/s
zstd 1.4.5 --fast=7
0.003349792994703817
fast lossless compression algorithm
0.0033314735064097502
fast entropy stage
0.0033106290018829016
Direct commit
0.003257962381160407
targeting real-time compression scenarios
0.0032416340742453566
command line utility
0.0031301054380886363
brotli
0.002923372815141271
CONTRIBUTING
0.0028312405120426913
quicklz
0.002827612080777078
