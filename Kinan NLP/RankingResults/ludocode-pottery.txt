Pottery

A container
0.047640572481134784
char* name
0.024208207761081915
person_t
0.020943187088221085
map
0.020244064640054932
eve
0.0189479079849082
person_map
0.018305852276787486
templates
0.018115736793340043
growable array
0.017884069510817866
many compilers
0.0169757869394386
look
0.016529419894888698
container algorithms
0.016346496022330154
person pointers
0.01527131946873826
full example
0.015167871962460158
modern C code
0.015058489728231561
function pointers
0.014888062078863349
void pointer casts
0.014614754105636894
define
0.013488581425756976
struct
0.01294001335839216
POTTERY_INTRO_SORT_PREFIX sort_strings
0.012543401676188068
algorithm template library
0.012009917131197862
#
0.011126604283223611
Clang
0.010660455988107734
int
0.010628211606828794
gnu89
0.010401436115117327
MSVC
0.010344813228560476
GCC
0.010223540800917063
POTTERY_TREE_MAP_PREFIX
0.0101885719079757
person_map_t
0.010006834499494842
C++11
0.009961058728450727
vectors
0.00989887467092373
hash tables
0.009888562793964726
WebAssembly
0.009803285348387425
kernels
0.009780493415861123
int_vector
0.00970053374795464
C11
0.009572066006875601
names
0.009543601937639761
messyness
0.00925945828102591
C.
0.009242198836968364
POTTERY_FOR_EACH(ref
0.009237533462026434
binary search trees
0.00906164670609054
ref
0.008882277281864016
typical C containers
0.008866279486579481
person_map_find(&map
0.008814572162289496
microcontrollers
0.008790111796891367
priority queues
0.008782691189017653
mandatory dependencies
0.008737067559085493
code block macros
0.008714462542637021
other inefficiencies
0.00854280385943494
int_vector_at(&vector
0.008505117566012596
i
0.008478517923729324
typed containers
0.008471577387225471
sort algorithms
0.00846835395673803
person_new("bob
0.008418367554710683
person_map_insert(&map
0.008332411933496002
compiler extensions
0.008284531289988979
sort_strings(players
0.008252261405477742
values
0.008214449316448902
ultra-portable intersection
0.008099600656799289
collection
0.007954990200199501
Clayfish
0.007915406384511693
person_delete
0.007789357727687631
count
0.0075369411428202575
C strings
0.007436633263108931
C++ std::sort
0.007423891628975343
various uses
0.007354914736207584
other functions
0.007310253284869796
header files
0.007276372088196631
int_vector_destroy(&vector
0.007232129843021837
loop
0.007079528308004953
red-black tree map
0.0070247917255965185
inline comparator
0.006972750158923891
printf("%i\n
0.006956898761591769
int_vector_insert_first(&vector
0.006933178932872652
other stuff
} person_t
0.006925392626293165
utilities
0.006842077649752316
POTTERY_TREE_MAP_COMPARE_THREE_WAY strcmp
#define POTTERY_TREE_MAP_VALUE_TYPE person_t
0.006788789237587893
person_new("alice
0.006786180229719487
int_vector_init(&vector
0.006763169504274074
pottery/intro_sort/pottery_intro_sort_static.t.h
0.006646043498165355
int_vector_insert_last(&vector
0.006641387920146458
quincy
0.006619637790657477
fred
0.006573901703989791
zack
0.006452720529363706
int_vector_insert_at(&vector
0.006368461860316631
C.

Unit Tests

Introduction

Pottery
0.0062184372212359075
POTTERY_TREE_MAP_REF_KEY(person
0.0062048597818654015
include path
0.006153523278614369
POTTERY_TREE_MAP_LIFECYCLE_MOVE_BY_VALUE 1
#define POTTERY_TREE_MAP_LIFECYCLE_DESTROY(person) person_delete(*person
0.006084279896630695
gary
0.00603647182116517
paul
0.005979461903416256
int_vector_t:

int_vector_t vector
0.005895637862644131
int_vector_remove_at(&vector
0.005868809615233359
real application
0.00584279939621645
ursula
0.005719986836077376
more ways
0.005609400036822469
Examples
0.005543507468451641
more examples
0.00549334924495447
folder
0.005422249279838515
sizeof(*players
0.005219388650696123
puts(players[i
0.0050918187589615044
rob
0.004936206531204274
wade
0.004765062115826492
