engine
0.03966967086828366
library
0.02430466475274559
default build system
0.022972626881574035
Status
0.020683013470056858
sync
0.019300647777535342
support
0.015816048288395206
Desciption
0.01581336707531337
N/A
JobManager
0.015186292170271452
platform
0.015061272495381186
features
0.014787261709727417
FileManager:Description
0.014527979113825982
android
0.01386415156896246
async ways
0.013427041664593064
libraries
0.013182090627109233
memory
0.012843956518336324
objects
0.01225155342466885
commom language
0.011990420226328923
AZGARD_DEBUG_BUILD - Compile azgard
0.011854845017973372
class
0.01183330193504278
time
0.011798129965636912
point
0.01160603155232467
consoles
0.011584599837800988
messages
0.011524345376737829
files
0.011401324957261186
job system
0.011391568047741454
more things
0.011226849444128472
look
0.011119005989047148
client code
0.011081490990381304
Ideia
0.010938589839356921
asio
0.010871275726136392
defined API
0.010847207481537129
Game development
0.010619876541124349
NetworkManager
0.009908129572763734
Api
0.00923676852129456
public AzgardGame
0.009186271956782687
instance
0.008285555306568
use
0.008260728719823526
resources(like name shash table
0.008233344012608137
Kit(https://developer.android.com
0.008167589245912349
MemoryMamanger
0.0078552478626574
ndk
0.007733715046552378
Dependencies
0.007664823311363158
Entity ent
0.007560073651352403
systems
0.007400238503003977
care
0.00738950510007406
Systems
0.007307987391273902
subset
0.00729277010390225
Libraries
0.0072695427213249186
management
0.007256654131123499
other situation
0.0071861474094892476
Azgard/Entity.hpp"
    #
0.007172370605267297
base classes
0.00716492674186018
dependence
0.007115965096397597
cara
0.0070312449682617085
https://github.com/wolfpld/tracy
0.007028366264957696
Remains
0.00695710236943073
Tracy
0.00695049740396499
CMake
0.006916742338878096
Linux
0.006915499867220158
debug build
0.006905038125159142
native SDKs
0.006870293696389978
user events
0.006860466642802186
documentation
0.006835440045726867
Windows
0.006801011683538266
Options
0.0067351620091055464
global pool
0.006690799871993297
C++11
0.0066590743042175445
Debbuger
0.006657233466638214
C++
0.0066560068842170615
Playstation/Xbox/Switch
0.00661473575205
shared lib
0.006588778006558438
EnineAPI Example
0.006521214227652633
Development
0.006481787389936344
recent c++ versions
0.00646383467301729
compile structions
0.006429732339047896
manager
0.006388522041501185
RenderManager
0.006385634352131349
promisses
0.006340802906096204
problem
0.006310545829556203
last c++ version
0.006305028308304192
Performance

Target Platforms
0.00620880617170279
mkdir build
$ cd
0.006207255745529957
cmake
0.006161083609363519
Async
0.006135069455267064
browsers
0.006086938304443697
promise.wait
0.00607768430053088
good
0.006075519425210872
suport
0.006059493760710737
OBS
0.00601952656451366
Compatibility
0.005971544853768399
requests
0.005893112990991708
wee
0.005830556875124254
network
0.005656713205565241
Engine(Server
0.005570823764087721
programmable app
0.005514246595983099
implementation
0.005479313224962593
a. Implementation
0.005421511266158877
Engine Server

Design Goals
0.005374635303618824
Add EntityComponentSystem
0.005364956183883186
Logger
0.005347101109214499
Game(Client
0.005311506502281197
renderer
0.005311364727877207
parrallel and data oriented design
0.00523719702131176
onStart
0.005080715752442842
Renderer - Everything
0.005052259983682746
client/server architecture
0.005011663235141132
calls
0.004973850679210299
game
0.004920018648486138
void render
0.004846486756173083
https://github.com/skypjack/entt
0.004820721754555305
JobSystem::getSingletonPtr().dispatchJob(gEngine.drawMesh(this->meshHandle
0.004781462273743228
call
0.004669536617730146
b. Initiall API
0.004562830092810197
EngineRuntime::getSingletonPtr
0.004360781493691032
entMesh.render
0.004274259635143678
