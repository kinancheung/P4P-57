Introduction

MPack
0.04807090611290447
data
0.03965787842999687
error
0.03281624822872068
JSON
0.02907629064479495
writer
0.023225714853274213
maximum performance
0.020069200790449278
example data
0.015645454218731477
wrong number
0.014672643159409492
strings
0.013306734535651059
MessagePack data
0.012508308283090219
specific types
0.01216172456707105
file
0.011741805517397218
typed nodes
0.011452573404100077
size
0.01129473764804516
elements
0.011008890240124268
tree
0.010948308376107909
short feature table
0.010923071522801914
above code
0.010345337537174929
maps
0.00996946793190478
numbers
0.009953716871663904
arrays
0.009526220695889693
socket write
0.009303741480072184
decoder
0.009129545481944069
schema
0.00887767147510971
tests
0.008538735563599261
Helper functions
0.008471782071751097
values
0.008427785482920688
debug checks
0.0083097336145327
expected type
0.008285456355112929
features
0.008223123702594998
flush function
0.008221273520548675
UTF-8 encoding
0.008220760751305808
memory allocation
0.008169604137985257
other MessagePack C/C++ libraries
0.007937659062153754
= mpack_ok
0.007875654722227341
Node API
0.007751045124278696
node
0.007606698468846999
errors
0.007395758790116586
growable memory buffer
0.00737007955788335
MessagePack serialization format
0.00711775341894188
data!\n
0.007079893739571733
return
0.0067703439525541856
C implementation
0.006380582387655582
other implementations
0.005998289475118103
OSes
0.005929966845543634
untrusted data
Lightweight
0.005903205890976065
WebAssembly
0.005764624508372121
applications
0.0057021986146382235
use
0.005688407857443482
lots
0.0055971434218946466
schemaless serialization formats
0.005521476004086539
desktop
0.0055187744087362885
quotes
0.005453014759151693
modern compilers
0.005372409865975882
Full-featured JSON decoders
0.0053552646130091116
icons
0.005336561849609989
mpack_ok
0.005266473721491834
Special characters
0.005222471270947427
backslashes
0.0052222089608315965
benchmarking suite
0.00522169893830076
thumbnails
0.005202371263694791
series
0.005198631433995302
complexity
0.005197059600832222
base format
0.005177899359441683
compression
0.005150796514283244
RapidJSON
0.005146153494949292
chunk
0.005127701332117079
project
0.005120936573516956
mobile games
0.005093414317314862
minification
0.0050684925622042085
user
0.005065592953419341
platform
0.005062108279696536
various entries
0.005059085990044035
upfront
0.004983401161058142
Arduino
0.004981609917246345
Linux kernel
0.004978642838170293
Strings
0.004942228722583654
need
0.0049288188494664735
string unescaping
0.004923271636642267
whole object
0.004920160787427325
Small binary blobs
0.00491830183976652
components
0.004913579569162295
above issues
0.004901015100644805
mpack.h
0.004836072874376933
appropriate storage
0.004832237707542511
space inefficiencies
0.004798823431969412
bit microcontrollers
0.0047963767568869504
CWPack
0.004790748836028383
descriptions
0.0047834976802701495
corresponding mpack_finish_map
0.004730063802653944
amalgamation package
0.004677291410514803
band
0.004665225784292251
buffers
0.004661827781900589
case
0.0046560952028840185
parsing
0.004651749029181242
floats
0.004626996898428119
security vulnerabilites
0.004614223816396371
minimal memory usage
0.004606756759901054
main reason
0.004603483362355785
memory-constrained environments
0.004596239456886104
mpack_build_map
0.0045955952823810535
key-value pairs
0.004589472587522939
node tree
mpack_tree_t tree
0.004534478587052624
mpack_writer_init_growable(&writer
0.004513433926185827
parser
0.004504822870623152
mpack_tree_init_filename(&tree
0.00449032257524702
special "nil" nodes
0.00448089637529056
greater potential
0.004466030170014762
files
0.00445489767725186
large, and minimal decoders
0.004442170364128881
compile-time
0.004408372946342529
homepage-example.mp
0.004405641108194184
writing
0.004377303075549894
dependencies
0.004353432406834667
Write API encodes
0.004317955118424083
encoder
0.0043066039593408515
subsequent writes
0.0042791835988934745
codebase
0.004254560625756613
Numbers
0.004219020639870611
Build Status

Unit
0.004209511496690753
buffered reader
0.004174539980980262
hard-to-find platform-specific and locale-specific bugs
0.004160936327780378
up-front sizes
0.004117872242385923
first place
0.004112219429994286
false/zero values
0.004106624560098872
Comparison
0.004056600049673126
memory buffer
char* data
0.0040309454182032795
map keys
0.004030480306096191
unit testing suite
0.003982485968760614
library
0.003951721666205175
Incremental parser    
Tree stream parser  
Compound size
0.003946237840424666
pre-allocated or stack-allocated buffer
0.003944320083261912
test
0.0039237926983293845
human-readable format
0.0039209295018197326
mpack_tree_parse(&tree
0.003745984637807321
information
0.003693751999292537
mpack_build_map(&writer
0.0036562495138464223
mpack_complete_map(&writer
0.0034974472242556764
libc requirement    
Growable memory writer    *
File I/O helpers
0.0034908355803826892
embedded
Extensively documented
Extremely fast

The core
0.003349227451520157
