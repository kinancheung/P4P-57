lua Virtual Machine
0.040046570086310795
lua VM
0.03764622991808899
bare wasm
0.02668312300996578
Compilation performance
0.024741062170318986
WASM
0.024226139401858728
browser
0.02332471116734976
Raw JavaScript
0.02166666395653055
scripting benchmark
0.021225540825144103
solution
0.020563835565943867
WebAssembly
0.02023155177455242
web
0.01787139270891193
baseline
0.01697510325688609
AssemblyScript project
0.016389543254639566
lua code
0.01614635085125042
app
0.012380634375924477
number
0.012320035536811415
built-in JS runtime
0.01189607132928272
C code
0.011829984611531782
Results
0.010966817541812869
first layer
0.010065535512673845
stock lua virtual machine v5.4
0.009934104567843712
untrusted third-party code
0.009913322760693361
DOM
0.009091058023688349
array
0.009086282894175533
heavy data transfers
0.009046860267765786
main JS context APIs
0.008984951986374782
script
0.008861426295103607
guest context
0.008739586224897587
concern
0.00866924139137528
future
0.008539429835564136
various possible solutions
0.008444596331849602
workload
0.008383006181831954
default
0.00832266227978173
cost
0.008163839932653353
fengari
0.008095175641601567
dynamic sized data structures
0.008071763527011364
security
0.008051562864286254
bare metal" wasm solutions
0.007910779447505888
practice
0.007903898796821721
hard limits
0.00785447457616038
features
0.007814308966513214
entire emscripten toolchain
0.007724167434827056
Sandboxing
0.007701560832774795
scripting capabilities
0.00758143975185255
compilation toolchain
0.007167644037376546
many APIs
0.007081951943240717
calls
0.006143622574743128
new Function
0.006115615318107492
numbers
0.006084081921004924
lots
0.005946429428463506
SDK
0.005779218832246444
output
0.005766595199879336
lua libs
0.005756065912087654
input
0.005641817013281354
host
0.005529219593844795
overhead
0.005485062788734682
small tasks
0.005431061620954506
day
0.005416624249419388
libraries
0.005370724178246514
Chances
0.005346121383531666
finish
0.0053135077738501665
edge
0.005307718708994358
test
0.0052672216415464036
start
0.00525965815063369
basic scripting amounts
0.005185289821566419
end
0.005168083644034723
work
0.005154205424798997
arguments
0.00512975001117736
unit
0.005094276995668114
sandboxing
0.005068769686049813
layers
0.005047856896930865
reasonable subset
0.0050418050492659055
Browser compatibility
0.005030118521142553
prefered option
0.005013806797763606
raw CPU power
0.005007647730593715
simple JS function
0.004991703681886427
Firefox
0.004979121446859181
aspects
0.004974907149149379
last bit
0.004914470867813969
optimized language
0.004900305713913348
order
0.004899528233868425
implementations
0.004858859833637043
JIT-ed
0.004824390084708934
mid 2015 MacBook PRO
0.004800830077831773
prime factors
0.004727353772703988
Chrome
0.004695982066585952
VM-based solutions
0.004687380399930469
25x
0.004683482505714164
head
0.004680269861888921
similar values
0.004653299259577668
rest
0.004636982590903772
orders
0.004620150970765076
Benchmark
0.004619316744285271
build
0.004606365399943203
right
0.004565043654096474
intensive function
0.004549818857841724
precompiled chunks
0.004470455263536625
non trivial speedup
0.004468267057137518
low-level
0.0044380307422687785
time
0.004380618616997806
AssemblyScript

AssemblyScript
0.004348699045499739
naive and inefficient algorithm
0.004345513977829554
106kB
0.004327484539632779
virtue
0.004325461450839117
custom bits
0.004311010372941605
webassembly.studio
0.004287017484601957
un-sandboxed raw JS
0.004268394477970481
heaviest part
0.00426577685573673
languages
0.004242049657366204
moment
0.004146129845326274
little over 1MB
0.004142440951693917
guest/host interface
0.004120471302575254
difficult part
0.004118611621536839
transformation
0.0041052777603235845
binaryen compiler backend, wich
0.003978257155767313
airy" JavaScript bootstrapping file
0.0039024439137726368
future work

Benchmark
0.0038100706633850704
benchmrak
0.0037817816116132927
comparison
0.0037802355149436986
evil eval
0.0037156223684064803
scripts
0.0036873398442668196
setup
0.0036698709838703407
such escape
0.003664636054609559
C to wasm

Low-level C code
0.0036326268880959595
previous one
0.003611916872667693
sandbox
0.0035739218184423164
problem
0.003505219150717133
nave approach
0.003466812443799709
