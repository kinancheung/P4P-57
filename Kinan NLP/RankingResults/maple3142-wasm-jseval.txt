duktapeEval
0.06163870168329283
mod.newFunction([a
0.04291231689773978
data
0.041649182226276844
const
0.03986617844892592
b
0.03934674462352655
Evaluate JavaScript string
0.038130913932838205
a+b
0.035260349557266056
+
0.031968255904708
Promise
0.029393205994502618
quickjsEval instance
0.02842245776440509
friend
0.024272567525408132
newFunction
0.024109831108918536
body
0.022692527974609775
console.log(mod.eval(1
0.021553903905094707
JSON.stringify
0.02095468752789055
Instance#newFunction(argnames
0.020883121567487575
function
0.02070992495322361
value
0.02066460399326915
new Function
0.02026080912809179
good choice
0.020076056198628903
version
0.01968490439013698
wasm-jseval

A safe eval library
0.019497464453851646
any
0.019450789587903236
Duktape engine
0.019333368184270318
ES5 syntax
0.01930530125462952
Instance#eval(code
0.017826867556295922
ES6, ES7 capabilities
0.017769986021015552
Duktape/QuickJS
0.017608047417243745
example var a={};a.prop=1;a
0.017373826865591538
normal eval
0.017310593510494812
complete feature set
0.01721683223146364
ES10
0.017003865553762036
quickjsEval.getInstance
0.016943989669219103
WebAssembly
0.016863751966658087
mind
0.01635212580537971
prop
0.015798249496382043
bigger size
0.015753478656933047
console.log(add(1
0.015423007303364515
complete JavaScript support
0.014909440850387682
API

duktapeEval.getInstance
0.013628555898825381
Duktape Demo | Source code
0.013419681938108904
browser
0.01291949124723464
node
0.012211547836364012
script
0.011628491388379394
