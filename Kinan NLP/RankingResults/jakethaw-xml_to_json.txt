xml_to_json.c -o xml_to_json.js
0.056675221443265165
gcc
0.05396248846870095
_
0.04136521260111492
XML
0.0353671860282164
Usage example
0.03405083919459264
input
0.029251845607557177
xml_to_json(xml
0.025860992879570183
UTF-8
0.023092901572026182
xml - XML string
0.022932855950852822
indent - Indent
0.022576036934267022
-1
0.022454942042188
printed JSON
0.022453956179797712
arguments
0.02228889584991237
conversion
0.021142776274544268
indent
0.02109476469840175
var xml
0.020487622830099517
world</x
0.019367465293175158
SELECT
0.019296236668477063
text
0.01873587022593611
Implementation
0.01821424775529122
-O3
0.017899937849405984
N
0.017789206844938107
WebAssembly
0.017157952218694244
val 2">&amp
0.01667563230644412
free(xml
0.016434614634909434
xml_to_json.dll
0.016064722881303218
xml_to_json.dylib
0.01597319940864338
Windows
0.015923062343295002
free(json
0.01559223355268041
world
0.015542434070262841
debug information
0.015032286162274342
option
0.014511657802913509
stdout
0.01429572921980093
abc
0.013909028748427473
xml_to_json.so
0.013849513418506001
null
  }
}


SELECT xml_to_json(<x><y>abc</y><y>def</y></x
0.013537542712678687
Compile
0.013234733903119647
run-time loadable extension
0.012330997840847355
console.log(UTF8ToString(json
0.011801626136598686
gt
0.011583607762621793
>def</y
0.011357607462984826
xml_to_json(xml, indent) function
0.010906040413569393
Emscripten
0.010740498226733888
xyz</x
0.010713724565349312
lt
0.010711924779549869
i8
0.01064329345635786
EXPORTED_FUNCTIONS=["_xml_to_json
0.010097380173610015
abc</y
0.010000164559759996
xyz
0.00911185873045939
@attr2
0.009049911410685922
EXTRA_EXPORTED_RUNTIME_METHODS=["allocate
0.008900017739675244
y/>b</x
0.008347177927480924
implementation
0.00809133457104624
@attr1
0.008031566369913045
following explaination
0.007593899316391244
Add test cases
0.005891521980080782
