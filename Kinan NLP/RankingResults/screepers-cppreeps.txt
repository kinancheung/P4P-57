JavaScript
0.02621829166630339
src
0.025256191378472126
Emscripten compiler
0.023424973495960455
LZW
0.02019971906928681
CPU
0.02013528698183608
.wasm files
0.019753188420836405
guide
0.018487982636287918
other source languages
0.01822525072028285
WASM
0.01820395394238086
WASM usage examples
0.01818901944415382
C++ API
0.018050964664526176
git submodule update
0.017830842796340913
Native C++ source code
0.01650736307237045
other code
0.016169234059034882
indirect way
0.015851365404856977
KIB string
0.01548231282102914
own building system
0.014542818728760542
us/KIB
ZIP ratio = 0.0527344 (enc/src) str="AAAAAAAAAAAAAAAA
0.01361024154789919
Screeps/PTR
0.013055200654216293
emsdk
0.0127229776485668
Screeps game
0.012580391704084629
source
0.012331909850644673
const enc
0.012287438305561735
KB
0.01204348919937614
JS
0.011038584462348454
decode
0.010605173400964415
script file example
0.010370010344823708
=)


Build project
0.009208332479452293
Linux/iOS syntax
0.009032794310618772
enc/src
0.00895163845157347
C
0.008738524381676431
loop.cpp
0.008586187562202379
module.find_path(creep1
0.008510953306211705
/dist folder
0.008445203771802755
lzw.hpp
0.008370892089521423
utilities
0.008155169369946697
em++
0.008117922057262701
wrapper
0.00810561041319488
pair
0.008104040037769619
details
0.008101759333993505
compilation
0.008073184296954897
Header file
0.008027715794700194
Download
0.007969906463552102
creep2
0.007849877055588117
Push
0.007817875213664238
MIB
0.00779733352547712
compiler toolchain
0.007778825532609675
grunt
0.007696918561685169
path
0.007667284109495402
bindings
0.007651957250170606
sources
0.007636027372101227
Lua
0.0076193279337732085
Ololo
0.007442527444221929
Python
0.007429705551714934
Build Status

Header-only library lib/lzw/lzw.hpp
0.007401692414165122
gulp
0.007395904617306085
original LZW compression/decompression algorithms
0.007366126896272713
construction
0.007356609407605651
implementation
0.0073257546729057505
string
0.00730816217010292
NOTE
0.007151504761096147
ratio
0.007131461800303378
LZW-based codec
0.007082013615873305
initial aim
0.007049858381707566
dec
0.007042165713919194
len
0.006994992308805724
wasm_loader
0.006966665517972587
wasm
0.006957749222353572
Utility pack
0.0069161165079003935
WebAssembly
0.006904970605703447
require("wasm_loader
0.00683984101127913
UTF16_pack> codec functions
0.0067944390390636995
LLVM bitcode
0.006765862252804056
Current repo
0.006761378230722943
binary GUI uploading
0.006740273940718779
DOCS



WASM modules
0.006733996057296838
mod.lzw_encode(src
0.00672475178955141
Rust
0.006701812903998594
assert(src
0.0067017097464927775
Native performance test
0.006681936268870937
module.native_function(arg1
0.006660812524985658
help
0.00666000771686048
git clone
0.006650970434747515
result
0.006643520504642659
Submodules updating
0.006604805838857969
Open Source
0.006488933884936951
experimental feature
0.00646651406462654
low-level bytecode format
0.006376368014593299
EMSCRIPTEN_BINDINGS(lzw
0.0063497714465264535
Memory view
0.006315178589668421
\"stats\":{\"profiler.findInRange\":0.06027972683740784
0.006308885937853772
Windows
0.006246562742859722
emsdk_env.bat
0.0060271770911576195
browser
0.0059275930140783115
official example
0.005868009931635965
WebAssembly (WASM) format
0.005852353711659175
module
0.005768761417192354
packed_mem
0.005721053058950123
lzw_xxcode(RawMemory.get
0.005624975227599272
random)

JS performance tests
0.005549763926156576
native signatures
0.005526038047695522
experience
0.00544733371516818
CPPREEPS

Example
0.0053611333692484
wasm_filename
0.005330916592272649
latest


Prepare building environment
0.0051826089932719005
Thanks @ags131, @primus, @tedivm
0.005180530255820409
