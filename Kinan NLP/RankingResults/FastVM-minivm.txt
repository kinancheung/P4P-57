MiniVM Logo
0.060021522770808224
cd minivm
0.023366316269136413
benchmarks
0.02052472797935377
Paka
0.019319215571371267
JIT
0.018567377427584107
instructions
0.01754841128421845
register-based ISA
0.014258184006978165
better performance
0.013639733067679934
opcode do_putchar
0.013041273965756843
memory usage
0.012769286380898515
good ol C
0.01257440556282795
time
0.012427961150828202
language
0.012244887635733647
others
0.01185512640465863
function
0.011498603012335896
native code
0.010889937917986516
tree sizes
0.010853605112396853
target benchmark languages
0.01067606171653618
allocations
0.010544335902421426
Leverages Cosmopolitan libc
0.010195574968873957
file
0.010144317088502872
malloc
0.009992358062153258
plain stack machine
0.008675668421794548
linux-opt
0.008473309870795422
single instruction
0.007867811195646843
number
0.00769983214965031
hair
0.0076942960563590995
deallocations
0.00737187904701994
Binary Trees
0.007344208494761082
functions
0.007343931424481878
Node JS
0.00729838925815819
application
0.007187876400218843
core types
0.0069943466791792
binary tree benchmark measures
0.006963671201351375
runtime
0.006951594954749327
efficient GC
0.006904447616449566
best way
0.006895472978805278
architecture
0.006847070137514452
fread
0.0064845412619374985
selected opcodes
0.006448772953534175
small part
0.006426155563828366
single Discord call
0.006244498903199254
project
0.006007691624328299
small and fast cross-language Virtual Machine
0.005360228826973435
online use
0.005355361224395909
MacOS
0.005316950844651664
entries
0.005196556556314887
Linux
0.005153392016696026
r0
0.005138703702548467
JITd
0.005038086257654188
Windows
0.004860702249010383
length
0.0048469039360095
github actions
0.004833508948830752
argc
0.004832830936619389
fib
0.004801142357066953
compiled languages
0.004779585823265478
Building
0.004756278061772266
grain
0.004755150461810839
Scheme
0.004718034166684345
salt
0.004700931538330918
paka
0.004698912758908346
source
0.004687514129980212
artifacts
0.004663988171670687
increment_reg
0.004662863053589105
par
0.004640978375112677
r0 1
  jump
0.004633010387822766
array
0.004610739258274453
first item
0.00458858896359975
Allocations
0.004551530485179872
users
0.004528355488641341
unit
0.004475229260389034
overhead
0.00442696520916899
optimizations
0.004407472512021973
node
0.004381732445499828
instance
0.004356552641720708
-Ofast flag
0.00434692925458108
Lua
0.004341741106219188
vm/ directory
0.004339068085783061
work
0.004337228705743563
Types

Minivm
0.004328729625814505
built allocator
0.004320147968626247
total
0.004307490156801222
values
0.004303005288326414
closures arrays
0.004293555195943158
strlen
0.004279576996568025
headers
0.004276658837133279
clone https://github.com/shawsumma/minivm
0.004270839026976505
fwrite
0.0042633574207511845
WebAssembly
0.004255777166324906
basic mathematical operations
0.004255511392962499
select set
0.004252204370608848
usual entry point
0.004242063121881444
optimal feature
0.004239228596003314
common type layouts
0.004237815304869569
hyperfine
0.004219052373457154
results
0.004190358785344591
text
0.004149645629175223
Benchmarks
0.0041339684061710265
clang
0.004133384905096896
property
0.004130387329524501
entire codebase
0.004129868450837702
green check mark
0.004122917077307592
luajits slower modified version
0.0041042335204317364
dependencies
0.004101923109898369
easy cross platform portability
0.004094177206541765
MacBook Air M1
0.004093363004776697
given depth
0.004039486014705209
assembler
0.004036638852792402
machine
0.004014115920045311
hand
0.004005360608444063
peril
0.003970351172506229
fib(35
0.00394934699644981
library
0.003914659792183225
recursive fibonacci benchmark computes
0.003899069670399117
emergent properties
0.0038404146933340537
GB RAM
0.003830043455829708
fopen
0.003819733032578697
large amounts
0.0037833255707008136
luajitwith
0.0037783784920634505
recursive manner
0.00374555439571057
fair margin
0.0037373270165534734
case
0.003712150775112855
substitute
0.0037016809838205187
printf
0.003693055214917469
compiler
0.0036887438806526007
Sweet Deets
0.003685037140595558
modern hardware
0.003670215033065704
full story
0.003659740044965166
flexible data model
0.0036494143457880554
least what a 30 bit signed int
0.003625726604921561
sun
0.0036150765202420717
implementations
0.003597773882239125
exploration
0.003592899272170145
length
mutable data
0.0035860670769756967
fast interpreter
0.0035855197132967304
bad thing
0.0035828715927395186
realloc
0.00357922539215085
following
0.0035746520352875474
first version
0.003569101068597638
@4984#4984
0.0035664395869276335
growing and fairly unstable API
0.0035370727780886357
registers
0.0035318701002615468
subsequent optimization
0.0035302362077529884
decisions
0.0035162496031188907
benchmarking
0.0034998681339504763
malloc and putchar

MiniVMs only dependencies
0.003446700725965435
ASM
0.003435070534430593
original implementation
0.003377726017823225
Recursive Fibonacci: Functions and Math

Fibonacci Runtime
0.003362622085130524
def fib(n
0.003358321556850904
single little thing
0.0033173132275945913
details section
0.0033107395085693863
Shaw
0.003209574447420124
final destination
0.0031393126023303453
README
0.0031254658036251118
= x + 1
}

A stack-based VM
0.00310971495817622
jump_if_false
0.0030943047592562915
load_var x
  increment
  store_var x
end_of_loop
0.0030900453515750465
journey
0.003084018520053868
loop
0.0030669342071218166
reason
0.0030644608237361823
tiny 1,000 LoC base
0.003062533090353324
few reasons
0.003045042282539722
common data-access patterns
0.003009543516103566
return
0.0029359966037102473
friend
0.0028955583519965416
VM
0.0028464796073961653
brick
0.0024269186130459214
times
0.0023394322097592644
