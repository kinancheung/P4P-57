auto numbers
0.029914083390036827
auto res = cli
0.02602707724809954
req
0.020341914483743437
res
0.019046384213448005
data
0.017261795782090018
size_t data_length
0.0168865237121609
text/plain
0.016420935117262822
Error handler
0.013643501958734611
Response
0.011764704599509557
cli
0.011473888843018157
#
0.010222161190565644
const httplib::Request
0.009779860830847146
content
0.009743093837986222
httplib.h
0.009686952905629619
request
0.009414433918767603
data_length
0.00933123271676552
req.has_header("Content-Length
0.009251330689198332
svr
0.008980735596626979
Put("/resource/foo
0.00885736733812502
Default thread pool support
0.00870940249137423
DataSink
0.008565324187730308
directory
auto ret = svr.set_mount_point("/
0.008225927825959486
Basic Authentication
0.008074782793052954
CPPHTTPLIB_OPENSSL_SUPPORT
0.007814745073860934
server
0.007513152049473017
Get("/hi
0.007183441859469058
SIGPIPE
0.0071736603567233125
ret
0.007010536195208508
seconds
0.006814034013827626
res->status
0.006768553996933863
std::string body
0.006591407458108717
//
0.006384749308648513
one
0.006277666401723581
body.append(data
0.0058085354338001695
path
0.005735629400342741
OpenSSL library
0.005548473647556946
httplib::Client
0.005526388552067252
Continue response
0.0055154828971147206
convenient way
0.005514048139320932
./www
0.005344064542120702
Windows
0.0053082715635501395
Get("/
0.005235463887434229
res->body
0.005144720134373332
c
0.0050002955871280485
uint64_t total
0.004825146260047396
text default
0.004816861986283045
Remove
0.004693599829773373
return
0.004632124420612116
public TaskQueue
0.004385768014877049
sizeof(buf
0.004378575784359526
NOTE
0.004327347439581226
sink
0.004245308781056032
snprintf(buf
0.004216605101153284
h1>Error
0.00418557420378018
sink.done
0.004128423422751624
MIME type mappings
0.00405699137551374
res.set_content(buf
0.004002463934954
process
0.003950351622254104
default
0.003883867681888902
uint64_t len
0.0038213547382280715
Range
0.0037988786126194295
Default
0.0037299875924515823
Simple examples
0.003709579138962274
DATA_CHUNK_SIZE
0.0037052928682218605
Timeout

svr.set_read_timeout(5
0.003699898362224249
svr.new_task_queue
0.00358508739428879
const char
0.00357653023622319
Server example
0.0035724853699174233
Mount
0.003491403331480839
bytes=1
0.00342786865026032
message body
0.0034148889869458987
OpenSSL
0.0033123163498068554
connection
0.0032951728553040098
res.set_content_provider
0.003260344877278714
split.py
0.0032565470137995824
./www1 and ./www2 directories
0.003241017157659759
python3
0.0032346927608345177
%lld bytes
0.003218591780303701
httplib.h file
0.0031210008655146925
res.set_content("Hello World
0.0031165826190026075
application/json
0.00311375889497152
Post
0.0031111219866964265
Split
0.003108324253545184
xslt+xml
mp4 video/mp4 xml application
0.0030316824054623416
HTTP
httplib::Client cli("http://cpp-httplib-server.yhirose.repl.co
0.003005314338103711
errors
0.002992978289005144
std::exception
0.002974757145024845
HTTP
httplib::Server svr
0.0029345992337918847
req.path
0.002934275524264658
Extension MIME Type Extension MIME Type
css text/css mpga audio
0.0028657157840224707
Read
0.0028120956943883018
Write
0.002808184263487172
.h
0.002803437905291248
Result::error
0.002798421759936826
libssl
0.0027312745697513135
class YourThreadPoolTaskQueue
0.002718089824911776
list
0.0027023774330753184
e
0.002693205280878126
cli.set_write_timeout(5
0.002683694681265829
error
0.0026565164241974326
BindIPAddress
0.002650861643244993
!
0.002647819629553254
ExceedRedirectCount
0.0026411730163430278
user
0.002622208269280683
SSLLoadingCerts
0.0026182415917966086
Constructor
0.0025808605082341066
more detail
0.0025733848783916343
YourThreadPoolTaskQueue(size_t
0.002572050307999795
Success
0.0025688024595893607
SSLConnection
0.0025599505855115525
folks
0.0025542831589891154
need
0.002541798216227089
libcrypto
0.0025381792316395424
great contributions
0.0025322074744455808
https://github.com/google/brotli
0.0025283163936330195
std::min(length
0.002520776636804949
Necessary libraries
0.002503851051065005
CPPHTTPLIB_BROTLI_SUPPORT
0.0024991057500517114
Repl.it
0.0024920836218192723
bool
0.002466600319162307
Unknown,
  Connection
0.0024648600312614857
svr.set_write_timeout(5
0.002450334619050409
Post("/resource
0.002437999058822065
sink.write(&d[offset
0.0024361466542103228
libz
0.002430834259387708
compression
0.0024298074666235063
feature
0.0024226326431081675
ls
0.002410438150429913
_
0.002404270207840316
YourThreadPool pool
0.0023840637765157645
SSLServerVerification
0.0023821285504068085
CPPHTTPLIB_ZLIB_SUPPORT
0.002363389349466529
Cygwin
0.0023620747561414
Run client
0.0023583116925141537
cases
0.00235483947731537
multi-threaded blocking HTTP library
0.002353705897695891
operating systems
0.0023508252478793954
EXPECT_EQ(200
0.002349242711961942
scheme-host-port string
0.002345297794879747
runtime
0.0023339810723945163
.Get(R"(/numbers/(\d+
0.0023308679213636346
pool_.start_with_thread_count(n
0.0023280622848643167
specific network interface
0.0023080574210807697
https://repl.it/@yhirose/cpp-httplib-client
0.0023033724305591037
IP address
0.002297351940043297
Special Thanks
0.002292344690980172
Interface name
0.002291498490125237
Options
0.002280995566820235
Get("/world
0.0022785257688575263
xhtml+xml
jpeg
0.002270648648683638
ThreadPool
0.002269960846343595
cli.set_follow_location(true
0.0022689343116794915
multiple interfaces
0.0022664832361190277
files.back().content.append(data
0.0022644116123382687
regex
0.002258515848229523
response.status
0.002257617542137709
svr.set_keep_alive_timeout(10
0.002239463286066084
Yuji Hirose
0.0022273086868025956
e.what
0.002225688234722458
res.set_content("world
0.002222251333857661
svr.set_file_extension_and_mimetype_mapping("cc
0.0022210571618720676
svr.set_file_extension_and_mimetype_mapping("cpp
0.002216530897597784
\"world\
0.002208257410990639
cli.set_decompress(false
0.002207830497634
h\ne\n\nl\nl\no\n
0.0022037883137679816
internal communications
0.002201225520079622
hello.txt
0.002199277988599231
level
0.0021980537658573378
enqueue(std::function<void
0.00219420127303165
Server
httplib::SSLServer svr("./cert.pem
0.002189409255885439
true\n}\n
0.00218828607162369
svr.set_idle_interval(0
0.0021856935045052794
cli.set_read_timeout(5
0.0021846221981699984
program
0.002178702804213825
Compressed data

SSL Support

SSL support
0.0021775857511945984
socket
0.002176610092375497
xht application
0.002170637434568159
Expect
0.002170354846318258
data](size_t
0.0021560447611501735
Brotli Support

Brotli compression
0.0021551578454409126
Get("/stop
0.002153975598933544
sink.write(data.data
0.0021523732213213167
bytes=0
0.0021422805815360497
new ThreadPool(12
0.002137279817768697
2nd order
0.002133548669024486
Get("/stream
0.0021266573927850147
svr.set_file_extension_and_mimetype_mapping("hh
0.0021266347342495545
fn
0.0021245112444932732
License

MIT license
0.002118626070387999
cli.set_ca_cert_path("./ca-bundle.crt
0.002111389023109749
versions
0.0021081273288293834
text/event-stream
image/svg+xml
application/javascript
application/json
application/xml
application/xhtml+xml

Zlib Support

gzip compression
0.002106387428615392
jpg image/jpeg xslt application
0.0021050189681799877
virtual void shutdown
0.0021039432914246045
Get("/hello
0.002095749998618261
User defined file extension
0.002086417962458032
std::thread::hardware_concurrency
0.0020863588599054064
./www2
0.0020844129691099085
override
0.0020829744159025962
Post("/content_receiver
0.0020736597576701795
cli("localhost
0.0020735191766269347
CPPHTTPLIB_THREAD_POOL_COUNT
0.00207068575785672
Get("/body-header-param
0.0020683542156624034
req.files.size
0.002054382924057161
cpp-httplib
0.0020537916964658803
cli.set_keep_alive(false
0.0020495519594212553
Post("/person
0.0020353828335528774
header
0.002031566015936256
content provider

const size_t
0.0020303529158330466
SSL
0.002025714372184062
file1
0.002024472203820349
gzip
0.002006310034786501
h
0.0020037578290345117
file2
0.001999632158755654
simple toy
0.001999057620012657
res.set_content(body
0.0019949444338371765
data.size
0.0019929156919037613
specified base directory
0.00198850158251625
milliseconds
0.001983456794539549
data->size
0.0019788858096243143
./key.pem
0.0019780829549633817
Get("/range/32
0.0019755137599887025
cli.set_proxy("host
0.0019727137367448033
file.content
0.0019698878305552787
file.filename
0.001959470052347789
cli.set_basic_auth("user
0.001958307053391098
MB

Server-Sent Events
0.001952045872690681
cert verification
0.0019492313318505627
svr.stop
0.0019441196417222194
followings
0.0019427547412742391
available port

int port
0.0019386549607868706
red;>%d</span></p
0.0019367699636373766
sink.write("123
0.0019363970249791165
cli.set_digest_auth("user
0.0019340315661250719
std::vector<char> data
0.0019205054223862229
Client

#define
0.0019178536413284588
httplib::make_range_header({{1
0.0019168330676994068
sink.write("345
0.0019154174019449593
body.size
0.0019021820928034055
Content
0.0019008831456581992
Redirect
0.0018931348956298753
your_logger(req
0.0018824299163809168
Windows.h
0.0018810572152520428
namespace httplib
0.0018758290597319224
sink.write("789
0.00187102139763782
value
0.0018681184484916962
HTTP headers
0.0018632690669673306
bytes
0.0018541288552454025
POST
0.0018486856652740508
file3
0.0018482538121804034
req.is_multipart_form_data
0.0018395433379563514
int main(void
0.001834604777820661
tar
0.001833918265153893
Expectation Failed response
0.0018269415168278322
final status
0.0018227810648502414
httplib::Params
0.0018227507948634732
-1
0.0018118241002046936
sink.write(body.data
0.0018028330372544333
cli.set_proxy_bearer_token_auth("pass
0.0017774615387564723
req.has_param("key
0.0017738829814284863
httplib::make_range_header({{100
0.0017698052732029836
application/gzip
webm video/webm zip application/zip
mp3 audio/mp3 wasm application/wasm

NOTE
0.0017598279676433915
content_reader
0.0017508073956781721
WIN32_LEAN_AND_MEAN
0.001740013210433068
application/x-www-form-urlencoded
0.0017111934637757543
auto res = cli.Get("/hi")) {
    if (res->status == 200) {
      std::cout << res->body << std::endl
0.0017102386182697156
john
0.0017027887212167781
static file server methods
0.0016831037936151938
rss+xml
0.0016618951739613543
webm
txt text/plain wav audio/wave
vtt text/vtt
0.001660288414845492
text2
0.0016578549785951206
Progress Callback

httplib::Client client(url
0.001627832815024476
code
0.00156598837524095
otf font/otf
html
0.00154494154699151
js application/javascript
webp image/webp json application/json
ico image/x-icon rss application
0.001507063449966899
bmp 7z application
0.0014565608283927545
C++11 single-file header
0.0011715886615665785
