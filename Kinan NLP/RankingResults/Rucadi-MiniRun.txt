runtime
0.03662013960086202
discrete dependences
0.03541995443308462
MiniRun
0.02868794568108353
tasks
0.027796686869861975
task
0.024294233279001976
threads
0.019613696561470863
CUDA
0.015284148155533816
thread
0.014021063186341083
one
0.013418013956112067
group
0.013416960266913644
int
0.013357667401898483
number
0.01325022592591939
symbol
0.013234245367330073
k < size
0.012823933002738286
data
0.012093691626555164
+
0.011890104285104914
pointer
0.0112983833167851
code
0.011275270924145249
fib(n
0.010932264883395099
object
0.010883612045838948
MiniRun::deps
0.01063736810303858
execution
0.009952407033416657
synchronization
0.009934295251022955
function
0.009924483082370126
for(size_t i=0
0.009915085008042506
task-based runtime
0.009762308788117896
a_group
0.009136057121411472
const matrix_type
0.008893693506456853
capability
0.008758199177725324
life
0.008672248044971062
ones
0.008542165590358091
specific group
0.008368876376296241
VStudio compiler
0.00830754670803668
dependence
0.008086238663106057
time
0.007988944658911491
run.createTask
0.0074836441554113325
runtime_object].createTask
0.007354343412911536
taskwait constructs
0.007334972679633522
intention
0.00725957718947064
miniruntime
0.006886253656523379
j=0
0.006613583732324022
conjuction
0.005857470510646435
project
0.005766490106415209
simplicity
0.005754205458232225
IN_DEPS
0.00573866403786796
OUT_DEPS
0.005711136485634772
other runtimes
0.005709493266028046
case
0.0056907271053650565
block
0.005688236278966504
coexists
0.005606572149134058
group++
0.00550346589270086
example
0.005491912216398533
matrix multiply
0.005484338108623723
matmul(MiniRun
0.005477512199293355
=
0.005474533072127714
terms
0.005310680586773706
dependencies
0.005292105448553713
Windows
0.0052868689133741265
c
0.005276874946450466
indepdendent
0.005274389050612881
parameters
0.005259173461477584
types
0.00522690150898911
aim
0.005217656989183927
wich
0.005215233588158908
b
0.005177939147847593
SPECIFICATION
0.005160237581613981
Dependences
0.005158965641227954
Matmul
0.005154251156368453
READ ACCESS
OUT dependences
0.00514298549281852
penalty
0.005130220826865926
OmpSs
0.005104391193074681
WRITE ACCESS
0.005097500884940084
address
0.00507782972508194
EXAMPLES

Basic example
0.005000417898253165
tracking
0.00495700650485667
application
0.004950987824078358
Asynchronous Runtimes
0.004950140910822616
MiniRun::deps(a
0.004942364320407903
j
0.004926727169714392
runtime.createTask
0.004901311517262284
regions
0.004882919308717173
previous models
0.004864897986425026
range
0.004847181644862014
order
0.004832979510868972
thread creation/destruction
0.004793230193898559
compile
0.0047882519645433925
=]{
        for(size_t k=0
0.0047874147951053134
header
0.004783126186754198
templated vector creation
0.00476166082158485
modifications
0.004749996370650617
TOTAL_MEMORY=2047
0.004744903662225239
features
0.004738924550654631
OpenMP
0.004714109559976767
library
0.004698042484398418
cudaSetDevice(_id_device
0.00467674870974529
account
0.004634022757361925
MiniRun.hpp"

MiniRun runtime();//Will
0.0046150941290748985
access
0.004581038957208589
#
0.004569741339278778
only thing
0.004542232204344599
cuda
0.004541100613088378
std::threads
0.004539520864660801
node --experimental-wasm-threads --experimental-wasm-bulk-memory
0.0045254634019509
MiniRun::deps(c
0.004520818114652894
GROUP
0.004515953539807823
model
0.004490493070300082
web applications
0.004485906088926248
use
0.004461586283580106
USE_PTHREADS=1 -s PTHREAD_POOL_SIZE=8
0.00443203603547802
dependency list
0.004397393878661336
run.taskwait(a_group
0.0043962112371802396
device
0.004370192767645544
construct
0.004344910419578943
compilation
0.0043301310667854375
threading
0.004309284144661747
lambda or  std::function
0.004286960166439941
LAMBDA capture list specification
0.004271698288425895
parallelism
0.004264613405354149
user
0.004263790127311283
need
0.004258948780032135
asynchronous finalization
0.0042580605302400855
parameter
0.004230829979969392
return
0.004178327787127187
groups
0.004090615449216703
std::function<void
0.004087971544934852
projects
0.004081242975156623
runtime_object].createTask([GROUP
0.004076492436684958
n-2
0.004062248694509997
multi-core systems
0.004019912884333126
MiniRun::deps(data
0.003982624838268653
more information
0.003956208656710671
b[k*size
0.003938224656280587
n<2
0.00374832716655608
TASKWAIT
0.0037263358817510453
Fibonnaci numbers
0.0036414880738559934
fib(%d
0.0036174776551211882
std::atomic<int> group(0
0.0035477238588022555
OpenMP/OmpSs task model
0.003434893968971915
executeKernelInStream(data,3
0.003406240272971091
demonstration
0.00340023947797228
pthreads
0.0033285318925879532
