importObject
0.06834398902991096
setAddress
0.03926362844011201
address
0.03911407515169833
wasm module
0.0373253131635499
const
0.03644681095963937
cpp code
0.03590909076944338
adr
0.03583786547130254
WebAssembly.instantiate(bytes
0.0325805775861345
setMemory(module.memory
0.03142005222447929
setWasmModule(result.instance.exports
0.03038105203189893
=
0.02906117593129632
import
0.02742737067131079
-std=c++{version
0.02698985521289109
emsdk / macOS
0.025355687816935053
useEffect
0.024377228755532426
function(arg
0.024374116455726375
windows
0.02419163019856474
imported_func
0.02406702707183867
useWasm
0.023930795531485173
brew
0.02211027980890751
Emcc
0.021948463845475212
return
0.021913230294438354
fetch(adr).then(response =>
            response.arrayBuffer
0.020790960520288507
fetchModule
0.02058468844519099
.then(bytes
0.019386813513140512
Command 
emcc -O{flag
0.019330337602335698
importObject).then(result
0.019177059713611985
console.log(arg
0.019018208123879183
WebAssembly.instantiateStreaming(fetch("./validate.wasm
0.018449818688464556
console.log(result
0.018229810534458078
Javascript
0.01819496694287266
emscripten compiler
0.017966114788319037
console.log(result.instance.exports
0.017805614306138473
proc_exit
0.01735769152307045
value
0.01695521067494906
module, setModule] = useState(null
0.01693878608712578
targerFile.cpp} -s EXPORTED_FUNCTIONS=_{func1},_{func2
0.016574368722911053
setModule(result.instance.exports
0.01469136617128423
useEffect(()=
0.013835251011451569
emcc
0.012343616207937322
