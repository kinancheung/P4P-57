pointer
0.04262422558939462
int
0.03795872107675265
char
array
0.03209742060283844
enum


Only C++
0.030586663796417488
memory
Linked list
0.02368325136093178
cout
0.021841905355151008
num
0.0214246301865966
endl
0.0212223020928849
union
0.01679443675605151
void func
0.01657880279831686
p = greeting
0.014993983915627852
Object
0.01488516782509225
int16_t
0.014746451984256769
uint8_t
0.014687770607273554
Value
0.014359126052823884
struct
0.01422625933360512
data types
0.013010063190011134
Programacin
0.012074217577253904
person juan
0.011615458820286856
non-const data
const char
0.011212749406400704
=
0.0110264583802017
int64_t
0.010838190195656995
^
0.010685690054475816
compile time
0.010670997725931254
0x14
0.010618251704743719
short == short int
0.010289970524617916
POINTERS


Object
0.010277686420576002
int8_t
0.009903801440255433
Size
0.009434556864790961
function
0.009398948630947737
0x00
0.008840096829710872
Contiguos
0.008713596715694737
return
0.008654388594352327
Profesor RetromanCurso
0.008434518267382608
namespace std
0.0080967266155417
double PI1
0.00790484096665995
Inteligencia Artificial del Videojuego


BooksOld C++:BOOK Effective C++
0.007690246052467768
Scott Meyers
0.007596311975225494
CPU
0.007539115373657401
exiting
0.007495817859842713
tensors
0.007485673868857343
GPU
0.007476215783677743
PytorchATen
0.007322862389122131
uint8
0.00720543939324148
Autograd
0.007170935980132141
fun
0.006810369462394935
pointers
0.0067765041139139625
int8
0.0066955176911162985
raw_const
0.0066375572103073285
automatic differentiation
0.006598205481174657
bool* b
0.006597191829303155
my_object
0.006577668398368828
i16
0.006519738851557015
Other libraries
0.006440904765425843
my_object_pointer
0.006412832510258801
given tensor
0.0064042167959981345
TfLitePtrUnion
0.006374951295528365
i64
0.0063687276717665385
my_object.do_somthing
0.006296287394041036
Keyword
0.006281089173494503
value
0.006272839829239553
ctional programmers
0.006254509385719775
multiple runs
0.006220127347193278
Struct

Option
0.00619850538040918
int32_t
0.006086194488331918
same location
0.006029866960583951
typedef
0.006021194094886637
auto
0.005999486911905434
nanodegree
Video
0.00594166689498036
C
0.005918646342545332
thing
0.005826868717446046
Motor ECS
0.005776870752915582
Videojuego
0.005630102340869385
std::vector
0.005624362103635389
static variable
0.005585370051460976
my_object->do_somthing
0.00557024315427115
nullptr
0.005549523982350916
Harald Achitz
0.005533933897974369
automatic type inference
0.005511386158270774
Curso
0.005464266217636893
User defined types
0.005435250571534431
TfLiteFloat16
0.005373654137864224
bytes
0.005328763072792668
typesint
0.005307724976010931
Sparse
0.0052882721416380295
0x54
0.005281482660643977
wchar_t
0.00527609725538052
ObjectPtr
0.0052462816135806474
Modifiers
0.005238116980470557
audio_samples

Casting

float position = static_cast(inference_count)

Sizeof

// C++ program
0.0052378168383880545
GStreamer
Eigen
0.005183765307317796
sizes
0.005161075005902135
memory
Hash table
Map

Integers

Data Type Bytes
0.005072959770944607
int* int_pointer            = NULL
0.005063009456863146
things
0.004965367838081963
pinters
0.004944435761791467
num++
0.004919930757883979
linear algebra
0.0048553981195032896
num << "\n
0.004835053793658386
alignas(8
0.0047173461748008915
uint16_t
0.004702129208713757
uint32_t
0.004498622551665117
Curso 2: C++
0.0044618230933738835
0x10
0.0042536592998471566
C++ 14)
Templates de c++
Cualquier charla de Scott Meyers
0.004244710478056056
sizeof(double
0.004158277250195356
float
0.00406201631876952
range loop
0.00404168584154988
scanf
0.003970736841552315
Tips & tricks

Efficient loop
0.003952746355341459
youtube channel
0.0038693444823400293
printf
0.003830389274588493
Pointers

tflite::ops::micro::AllOpsResolver resolver


namespace::Object my_object = namespace::Object
0.0037912319987583507
memcpy
0.0036467255894432446
Booleans
0.003581424587745528
