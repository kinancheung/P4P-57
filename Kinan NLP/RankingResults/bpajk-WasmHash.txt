WebAssembly implementation
0.06123955781752539
SHA224 hash
0.05800955660043827
general hashing functions
0.05091619578690126
string
md5_hash_from_buffer
0.042988796560913936
C++
0.04096964575911634
MD5 hash
0.03759516160141915
index.html example
0.0358969582821809
SHA1 hash
0.026244040099737374
JavaScript implementation
0.02458992848424876
input parameter string
0.024225012498972548
range
0.023449645308764196
browser
0.02332564701402622
project
0.022826155877014784
input data
0.022767787278048887
JavaScript glue code
0.020749735867722486
significant performance boost
0.02064036123988914
http-server
0.019376184268300893
npm
0.018075966751424432
main.wasm
0.01657865634317281
function
0.01593476826307105
comparison
0.015542352007622754
main.js
0.015245938036184705
Test
0.015067270121812103
-O3 attribute
0.014780170249135216
Chrome
0.01462081787466745
small strings
0.014435763145996962
ccall or cwrap methods
0.014176423677090167
Usage
0.014145615026363093
wasm file
0.013934501410480834
script
0.013884101986456045
cwrap method
0.013828084476713208
few bytes
0.01375648990097791
overhead
0.01356290938488246
Known limitations
0.01325932643440483
Example
0.013252197970136395
url
0.013134124291315802
large amounts
0.012482693454114882
RSA Data Security, Inc.
0.012482304534205442
Performance

 Preformance
0.012285607265870666
sha512_hash_from_string
0.011964696644928498
MD5 Message-Digest Algorithm
0.011429064591286248
sha224_hash_from_string
0.01133275296186127
repository

git clone
0.01124200450911785
sha384_hash_from_string
0.011224688174791001
sha256_hash_from_string
0.01119611455566248
MB
0.011188076945714392
SHA2 algorithm
0.01108336209355205
web server
0.010600386413744152
WasmUtil
0.010253811555879682
WasmHash
0.009108079502771803
MIT license
0.00910050909937076
