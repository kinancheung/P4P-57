hash function
0.0220317217742225
bit HighwayHash
0.021548440997290506
SipHash
HighwayHash
0.0212982795030436
inputs
0.016449044629951653
new
cryptographically strong hashes
0.015276825016312095
AVX2 instruction set
0.015071883407756139
bin
0.01365861521209552
CPU
0.011967302219389013
Portable implementation
0.01099172548373925
data
0.010638808484623813
tree
0.009786754507651723
bits
0.009455935553684116
implementations
0.00940973458525161
additional CPU
cost
0.009272192536594066
input sizes
0.008433578329333892
attackers
0.008423012739256008
unacceptable worst-case behavior
0.007469554153834147
hash flooding
0.007318737155941152
attacker
0.007278801629034624
remote requests
0.0071721022833347
seed
0.006533385460697431
security
claims
0.00644681337340182
service
0.006439746326528189
HHResult64 result
0.006340101979398461
less than 0.25%
0.005803784530016299
compiler intrinsics
0.005484361561944562
functions
0.005482889397128161
instructions
0.005375549069083624
VSX
0.005288957472436471
collisions
0.005096835059444829
SSE4.1 version
0.005050871030517407
hash table
0.005002305567969724
highwayhash/sip_hash.h"
using namespace highwayhash
0.004916304941299037
byte
0.004914693173239875
cycles
0.004892004221418716
resulting work
0.004610767086208573
bytes
0.0045627784721104375
costly modulo operation
0.0045059336741979815
variants
0.0044741174556086815
#
0.004452670012381805
linked list
0.0044356919523699315
C++ hash functions
0.004414130057417248
minimal overhead
0.004336570641362871
AVX2-capable CPU
0.00432559838747683
many applications
0.004323969921225056
actual runtime
0.004323241883821963
b
0.0043214228614422805
reference C code
0.004293117233045682
constant factor
0.004234586347325061
new way
0.004210107410436122
lived messages
0.004197710410137112
random subsets
0.00409649863267303
bit halves
0.003871436730609386
mapping
0.0038450859948713435
AVX2 operations
0.003781392139284745
compiler flags
0.0037442930043075557
red-black trees
0.003613430601137959
deletion
0.0035185382782413266
insertion
0.0034973153849696763
denial
0.0033804607349335563
portable version
0.0033740565143217643
preliminary
cryptanalysis
0.003288223352086476
log n.
0.0032414067021632703
times higher throughput
0.0032412969526709233
variability
0.0031989917634289294
account
0.00318013503284176
_
0.0031650783439724816
important parts
0.0031650708171225357
application
0.0031588281837775594
statistical analysis
0.0031399243257432116
bit
distribution
0.0031346695704867734
same results
0.0031256665481664476
timings
0.003109065322345839
SSE4
0.003104619830039312
speed measurements
0.0031041375985225075
keys
0.003103913000882324
measurements
0.0030785620040274493
source files
0.0030591204840278345
make
0.003051378564071276
custom vector classes
0.003041724830272397
timing attack
0.0030271609092118634
complexity
0.0030055688039243396
other attacks
0.003003165683397102
algorithm outputs
0.0030000992952648633
much time
0.0029959666519346756
memory
0.0029691602519690027
good average case performance
0.0029292566336966697
first
entry
0.002920008520763151
inverse
0.0029189571993476935
Frank Wessels
0.00291840766958667
trees
0.0029142533535253825
third-party ARM implementation
0.0028965662436436015
expected height
0.0028954112665040095
input -> hash
mapping
0.002884224730334347
strong (well-distributed and
unpredictable) hash functions
0.0028787592896292787
multiplications
0.0028676566800131375
SIMD registers
0.0028343562430361616
O(n
0.0028266170050076983
data-parallel tree hash variant
0.002807849535721182
Damian Gryski
0.0028052979730528735
e.g. Haswell
0.002787076366745206
bindings
0.0027667411747932438
strong H functions
0.002765112813117046
loop
0.0027315483653353014
char
0.002729856291641358
R
function
0.0027127749791108803
patched GCC
0.002686816566366187
power-of-two table sizes
0.0026777863031754888
safety guarantees
0.002599653937751107
C-callable 64-bit HighwayHash
0.0025329362335381276
prime p
0.002422583678261757
vector128.h
0.0021943057772342805
O(log
0.002163271614199362
n
0.002149177480430232
wrapper classes
0.0021225848216934527
thread affinity
0.002089536242516076
POWER
0.0020833504186185273
os_specific.h
0.0020633631159382147
mm256_add_epi64(b
0.0020613097370553754
profiler.h
0.0020539939881272866
Murmur
0.002036013872888095
c
0.0020270638664257844
square root
0.0020193669790873688
software
0.002019120205539108
number
0.001992127556690674
vector256.h
0.0019920298038025547
HHResult256
HHStateT<HH_TARGET> state(key
0.0019819524474550113
high throughput
0.001975409055566182
stability
0.0019643845955718566
C++11 ThreadPool
0.0019625725752723663
Versioning
0.0019558359214020206
addition
0.0019383556846941938
templates
0.001934711876384324
SipHash13
0.0019340616388932082
const HHKey key HH_ALIGNAS(32
0.001931215775697214
update
0.0019293362822462063
lookups
0.0019282814291357534
round
0.0019261686782221761
result[2
0.001924580421876845
author
0.0019244253308604979
^
0.0019220920958652175
sip_tree_hash
0.0019202704535796634
improved readability
0.0019167596867051629
distribution
0.0019122083137286601
result[1
0.0019115257223488342
respective disadvantages
0.001909327065971249
PerThread
0.001908946074120602
observer
0.001906591422731785
caller
0.001904795696536705
SIMD multiply
0.0018964275097630725
V4x64U
0.0018925013547639617
type-safety
0.0018903951240511058
design choices
0.0018901915212342513
millions
0.001888026537934941
CityHash
0.0018871738992615188
infeasible
attacker effort
0.0018870186490624178
high quality randomness
0.0018789054527616738
Similar
differential attacks
0.001877364609157162
kind
0.0018728833113067379
rest
0.0018721788771894256
methods
0.0018720988374683251
latency
0.0018715916896090913
program traces
0.0018684499140162758
PEXT
0.0018610696567656695
high-resolution timestamps
0.001860379348858215
result[3
0.0018563703957267148
overloaded operators
0.0018552587322066714
faster but weaker variant
0.0018534247165502256
priority
0.0018521222035121879
C++ programs
0.001851185288541819
tsc_timer.h
0.0018504325933303908
initialization
0.0018464676666642482
https://goo.gl/l7ASm8
0.0018461306645733426
highwayhash_target.h
0.0018453640625212876
KiB.
0.0018443541313233692
approaches
0.0018426527809742715
data_parallel.h
0.0018422384555986712
AVX-512
0.0018405468415741786
OpenMP
0.0018366360106411381
infrequent hashing
0.0018365374121288593
sip_tree_hash.cc
0.0018310834532156576
schemes
0.0018305164610962592
instruction_sets.h
0.001827510589744032
final reduction
0.0018269738185739113
lack
0.0018234003699321173
built-in vector types
0.0018209257265414578
partial vectors
0.0018208341319221615
upper bound
0.0018208179355655462
Bernstein
0.001819900964451779
intermixed sequence
0.0018197996251288042
nanobenchmark.h measures
0.0018194584294789215
Permuting
0.0018175873194006117
Infrastructure

arch_specific.h
0.001815636402044722
alternatives
0.0018156255713411857
instruction_sets
0.0018152485316311096
GHz
0.0018134199443678401
optimized handling
0.0018083899082692828
n^2
0.001806039326047937
Jan Wassenberg
0.0018022410593844132
practice
0.0018017703817578097
x6a;&#x61;&#x6e;&#x2e;&#119;&#97;&#115;&#x73;&#x65;&#110;&#98;&#101;&#x72;&#103;&#64;&#x67;&#x6d;&#97;&#x69;&#x6c;&#46;&#99;&#111;&#x6d
0.0017996010894200764
benchmark
0.0017994221758416708
result[0
0.0017991506328686184
non-SIMD version
0.0017980929967148064
internal state
0.0017917367501465698
avalanche properties
0.0017892519804867
Aumasson
0.0017891317383307266
state_helpers.h
0.0017885478324428145
robust statistics
0.0017786411314012068
sip_hash.cc
0.0017782962500814698
first proposal
0.0017760914673509531
scalar_sip_tree_hash.cc
0.001772383516955996
common
case
0.0017719897652416238
connection
0.001770420135292338
other words
0.0017700972602653084
Statistical analyses
0.0017698110351750352
blocks
0.0017687871453366394
ARM assembly https://github.com/minio/highwayhash
0.0017672617937860742
Hash tables
0.001766847271693837
persistent storage
0.0017657814878743118
months
0.001765503569192153
bins
0.0017639582815620648
rate
0.0017607741981363317
treaps
0.0017583288135352227
low finalization
cost
0.0017582402243165713
reduced attack costs
0.0017575419158634754
Andreas Auernhammer Go
0.0017557686554014714
New cryptanalysis tools
0.0017534124877707723
limitations
0.0017522996011151148
Java8 HashMap
0.0017506904655541049
Dispatch
0.0017442993929401218
https://arxiv.org/abs/1612.06257
0.0017412837684360788
Phil Demetriou Python
0.0017411315993875725
MiB
0.001739914727291981
logarithm
0.0017386041239775157
large (1024 bits
0.0017371352829922693
printf("%016"PRIx64"%016"PRIx64"%016"PRIx64"%016"PRIx64"\n
0.0017367762444299648
portable}.h
0.001733973959166649
safer replacements
0.0017328872758023413
Hash-based selection
0.001731583957617216
risk
0.0017298398746834471
interesting alternative
0.0017290753108332455
ScalarSipTreeHash(13
0.0017266043842979221
Self-balancing structures
0.0017241150908036524
K possibilities
0.0017183071431838195
separate chaining typically store bin entries
0.0017181074868243902
contrast
0.0017161137848538586
Jyrki Alakuijala
0.0017150695036807066
older CPUs
0.0017120885340317928
testing
0.0017118465537171207
checksums
0.0017107062738037225
several days
0.0017001847491502466
known-good values
0.001700047600259714
various m.
0.0016999260802275699
maps
0.0016998676730921938
BMI2 instruction
0.001696762226333832
package
0.0016937041763360546
sip_hash_test
0.0016909604062420357
decision
0.0016869496643967937
Wool/Bar-Yosef
0.0016831604332903476
Kyoung Jae Seo
0.001682077251037277
finalization
0.001677558626424922
Github user funny-falcon
0.001677105060052681
worst cases
0.0016757974735682381
given test cases
0.0016757739503523886
https://github.com/kpdemetriou/highwayhash-cffi
Jonathan Beard
0.0016751940048010455
Outputs
0.0016726905662454556
insert instrumentation
0.001670729641126511
A/B experiments
0.0016696645766708421
initial release
0.0016694859071482043
SipHash(13
0.001664080768208676
parallel algorithms
0.0016611314495366077
headers
0.0016596141017864124
speedup
0.0016590511518960061
startup
0.0016587326620261123
large numbers
0.0016574698292871172
template mechanism
0.001654103044692648
Simon Abdullah NPM
0.0016528854467480012
differential, length extension
0.0016496063511310865
original message
0.0016455776799207712
expected 2^32 guesses
0.0016454988890461405
Xeon E5-2690 v3
0.0016418812089650805
SipTreeHash
0.0016402995782235506
entries
0.001638778225753128
fast but cryptographically strong pseudo-random function
0.0016300379105858502
compiler-dependent language extensions
0.001625193456713218
Wikipedia
0.0016231815868477883
single idle core
0.00162308356108966
summary
0.0016227348847944146
reduce phase
0.001622070339343105
constant
operand
0.001620287513927298
web) services
0.00162022724466402
purpose
0.0016192632763050792
Algorithm
0.001616863680708801
birthday paradox
0.0016164989470265922
https://gist.github.com/jonathan-beard/632017faa1d9d1936eb5948ac9186657

Modules

Hashes

c_bindings.h
0.0016119114895121619
cycle-accurate measurements
0.0016104708520119256
bias
0.0016081576668303295
low-overhead, deterministic hierarchical profiler
0.0016071835346096915
local access
0.0016045287472846183
x64 assembly https://github.com/dgryski/go-highway/
0.0016034509098496728
separate translation units
0.001597993401422926
many instances
0.0015925556859696737
expecting attack surface simple non-balancing binary search tree
0.0015918841608082743
unrealistic branch prediction effects
0.0015895698958133743
invariants
0.0015888827605835677
recent relaxed balancing
schemes
0.0015879986785903807
definition
rule
0.0015870166748810808
Introduction

Hash functions
0.001586381819617054
crashes
0.0015836865387909918
given set
0.001580255614210743
bounds
0.001577997104513877
nested) zone
0.0015777679400384098
core or entire socket
0.0015711892924414267
network/RPC packets
0.0015705342025168862
clock frequency
0.0015663857895695404
https://goo.gl/80GBSD
0.0015663137600716876
m that map
0.0015612898800525118
period
0.0015611264454856904
msvc subdirectory
0.0015593922729689566
required flags
0.001556215655868119
unrealistic 150 us
round-trip times
0.001553315303609996
fast and portable drop-in replacement
0.001549470943763398
faster version
0.0015484004338371074
unacceptable linear-time lookup cost
0.001547562852122526
touch
0.0015469677713515636
https://www.npmjs.com/package/highwayhash-nodejs
Lovell Fuller node.js bindings https://github.com/lovell/highwayhash
Andreas Sonnleitner WebAssembly and NPM package https://www.npmjs.com/package/highwayhash-wasm
Nick Babcock Rust port https://github.com/nickbabcock/highway-rs
Vinzent Steinberg Rust bindings
0.001546368270928015
Windows
0.0015408372541544173
uniform random generator
0.001538169671938852
additional
bookkeeping information
0.0015358418248444111
insertions
0.001531441922749247
hexadecimal format
0.001530993971390639
issue
0.0015262579430273464
SAT-solver attacks
0.001515654590047212
artificial
microbenchmark
0.001510754679784677
fewer tree
rotations
0.0014986076874557888
~56K cycle warmup period
0.0014976619863841163
AVL variant
0.0014931626845653512
Visual Studio 2015 project
0.0014931005945977441
https://goo.gl/PFwwkx
0.0014909947559948295
Attackers
0.0014906542624665339
x6a;&#x79;&#x72;&#107;&#x69;&#x2e;&#97;&#108;&#x61;&#107;&#x75;&#105;&#x6a;&#x61;&#108;&#97;&#64;&#103;&#109;&#x61;&#105;&#x6c;&#x2e;&#99;&#111;&#x6d
0.0014597386580369595
HighwayHashAVX2
0.0014544229096495748
augmented/de-amortized cuckoo hash tables
0.001405825460321509
Quick
0.001399700092566646
match
0.0013957468762729455
Linux or Mac platform
0.0013759546433945598
SipHash 8.13 2.58 2.73 1.87 1.93 1.26
SipHash13 6.96 2.09 2.12 1.32 1.33 0.68

SipTreeHash
0.001350745172862668
faster SIMD hash
0.001346452479620946
return
0.0013164855616707512
HighwayHashT(&state
0.0012376405377984962
const HH_U64 key2[2] HH_ALIGNAS(16
0.001194155689196914
official Google product
0.0011496519524777842
