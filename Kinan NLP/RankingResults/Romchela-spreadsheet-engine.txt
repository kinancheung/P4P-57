cells
0.05823177997529148
solution
0.047083205340172046
cell
0.0348685649157417
values
0.032003536136421123
cell/value
0.023931045709872666
ChangeCell method
0.021230669166980028
multiple threads
0.01798727277433476
graph
0.017626624055364203
ms
0.016726522601054426
ms. Fast solution
0.015961828508392867
Time complexity
0.015267222406997285
medium total dependency count
0.0151511239466434
InitialCalculate method
0.014737962995420215
data
0.014518153187852502
multiple solutions
0.013737560165964476
input file
0.012201200037149055
queue
0.012154570510822022
Parallel DAG building
0.011254059700350493
Ghz 16 GB RAM x86
0.011070257993882955
formula
0.010575117793853088
small total number
0.01041344253335341
GHz
0.01002265891562542
edges
0.009020159207114959
large OneThreadSimple
0.009018898432528073
medium and small works
0.009018588922228519
output file
0.008556747852943466
parallelization
0.008248913510536313
toplogical sort
0.008023843760519003
state
0.00788950834355822
Version
0.007789285981745275
load time
0.007692598633743556
cell B
0.007612262033620098
task
0.007503878895786895
medium modifications
0.007494294505836217
reachable nodes
0.007344992780480947
algorithm
0.0073367836453382285
thread-simple.cpp
0.006552460518408019
install gcc@9
0.0065294358789257
lock-free queue implementation
0.0063205443617888254
particular order
0.006142305845741981
Windows] AMD Ryzen 7 3700 X 8-Core Processor
0.006118814426836847
parallel
0.005943552512033941
A
0.005930413515490469
sums
0.005925189607546582
subgraph
0.005853243071081605
MacOS
0.005772157961680256
File path
0.00571303856231456
macOS 10.15.7
0.005638772841335397
format
0.005570714781007558
implementation
0.005490677024252379
Intel Core i7 9750H
0.005428049143584333
Files
0.0053797689109112475
fact
0.005369242263168277
performance
0.005358400454627944
lot
0.005171396310862029
second argument
0.005089066212397932
space complexity
0.0050483903138779564
computation team
0.005041322320263764
string name
0.005019997951271763
A -> B
0.004811838213120635
spreadsheet computation engine
0.0046883985989034215
i7-8550U CPU
0.004326393623668453
recalulate
0.004049873820433257
mobile
0.003930308784518469
Path
0.0039274397489476994
runtime benefits
0.00388124049517994
C++
0.003865981148938728
fast.cpp
0.003818996851208895
desktop
0.003795699830347805
inputs/2_modifications_large.txt
0.0037765953365010963
folder
0.003763158729318274
X
0.0037451963132291073
Rust
0.0037234724391618235
edits
0.0036640365945692734
outputs
0.0036573558850832217
Repeat
0.0036001051191807978
Backend
0.0036000744589532417
execution
0.003597620344490749
arguments
0.003578262310198189
solutions/fast.h

Overall description
0.0035408787644714453
answers
0.0035315970080577975
linearity
0.0034923406753131986
WebAssembly
0.0034877532956578902
system language
0.0034813837430181403
results
0.0034750356100685187
inputs/2_initial.txt - input
0.003463213323227027
MBP
0.003456516003384386
calculation
0.003451613123261946
Frontend
0.0034466977940247555
parallelism
0.003445213858994349
program
0.003410086713587425
visual studio
0.0034036770416086505
Windows] C++17
0.003397572502902988
Large test
0.0033922300927879136
interface
0.0033776085681331246
problem statement
0.003372045873919679
linux
0.0033716091350454555
array
0.0033404971937494835
row
0.0033382692521020797
hash maps
0.0033264462637239843
dependencies
0.0033219663872640923
high potential
0.003315110702348269
Program entry point
0.003292989420657147
tools
0.0032802971990625505
Requirements
0.0032644382312569885
Optimized fast solution
0.003250950431960722
methods
0.003222960406466816
summation function
0.0032178891205431014
int main() method
0.0032155710120718617
enough benefit
0.003214023830239886
inputs/1_modifications_small.txt

 inputs/1_modifications_medium.txt

 inputs/1_modifications_large.txt
0.0032040657608591113
error
0.0031899285738124913
cycle
0.0031786145549969344
Solutions
0.0031710174942630944
debug purposes
0.003150709451551046
simple construction
0.0031458867660319576
inputs/2_modifications_medium.txt
0.003132487834172969
direct children
0.003125848511607739
A17
0.003112436681035942
occasional random X ms delays
0.0031067889496331053
https://github.com/cameron314/concurrentqueue

Tests

Small test
0.0031054290028773176
OutputData
0.0031042831099270165
GetCurrentValues - returns values
0.0030736178909861168
Support cycles
0.0030722200179118856
Z67
0.0030691505427159088
parts
0.003067289946045378
Formulas
0.003064537723793443
code
0.0030588608565641005
single thread simple solution
0.0030460061323561334
Time complexity: O(g), g - number
0.00302399746131633
int
0.0030208168120148737
GB
0.002990179060434317
easiest possible way
0.0029635776583983855
deletion
0.002951725193030249
core, 32 GB 2400 MHz DDR4
0.002944463427187774
concurrent_unordered_map
0.002942741763109121
graph/computation algorithm
0.0029425197717033776
std::ifstream
0.0029405553892165336
user
0.0029401188109379815
Optimize IO
0.002897536482983547
reason
0.002892995571188362
thing
0.0028861587349434765
edge
0.002876619545510323
Profiling
0.0028757248182373256
main use case
0.0028579489899745814
concurrent data structure implementations
0.00283434288627334
efficient parallel access/modifications
0.0028017859772474776
TODO and possible optimizations
0.002798309856982467
breadth-first search
0.0027955658711405155
big project
0.0027405327311954995
recursion
0.002720629981120784
background job
0.0026681882963418492
ground
0.0026594001361750184
different implementations
0.002615344834881383
functions
0.0024640898759787097
Spreadsheet computation engine

Problem description
0.0023336011373255874
Add/delete cell functionallity
0.0023287272322155958
